name: PyPI Release

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-latest
            target: armv7
          - runner: ubuntu-latest
            target: s390x
          - runner: ubuntu-latest
            target: ppc64le
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Set up Python environment variables
        run: |
          echo "PYTHON_INCLUDE_DIR=$(python3 -c 'from sysconfig import get_paths as gp; print(gp()[\"include\"])')" >> $GITHUB_ENV
          echo "PYTHON_LIB_DIR=$(python3 -c 'from sysconfig import get_paths as gp; print(gp()[\"stdlib\"])')" >> $GITHUB_ENV
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        env:
          CFLAGS: "-I${{ env.PYTHON_INCLUDE_DIR }}"
          LDFLAGS: "-L${{ env.PYTHON_LIB_DIR }}"
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
          manylinux: auto
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-latest
            target: armv7
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Set up Python environment variables
        run: |
          echo "PYTHON_INCLUDE_DIR=$(python3 -c 'from sysconfig import get_paths as gp; print(gp()[\"include\"])')" >> $GITHUB_ENV
          echo "PYTHON_LIB_DIR=$(python3 -c 'from sysconfig import get_paths as gp; print(gp()[\"stdlib\"])')" >> $GITHUB_ENV
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        env:
          CFLAGS: "-I${{ env.PYTHON_INCLUDE_DIR }}"
          LDFLAGS: "-L${{ env.PYTHON_LIB_DIR }}"
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
          manylinux: musllinux_1_2
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x86_64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Set up Python environment variables
        run: |
          echo "PYTHON_INCLUDE_DIR=$(python -c 'from sysconfig import get_paths as gp; print(gp()[\"include\"])')" >> $GITHUB_ENV
          echo "PYTHON_LIB_DIR=$(python -c 'from sysconfig import get_paths as gp; print(gp()[\"stdlib\"])')" >> $GITHUB_ENV
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        env:
          CFLAGS: "-I${{ env.PYTHON_INCLUDE_DIR }}"
          LDFLAGS: "-L${{ env.PYTHON_LIB_DIR }}"
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-latest
            target: x86_64
          - runner: macos-latest
            target: arm64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Set up Python environment variables
        run: |
          echo "PYTHON_INCLUDE_DIR=$(python3 -c 'from sysconfig import get_paths as gp; print(gp()[\"include\"])')" >> $GITHUB_ENV
          echo "PYTHON_LIB_DIR=$(python3 -c 'from sysconfig import get_paths as gp; print(gp()[\"stdlib\"])')" >> $GITHUB_ENV
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        env:
          CFLAGS: "-I${{ env.PYTHON_INCLUDE_DIR }}"
          LDFLAGS: "-L${{ env.PYTHON_LIB_DIR }}"
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --release --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release-to-testpypi:
    name: Release to TestPyPI
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [linux, musllinux, windows, macos, sdist]
    steps:
      - uses: actions/download-artifact@v4
      - name: Publish to TestPyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing --repository-url https://test.pypi.org/legacy/ wheels-*/*

  release-to-pypi:
    name: Relase to PyPI
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux, musllinux, windows, macos, sdist]
    steps:
      - name: Publish to PyPI
        uses: actions/download-artifact@v4
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*

  github-release:
    name: Create GitHub Release
    needs: [release-to-pypi]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          path: dist/
      - name: Sign the distribution ðŸ“¦ with Sigstore
        uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: >-
            ./dist/*.whl
            ./dist/*.tar.gz
      - name: Create a GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create ${{ github.ref_name }} \
            --repo '${{ github.repository }}' \
            --title '${{ github.ref_name }}' \
            --generate-notes
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload ${{ github.ref_name }} ./dist/**/* \
            --repo '${{ github.repository }}' \
            --clobber
