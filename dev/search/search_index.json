{"config":{"lang":["ja"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RDEToolKit","text":"<p>RDEToolKit\u306f\u3001RDE\u69cb\u9020\u5316\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u57fa\u672c\u7684\u306aPython\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u3059\u3002RDEToolKit\u306e\u5404\u7a2e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001RDE\u3078\u306e\u7814\u7a76\u30fb\u5b9f\u9a13\u30c7\u30fc\u30bf\u306e\u767b\u9332\u51e6\u7406\u3092\u7c21\u5358\u306b\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002\u4e3b\u306b\u3001RDEToolKit\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u5b9a\u7fa9\u3057\u305f\u69cb\u9020\u5316\u51e6\u7406\u306e\u524d\u51e6\u7406\u30fb\u5f8c\u51e6\u7406\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u7814\u7a76\u3084\u5b9f\u9a13\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4f7f\u7528\u3055\u308c\u3066\u3044\u308bPython\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u30c7\u30fc\u30bf\u306e\u767b\u9332\u304b\u3089\u52a0\u5de5\u3001\u30b0\u30e9\u30d5\u5316\u306a\u3069\u3088\u308a\u591a\u69d8\u306a\u51e6\u7406\u3092\u5b9f\u73fe\u53ef\u80fd\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30c7\u30fc\u30bf\u306e\u30af\u30ec\u30f3\u30b8\u30f3\u30b0\u3001\u5909\u63db\u3001\u96c6\u8a08\u3001\u53ef\u8996\u5316\u306a\u3069\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u5168\u4f53\u3092\u52b9\u7387\u7684\u306b\u7ba1\u7406\u3067\u304d\u307e\u3059\u3002</p> <p></p> <p></p>"},{"location":"#_1","title":"\u4e3b\u306a\u7279\u5fb4","text":"<ul> <li>\u30e2\u30b8\u30e5\u30fc\u30eb\u5316: RDE\u30c7\u30fc\u30bf\u767b\u9332\u306b\u5fc5\u8981\u306a\u524d\u51e6\u7406\u3084\u5f8c\u51e6\u7406\u304c\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u304a\u308a\u3001\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u3044\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308b\u3060\u3051\u3067\u3001\u67d4\u8edf\u306b\u69cb\u9020\u51e6\u7406\u3092\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002</li> <li>\u67d4\u8edf\u306a\u30c7\u30fc\u30bf\u51e6\u7406: \u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3001\u5909\u63db\u3001\u53ef\u8996\u5316\u306a\u3069\u3001\u3055\u307e\u3056\u307e\u306a\u30c7\u30fc\u30bf\u51e6\u7406\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002</li> <li>\u7c21\u5358\u306a\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb: <code>pip install rdetoolkit</code> \u30b3\u30de\u30f3\u30c9\u3067\u7c21\u5358\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002</li> <li>\u62e1\u5f35\u6027: \u30e6\u30fc\u30b6\u30fc\u304c\u5b9a\u7fa9\u3057\u305f\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u51e6\u7406\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u7279\u5b9a\u306e\u30c7\u30fc\u30bf\u51e6\u7406\u30cb\u30fc\u30ba\u306b\u5bfe\u5fdc\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u7279\u5b9a\u306e\u7814\u7a76\u3084\u5b9f\u9a13\u306e\u8981\u4ef6\u306b\u5408\u308f\u305b\u305f\u30c7\u30fc\u30bf\u51e6\u7406\u304c\u53ef\u80fd\u3067\u3059\u3002</li> <li>\u7d71\u5408: \u4ed6\u306ePython\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u30c7\u30fc\u30bf\u306e\u767b\u9332\u304b\u3089\u52a0\u5de5\u3001\u30b0\u30e9\u30d5\u5316\u306a\u3069\u3001\u3088\u308a\u591a\u69d8\u306a\u51e6\u7406\u3092\u5b9f\u73fe\u53ef\u80fd\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u69cb\u9020\u5316\u51e6\u7406\u5168\u4f53\u3092\u4e00\u5143\u7ba1\u7406\u3067\u304d\u307e\u3059\u3002</li> </ul>"},{"location":"#_2","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>RDEToolKit\u306fPython\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u304a\u308a\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002</p> <pre><code>pip install rdetoolkit\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> Sample1: \u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u69cb\u9020\u5316\u51e6\u7406\u3042\u308a Sample2: \u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u69cb\u9020\u5316\u51e6\u7406\u306a\u3057 <p>\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5f8c\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>python -m rdetoolkit init\n</code></pre> <p>\u5b9f\u884c\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3068\u3001\u4e8b\u524d\u306b\u4ee5\u4e0b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002<code>invoice.json</code>\u3068<code>invoice.schema.json</code>\u306f\u3001\u3053\u3061\u3089\u306e\u30da\u30fc\u30b8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>.\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 inputdata\n\u2502   \u251c\u2500\u2500 invoice\n\u2502   \u2502   \u2514\u2500\u2500 invoice.json\n\u2502   \u2514\u2500\u2500 tasksupport\n\u2502       \u2514\u2500\u2500 invoice.schema.json\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 modules\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <pre><code>import rdetoolkit\n\n\n# User-defined Processing\ndef display_messsage(path):\n    print(f'Test Message!: {path}')\n\ndef custom_graph():\n    print('graph')\n\ndef custom_extract_metadata():\n    print('extract metadata')\n\ndef dataset(srcpaths, resource_paths):\n    display_messsage(srcpaths)\n    display_messsage(resource_paths)\n    custom_graph()\n    custom_extract_metadata()\n\n# RDEToolKit\nrdetoolkit.workflows.run(custom_dataset_function=dataset)\n</code></pre>"},{"location":"#api-documentation","title":"API Documentation","text":"<p>API Documentation \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"#modules","title":"modules","text":"<ul> <li>workflows: \u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306e\u5b9a\u7fa9\u3068\u7ba1\u7406\u3092\u884c\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u3002</li> <li>config: \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3068\u7ba1\u7406\u3092\u884c\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u3002</li> <li>rde2util: RDE\u95a2\u9023\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570\u3092\u63d0\u4f9b\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3002</li> <li>invoicefile: \u8acb\u6c42\u66f8\u30d5\u30a1\u30a4\u30eb\u306e\u51e6\u7406\u3092\u884c\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u3002</li> <li>validation: \u30c7\u30fc\u30bf\u306e\u691c\u8a3c\u3092\u884c\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u3002</li> <li>modeproc: \u30e2\u30fc\u30c9\u51e6\u7406\u3092\u884c\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u3002</li> <li>img2thumb: \u753b\u50cf\u3092\u30b5\u30e0\u30cd\u30a4\u30eb\u306b\u5909\u63db\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3002</li> <li>rdelogger: \u30ed\u30ae\u30f3\u30b0\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3002</li> <li>errors: \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u3002</li> <li>exceptions: \u4f8b\u5916\u51e6\u7406\u3092\u884c\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u3002</li> </ul>"},{"location":"#models","title":"models","text":"<ul> <li>config: \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3068\u7ba1\u7406\u3092\u884c\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u3002</li> <li>invoice_schema: \u9001\u308a\u72b6\u306e\u30b9\u30ad\u30fc\u30de\u3092\u5b9a\u7fa9\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3002</li> <li>metadata: \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u7ba1\u7406\u3092\u884c\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u3002</li> <li>rde2types: RDE\u95a2\u9023\u306e\u578b\u5b9a\u7fa9\u3092\u63d0\u4f9b\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3002</li> <li>result: \u51e6\u7406\u7d50\u679c\u3092\u7ba1\u7406\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3002</li> </ul>"},{"location":"#impl","title":"impl","text":"<ul> <li>compressed_controller: \u5727\u7e2e\u30d5\u30a1\u30a4\u30eb\u306e\u7ba1\u7406\u3092\u884c\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u3002</li> <li>input_controller: \u5165\u529b\u30e2\u30fc\u30c9\u306e\u7ba1\u7406\u3092\u884c\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u3002</li> </ul>"},{"location":"#interface","title":"interface","text":"<ul> <li>filechecker</li> </ul>"},{"location":"#cmd","title":"cmd","text":"<ul> <li>command</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>RDEToolKit\u3078\u306e\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u3092\u3057\u3066\u3044\u305f\u3060\u304f\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>Contributing</p>"},{"location":"#_3","title":"\u30e9\u30a4\u30bb\u30f3\u30b9","text":"<p>RDEToolKit\u306fMIT\u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u4e0b\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001LICENSE\u30d5\u30a1\u30a4\u30eb\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"install/","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5","text":""},{"location":"install/#pypi","title":"PyPI\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>rdetoolkit\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002</p> Unix/macOSWindows <pre><code>python3 -m pip install rdetoolkit\npython3 -m pip install rdetoolkit==&lt;\u6307\u5b9a\u30d0\u30fc\u30b8\u30e7\u30f3&gt;\n</code></pre> <pre><code>py -m pip install rdetoolkit\npy -m pip install rdetoolkit==&lt;\u6307\u5b9a\u30d0\u30fc\u30b8\u30e7\u30f3&gt;\n</code></pre>"},{"location":"install/#github","title":"Github\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>Github\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u76f4\u63a5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3044\u5834\u5408\u3084\u3001\u958b\u767a\u7248\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5834\u5408\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u76f4\u63a5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> Unix/macOSWindows <pre><code>python3 -m pip install rdetoolkit@git+https://github.com/nims-dpfc/rdetoolkit.git\n</code></pre> <pre><code>py -m pip install \"rdetoolkit@git+https://github.com/nims-dpfc/rdetoolkit.git\"\n</code></pre>"},{"location":"install/#_2","title":"\u4f9d\u5b58\u95a2\u4fc2","text":"<p>\u672c\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u3001\u4ee5\u4e0b\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4\u306b\u4f9d\u5b58\u3057\u3066\u3044\u307e\u3059\u3002</p> <pre><code>chardet&gt;=5.2.0\ncharset-normalizer&gt;=3.2.0\nmatplotlib&gt;=3.7.2\nopenpyxl&gt;=3.1.2\npandas&gt;=2.0.3\nbuild&gt;=1.0.3\nclick&gt;=8.1.7\ntoml&gt;=0.10.2\npydantic&gt;=2.6.3\njsonschema&gt;=4.21.1\ntomlkit&gt;=0.12.4\nPyYAML&gt;=6.0.1\neval_type_backport&gt;=0.2.0\n</code></pre>"},{"location":"contribute/documents_contributing/","title":"Contributing to RDEToolKit","text":""},{"location":"contribute/documents_contributing/#_1","title":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8","text":"<p>RDEToolKit\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u304cRDE\u69cb\u9020\u5316\u51e6\u7406\u3092\u6b63\u3057\u304f\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u30ea\u30bd\u30fc\u30b9\u306b\u306a\u308a\u307e\u3059\u3002\u5229\u7528\u8005\u306e\u7686\u69d8\u304b\u3089\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u6539\u5584\u306b\u3054\u5354\u529b\u304f\u3060\u3055\u3044\u3002 \u5fc5\u305a\u3057\u3082\u3001RDEToolKit\u3078\u306e\u6df1\u3044\u7406\u89e3\u304c\u3042\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u5185\u5bb9\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b\u3001\u7406\u89e3\u3057\u306b\u304f\u3044\u3068\u3044\u3046\u7b87\u6240\u306f\u3001\u7a4d\u6975\u7684\u306bIssue\u3067\u306e\u5831\u544a\u3092\u304a\u5f85\u3061\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u5177\u4f53\u7684\u306a\u624b\u9806\u306b\u3064\u3044\u3066\u306f\u3001\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u304b\u3089\u8aac\u660e\u3044\u305f\u3057\u307e\u3059\u3002</p>"},{"location":"contribute/documents_contributing/#rdetoolkit","title":"RDEToolKit\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8","text":"<p>rdetoolkit\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3001\u672c\u30ea\u30dd\u30b8\u30c8\u30ea\u306e<code>docs</code>\u30d5\u30a9\u30eb\u30c0\u306b\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3001MkDocs\u3092\u4f7f\u7528\u3057\u3066\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u69cb\u7bc9\u3057\u3066\u3044\u307e\u3059\u3002\u3059\u3079\u3066\u306e\u30b3\u30fc\u30c9\u304c\u9069\u5207\u306b\u6587\u66f8\u5316\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4ee5\u4e0b\u306f\u3001\u9069\u5207\u306b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3055\u308c\u305f docstring \u3092\u4f7f\u7528\u3057\u3066\u6587\u66f8\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <ul> <li>\u30e2\u30b8\u30e5\u30fc\u30eb</li> <li>\u30af\u30e9\u30b9\u5b9a\u7fa9</li> <li>\u95a2\u6570\u306e\u5b9a\u7fa9</li> <li>\u30e2\u30b8\u30e5\u30fc\u30eb\u30ec\u30d9\u30eb\u306e\u5909\u6570</li> </ul>"},{"location":"contribute/documents_contributing/#_2","title":"\u6ce8\u610f\u4e8b\u9805","text":"<p>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u66f4\u65b0\u306b\u95a2\u3057\u3066\u77e5\u3063\u3066\u304a\u304f\u3079\u304d\u91cd\u8981\u4e8b\u9805\u306b\u3064\u3044\u3066:</p> <ul> <li>rdetoolkit\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3001\u30b3\u30fc\u30c9\u81ea\u4f53\u306edocstring\u3068\u3001\u305d\u306e\u4ed6\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e2\u3064\u306b\u5927\u5225\u3055\u308c\u307e\u3059\u3002</li> <li>docstring\u306f\u3001\u5404\u7a2e\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u5229\u7528\u6cd5\u304c\u8a18\u8f09\u3055\u308c\u3001GitLab CI/CD\u3067\u3001\u81ea\u52d5\u30d3\u30eb\u30c9\u3055\u308c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002</li> <li>docstring\u306f\u3001PEP 257\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u306b\u5f93\u3063\u3066\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3055\u308c\u305fGoogle Style\u306edocstring\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 (\u305d\u306e\u4ed6\u306e\u4f8b\u306b\u3064\u3044\u3066\u306f\u3001\u300cGoogle \u30b9\u30bf\u30a4\u30eb\u306e Python \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u6587\u5b57\u5217\u306e\u4f8b\u300d\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002)</li> <li>Google Style\u306e docstring \u3068 pydocstyle lint \u306e\u9593\u3067\u7af6\u5408\u3059\u308b\u5834\u5408\u306f\u3001pydocstyle lint \u306e\u30d2\u30f3\u30c8\u306b\u5f93\u3063\u3066\u304f\u3060\u3055\u3044\u3002</li> </ul>"},{"location":"contribute/documents_contributing/#_3","title":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6539\u5584\u70b9\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b","text":"<p>\u4ee5\u4e0b\u306eURL\u3088\u308a\u3001RDEToolKit\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001issue\u3092\u767a\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u3053\u306e\u6642\u3001\u30e9\u30d9\u30eb\u306f<code>Type:documentation</code>\u3068\u3044\u3046\u30e9\u30d9\u30eb\u3092\u4ed8\u4e0e\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>RDEToolKit - github.com</p>"},{"location":"contribute/documents_contributing/#_4","title":"\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u5909\u66f4\u3059\u308b","text":"<p>\u5909\u66f4\u65b9\u6cd5\u306f\u3001\u30ed\u30fc\u30ab\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30d6\u30e9\u30f3\u30c1\u3092\u5909\u66f4\u3057\u3066\u3001\u5909\u66f4\u3092Push\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30d6\u30e9\u30f3\u30c1\u540d\u306e\u5148\u982d\u306b<code>docs-***</code>\u3068\u3044\u3046\u63a5\u982d\u8f9e\u3092\u3064\u3051\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>git checkout -b docs-***\n# \u5b9f\u884c\u4f8b\ngit checkout -b docs-install-manual\n</code></pre> <p>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u5909\u66f4\u3057\u3001\u30ea\u30e2\u30fc\u30c8\u30ea\u30dd\u30b8\u30c8\u30ea\u306bPush\u3057\u307e\u3059\u3002</p> <pre><code>git add &lt;\u5909\u66f4\u3057\u305f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8&gt;\ngit commit -m \"\u30b3\u30df\u30c3\u30c8\u30e1\u30c3\u30bb\u30fc\u30b8\"\ngit push origin &lt;\u5bfe\u8c61\u306e\u30d6\u30e9\u30f3\u30c1\u540d&gt;\n</code></pre>"},{"location":"contribute/documents_contributing/#web","title":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092Web\u4e0a\u3067\u78ba\u8a8d\u3059\u308b","text":"<p>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092Web\u3067\u78ba\u8a8d\u3059\u308b\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\u3057\u3066\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"contribute/documents_contributing/#rye","title":"rye\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u308b\u5834\u5408","text":"<pre><code>rye sync\nmkdocs serve\n</code></pre>"},{"location":"contribute/documents_contributing/#rye_1","title":"rye\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u306a\u3044\u5834\u5408","text":"<pre><code>pip install -r requirements.lock\nmkdocs serve\n</code></pre>"},{"location":"contribute/documents_contributing/#main","title":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092main\u30d6\u30e9\u30f3\u30c1\u306b\u30de\u30fc\u30b8\u3059\u308b","text":"<p>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8ffd\u52a0\u3057\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u7ba1\u7406\u8005\u304c\u78ba\u8a8d\u3057\u3001\u554f\u984c\u304c\u306a\u3051\u308c\u3070\u30de\u30fc\u30b8\u3057\u307e\u3059\u3002</p>"},{"location":"contribute/home/","title":"Contributing to RDEToolKit","text":""},{"location":"contribute/home/#_1","title":"\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306e\u6e96\u5099","text":"<p>RDEToolKit\u3078\u306e\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u3092\u3057\u3066\u3044\u305f\u3060\u304f\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u624b\u9806\u304c\u5fc5\u8981\u3067\u3059\u3002</p>"},{"location":"contribute/home/#_2","title":"\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30af\u30ed\u30fc\u30f3\u3092\u30ed\u30fc\u30ab\u30eb\u306b\u4f5c\u6210\u3059\u308b","text":"<pre><code>cd &lt;\u4efb\u610f\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea&gt;\n\n# SSH\ngit clone git@github.com:nims-dpfc/rdetoolkit.git\n# HTTPS\ngit clone https://github.com/nims-dpfc/rdetoolkit.git\n\n# \u30ed\u30fc\u30ab\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u79fb\u52d5\ncd rdetoolkit\n</code></pre>"},{"location":"contribute/home/#_3","title":"\u30d1\u30c3\u30b1\u30fc\u30b8\u7ba1\u7406\u30c4\u30fc\u30eb\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>rdetoolkit\u3067\u306f\u3001<code>rye</code>\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002rye\u306f\u3001Flask\u306e\u4f5c\u8005\u304c\u4f5c\u6210\u3057\u305f\u3001Python\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u95a2\u4fc2\u7ba1\u7406\u30c4\u30fc\u30eb\u3067\u3059\u3002\u5185\u90e8\u5b9f\u88c5\u306fRust\u306e\u305f\u3081\u3001\u975e\u5e38\u306b\u9ad8\u901f\u3067\u3059\u3002poetry\u3092\u9078\u629e\u305b\u305arye\u3092\u63a1\u7528\u3057\u305f\u7406\u7531\u306f\u3001\u52d5\u4f5c\u901f\u5ea6\u306e\u89b3\u70b9\u3068\u3001<code>pyenv</code>\u3092\u5225\u9014\u5229\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002rye\u306f\u3001<code>pyenv+poetry</code>\u306e\u3088\u3046\u306b\u3001\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u306e\u7ba1\u7406\u3068\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u7ba1\u7406\u304c\u7d71\u5408\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u306e\u89b3\u70b9\u304b\u3089\u3082rye\u306e\u65b9\u304c\u512a\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u3053\u3061\u3089\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>rye\u306f\u4ee5\u4e0b\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u8003\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>Installation - Rye</p>"},{"location":"contribute/home/#_4","title":"\u958b\u767a\u74b0\u5883\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","text":"<p>rye\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5f8c\u3001\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u958b\u767a\u74b0\u5883\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u3066\u304f\u3060\u3055\u3044\u3002<code>rye sync</code>\u3067\u4eee\u60f3\u74b0\u5883\u304c\u4f5c\u6210\u3055\u308c\u3001\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u4eee\u60f3\u74b0\u5883\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u307e\u3059\u3002</p> <pre><code>cd &lt;rdetoolkit\u306e\u30ed\u30fc\u30ab\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea&gt;\nrye sync\n</code></pre> <p>\u4eee\u60f3\u74b0\u5883\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002</p> <pre><code>source .venv/bin/activate\n</code></pre> <p>\u307e\u305f\u3001RDEToolKit\u3067\u306f\u30b3\u30fc\u30c9\u54c1\u8cea\u306e\u89b3\u70b9\u304b\u3089\u3001<code>pre-commit</code>\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002pre-commit\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>pre-commit install\n</code></pre> <p>\u3082\u3057\u3001Visaul Stdio Code\u3092\u5229\u7528\u3059\u308b\u969b\u306f\u3001\u62e1\u5f35\u6a5f\u80fd<code>pre-commit</code>\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"contribute/home/#contributing","title":"Contributing","text":"<p>RDEToolKit\u3067\u306f\u3001\u4ee5\u4e0b\u306e2\u70b9\u306e\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u3092\u671f\u5f85\u3057\u3066\u3044\u307e\u3059\u3002\u4e0b\u8a18\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u8003\u306b\u3001\u5909\u66f4\u30fb\u30d0\u30b0\u30ec\u30dd\u30fc\u30c8\u30fb\u6a5f\u80fd\u4fee\u6b63\u3092\u5b9f\u65bd\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <ul> <li>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8</li> <li>\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u306e\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8</li> </ul>"},{"location":"contribute/sourcecode_contributing/","title":"Contributing to RDEToolKit","text":""},{"location":"contribute/sourcecode_contributing/#_1","title":"\u6a5f\u80fd\u30d0\u30b0\u30ec\u30dd\u30fc\u30c8\u3068\u6a5f\u80fd\u62e1\u5f35\u306e\u30ea\u30af\u30a8\u30b9\u30c8","text":"<p>\u3053\u306e\u30c4\u30fc\u30eb\u3067\u3001\u65b0\u6a5f\u80fd\u30fb\u5909\u66f4\u30fb\u4e0d\u5177\u5408\u7b49\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u5909\u66f4\u3092\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <ul> <li>\u4e0a\u8a18\u30ea\u30dd\u30b8\u30c8\u30ea\u306eissue\u3067\u3001Issue\u3092\u4f5c\u6210\u3057\u65b0\u6a5f\u80fd\u3001\u554f\u984c\u3084\u4e0d\u5177\u5408\u3092\u5831\u544a\u3059\u308b</li> <li>\u5909\u66f4\u3092\u5b9f\u969b\u306b\u52a0\u3048\u308b\u5834\u5408\u3001\u30ed\u30fc\u30ab\u30eb\u3067\u65b0\u898f\u306b\u30d6\u30e9\u30f3\u30c1\u3092\u4f5c\u6210\u3057\u3001\u5909\u66f4\u3092\u52a0\u3048\u308b\u3002</li> <li>CI\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u3001\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u51fa\u3059</li> <li>CI\u30c6\u30b9\u30c8\u304c\u5168\u3066\u30d1\u30b9\u3001\u30ec\u30d3\u30e5\u30fc\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001\u30de\u30fc\u30b8\u3059\u308b</li> <li>Release\u30da\u30fc\u30b8\u3092\u4f5c\u6210\u3059\u308b</li> </ul> <p>\u3053\u306e\u624b\u9806\u66f8\u3092\u53c2\u8003\u306b\u3057\u3066\u3001RDEToolKit\u306e\u958b\u767a\u30fb\u5909\u66f4\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u5171\u540c\u958b\u767a\u3092\u5186\u6ed1\u306b\u9032\u3081\u308b\u305f\u3081\u306e\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u3068\u3057\u3066\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"contribute/sourcecode_contributing/#issue","title":"Issue\u3092\u4f5c\u6210\u3059\u308b","text":"<p>\u554f\u984c\u3084\u4e0d\u5177\u5408\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u4ee5\u4e0b\u306eisuue\u3078\u8d77\u7968\u304a\u9858\u3044\u3057\u307e\u3059\u3002\u3053\u306e\u6642\u3001\u30e9\u30d9\u30eb\u306f<code>Type:improvement</code>, <code>Type: new feature</code>\u306e\u3069\u3061\u3089\u304b\u306e\u4ed8\u4e0e\u3092\u304a\u9858\u3044\u3057\u307e\u3059\u3002</p> <p>https://github.com/nims-dpfc/rdetoolkit/issues</p>"},{"location":"contribute/sourcecode_contributing/#_2","title":"\u30d6\u30e9\u30f3\u30c1\u306e\u4f5c\u6210","text":"<p>\u65b0\u3057\u3044\u6a5f\u80fd\u3084\u4fee\u6b63\u3092\u884c\u3046\u969b\u306f\u3001\u65b0\u3057\u3044\u30d6\u30e9\u30f3\u30c1\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <ul> <li>\u30d6\u30e9\u30f3\u30c1\u540d\u306e\u63a5\u982d\u8f9e\u306f\u3001<code>develop-v&lt;x.y.z&gt;</code>\u3068\u3044\u3046\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u3001\u672b\u5c3e\u306b\u4efb\u610f\u306e\u6587\u5b57\u5217\u3092\u8ffd\u52a0\u3057\u3066\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> </ul> <pre><code>git checkout -b develop-v&lt;x.y.z&gt;-&lt;\u4efb\u610f\u306e\u6a5f\u80fd\u540d\u306a\u3069&gt; origin/develop-v&lt;x.y.z&gt;\n</code></pre>"},{"location":"contribute/sourcecode_contributing/#_3","title":"\u65b0\u6a5f\u80fd\u30fb\u4fee\u6b63\u3092\u52a0\u3048\u308b","text":""},{"location":"contribute/sourcecode_contributing/#_4","title":"\u5fc5\u8981\u306a\u30c4\u30fc\u30eb","text":"<ul> <li><code>Python</code> (\u63a8\u5968\u30d0\u30fc\u30b8\u30e7\u30f3: 3.9\u4ee5\u4e0a)</li> <li>rye or Poetry(\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u7ba1\u7406\u30c4\u30fc\u30eb)</li> <li><code>git</code> (\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406)</li> </ul>"},{"location":"contribute/sourcecode_contributing/#_5","title":"\u30b3\u30fc\u30c9\u306e\u30b9\u30bf\u30a4\u30eb\u3068\u8981\u4ef6","text":""},{"location":"contribute/sourcecode_contributing/#pep8","title":"\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04(PEP8)\u306b\u3064\u3044\u3066","text":"<p>\u4e00\u8cab\u3057\u305f\u30b3\u30fc\u30c9\u30b9\u30bf\u30a4\u30eb\u306b\u5f93\u3046\u3053\u3068\u3067\u3001\u30b3\u30fc\u30c9\u3092\u3088\u308a\u6271\u3044\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u3001RDE\u306e\u69cb\u9020\u5316\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u958b\u767a\u3067\u306f\u3001PEP8(Python Enhance Proposal #8) \u306b\u5f93\u3063\u3066\u958b\u767a\u3092\u884c\u3046\u3002</p>"},{"location":"contribute/sourcecode_contributing/#_6","title":"\u57fa\u672c\u7684\u306b\u5f93\u3046\u898f\u7d04","text":"<p>\u5f15\u7528: PEP 8 \u2013 Style Guide for Python Code / Python Enhancement Proposals \u53c2\u8003: Python \u30b3\u30fc\u30c9\u306e\u30b9\u30bf\u30a4\u30eb\u30ac\u30a4\u30c9 - pep8-ja</p>"},{"location":"contribute/sourcecode_contributing/#_7","title":"\u7a7a\u767d","text":"<p>Python\u306f\u7a7a\u767d\u304c\u69cb\u6587\u4e0a\u610f\u5473\u3092\u6301\u3061\u307e\u3059\u3002Python\u4f7f\u3046\u5834\u5408\u3001\u7a7a\u767d\u306e\u52b9\u679c\u3068\u305d\u306e\u5f71\u97ff\u306b\u7279\u306b\u610f\u8b58\u3057\u3066\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u65b9\u304c\u3044\u3044\u3067\u3059\u3002</p> <ul> <li>\u30a4\u30f3\u30c7\u30f3\u30c8\u306b\u306f\u3001\u30bf\u30d6\u3067\u306f\u306a\u304f\u7a7a\u767d\u3092\u4f7f\u3046</li> <li>\u69cb\u6587\u4e0a\u610f\u5473\u3092\u6301\u3064\u30ec\u30d9\u30eb\u306e\u30a4\u30f3\u30c7\u30f3\u30c8\u306b\u306f\u30014\u500b\u306e\u7a7a\u767d\u3092\u4f7f\u3046</li> <li>\u5404\u884c\u306e\u9577\u3055\u304c~~79\u6587\u5b57\u304b\u305d\u308c\u4ee5\u4e0b\u3068\u3059\u308b~~ -&gt; \u4e0a\u9650\u306a\u3057\u3002</li> <li>\u9577\u3044\u5f0f\u3092\u7d9a\u3051\u308b\u305f\u3081\u306b\u306b\u6b21\u306e\u884c\u3092\u4f7f\u3046\u6642\u3001\u901a\u5e38\u306e\u30a4\u30f3\u30c7\u30f3\u30c8\u304b\u30894\u500b\u306e\u8ffd\u52a0\u7a7a\u767d\u3092\u4f7f\u3063\u3066\u30a4\u30f3\u30c7\u30f3\u30c8\u3059\u308b\u3002</li> <li>\u30d5\u30a1\u30a4\u30eb\u3067\u306f\u3001\u95a2\u6570\u3068\u30af\u30e9\u30b9\u306f\u3001\u7a7a\u767d2\u884c\u3067\u5206\u3051\u308b\u3002</li> <li>\u30af\u30e9\u30b9\u3067\u306f\u3001\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u7a7a\u767d\u884c\u3067\u5206\u3051\u308b\u3002</li> <li>\u8f9e\u66f8\u3067\u306f\u3001\u30ad\u30fc\u3068\u30b3\u30ed\u30f3(<code>:</code>)\u306e\u9593\u306b\u306f\u7a7a\u767d\u3092\u304a\u304b\u305a\u306b\u3001\u540c\u3058\u884c\u306b\u5024\u3092\u66f8\u304f\u5834\u5408\u306b\u306f\u5024\u306e\u524d\u306b\u7a7a\u767d\u30921\u3064\u7f6e\u304f\u3002</li> <li>\u5909\u6570\u4ee3\u5165\u306e\u524d\u5f8c\u306b\u306f\u3001\u7a7a\u767d\u30921\u3064\u3001\u5fc5\u305a1\u3064\u3060\u3051\u304a\u304f</li> <li>\u578b\u30d2\u30f3\u30c8(\u578b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3)\u3067\u306f\u3001\u5909\u6570\u540d\u306e\u76f4\u5f8c\u306b\u30b3\u30ed\u30f3\u3092\u304a\u304d\u3001\u578b\u60c5\u5831\u306e\u524d\u306b\u7a7a\u767d\u30921\u3064\u304a\u304f</li> </ul>"},{"location":"contribute/sourcecode_contributing/#_8","title":"\u540d\u524d\u4ed8\u3051","text":"<p>PEP8\u306f\u3001\u8a00\u8a9e\u306e\u7570\u306a\u308b\u7b87\u6240\u3054\u3068\u306b\u4ed6\u3068\u7570\u306a\u308b\u30b9\u30bf\u30a4\u30eb\u3092\u63a8\u5968\u3057\u3066\u3044\u307e\u3059\u3002</p> <ul> <li>\u95a2\u6570\u3001\u5909\u6570\u3001\u5c5e\u6027\u306f\u3001<code>lowercase_underscore</code>\u306e\u3088\u3046\u306b\u5c0f\u6587\u5b57\u3067\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u3092\u631f\u3080</li> <li>\u30d7\u30ed\u30c6\u30af\u30c6\u30c3\u30c9\u5c5e\u6027\u306f\u3001_leading_underscore\u306e\u3088\u3046\u306b\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u3092\u5148\u982d\u306b\u3064\u3051\u308b</li> <li>\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u5c5e\u6027\u306f\u3001__double_underscore\u306e\u3088\u3046\u306b\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u30922\u3064\u5148\u982d\u306b\u3064\u3051\u308b</li> <li>\u30af\u30e9\u30b9\u3068\u4f8b\u5916\u306f\u3001<code>CapitalizedWord</code>\u306e\u3088\u3046\u306b\u5148\u982d\u3092\u5927\u6587\u5b57\u306b\u3059\u308b</li> <li>\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u306e\u5b9a\u6570\u306f\u3001ALL_CAPS\u306e\u3088\u3046\u306b\u5168\u3066\u5927\u6587\u5b57\u3067\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u3067\u631f\u3080</li> <li>\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306f\u3001(\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53c2\u7167\u3059\u308b)\u7b2c\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u540d\u524d\u306b<code>self</code>\u3092\u4f7f\u3046\u3002</li> <li>\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u306f\u3001(\u30af\u30e9\u30b9\u3092\u53c2\u7167\u3059\u308b)\u7b2c\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u540d\u524d\u306b<code>cls</code>\u3092\u4f7f\u3046\u3002</li> </ul>"},{"location":"contribute/sourcecode_contributing/#_9","title":"\u5f0f\u3068\u6587","text":"<ul> <li>\u5f0f\u306e\u5426\u5b9a(<code>if not a is b</code>)\u3067\u306f\u306a\u304f\u3001\u5185\u5074\u306e\u9805\u306e\u5426\u5b9a(<code>if a is not b</code>)\u3092\u4f7f\u3046</li> <li>\u30b3\u30f3\u30c6\u30ca\u3084\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u9577\u3055(<code>if len(somelist) == 0</code>)\u3092\u4f7f\u3063\u3066\u3001\u7a7a\u5024(<code>[]</code>\u3084<code>''</code>\u306a\u3069)\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044\u3002<code>if not somelist</code>\u3092\u4f7f\u3063\u3066\u3001\u7a7a\u5024\u304c\u6697\u9ed9\u306b<code>False</code>\u3068\u8a55\u4fa1\u3055\u308c\u308b\u3053\u3068\u3092\u4f7f\u3046\u3002</li> <li>\u4e0a\u3068\u540c\u3058\u3053\u3068\u3092\u3001\u975e\u7a7a\u5024(<code>[1]</code>\u3084<code>hi</code>\u306a\u3069)\u306b\u3082\u4f7f\u3046\u3002\u975e\u7a7a\u5024\u306b\u3064\u3044\u3066\u3001<code>if somelist</code>\u306f\u3001\u6697\u9ed9\u7684\u306b<code>True</code>\u3068\u8a55\u4fa1\u3055\u308c\u308b\u3002</li> <li><code>if</code>, <code>for</code>, <code>while</code>\u30eb\u30fc\u30d7\u3001<code>except</code>\u8907\u5408\u6587\u30921\u884c\u3067\u66f8\u304b\u306a\u3044\u3002\u660e\u78ba\u306b\u306a\u308b\u3088\u3046\u306b\u8907\u6570\u884c\u306b\u3059\u308b\u3002</li> <li>\u5f0f\u304c1\u884c\u306b\u53ce\u307e\u3089\u306a\u3044\u5834\u5408\u306f\u3001\u62ec\u5f27\u3067\u62ec\u3063\u3066\u3001\u8907\u6570\u884c\u306b\u3057\u3066\u3001\u8aad\u307f\u3084\u3059\u3044\u3088\u3046\u306b\u30a4\u30f3\u30c7\u30f3\u30c8\u3059\u308b\u3002</li> <li><code>\\</code>\u3067\u884c\u308f\u3051\u3059\u308b\u3088\u308a\u306f\u3001\u62ec\u5f27\u3092\u4f7f\u3063\u3066\u8907\u6570\u306e\u5f0f\u3092\u56f2\u3080\u65b9\u304c\u826f\u3044\u3002</li> </ul>"},{"location":"contribute/sourcecode_contributing/#import","title":"import","text":"<ul> <li><code>import</code>\u6587\u306f\u3001(<code>from x import y</code>\u3082\u542b\u3081\u3066)\u5e38\u306b\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u7f6e\u304f\u3002</li> <li>\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3068\u304d\u306f\u3001\u5e38\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u7d76\u5bfe\u540d\u3092\u4f7f\u3044\u3001\u73fe\u30e2\u30b8\u30e5\u30fc\u30eb\u30d1\u30b9\u304b\u3089\u306e\u76f8\u5bfe\u540d\u3092\u4f7f\u308f\u306a\u3044\u3002\u4f8b\u3048\u3070\u3001\u30e2\u30b8\u30e5\u30fc\u30eb<code>foo</code>\u3092\u30d1\u30c3\u30b1\u30fc\u30b8<code>bar</code>\u304b\u3089\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u6642\u306f\u3001<code>import foo</code>\u3067\u306f\u306a\u304f\u3001<code>from bar import foo</code>\u3092\u4f7f\u3046\u3002</li> <li>\u76f8\u5bfe\u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u4f7f\u308f\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u6642\u306b\u306f\u3001\u660e\u793a\u7684\u306a\u69cb\u6587<code>from . import foo</code> \u3092\u4f7f\u3046\u3002</li> <li>\u30a4\u30f3\u30dd\u30fc\u30c8\u306f\u30011.\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u30e2\u30b8\u30e5\u30fc\u30eb\u30012.\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30e2\u30b8\u30e5\u30fc\u30eb\u30013.\u81ea\u5206\u306e\u4f5c\u6210\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u9806\u306b\u884c\u3046\u3002\u305d\u308c\u305e\u308c\u306e\u90e8\u5206\u3067\u306f\u3001\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b</li> </ul>"},{"location":"contribute/sourcecode_contributing/#rdetoolkit","title":"RDEToolKit\u3067\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u30fc\u30fb\u30ea\u30f3\u30bf\u30fc\u306b\u3064\u3044\u3066","text":"<p>RDEToolKit\u3067\u306f\u3001<code>Ruff</code>\u3068<code>mypy</code>\u3092\u4f7f\u7528\u3057\u3066\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3001\u30ea\u30f3\u30bf\u30fc\u3092\u52d5\u4f5c\u3055\u305b\u3066\u30b3\u30fc\u30c9\u54c1\u8cea\u3092\u4e00\u5b9a\u306b\u4fdd\u3064\u3053\u3068\u3092\u76ee\u6a19\u3068\u3057\u3066\u3044\u307e\u3059\u3002<code>Ruff</code>\u306f\u3001isort, black, flake8\u306e\u6a5f\u80fd\u306b\u5909\u308f\u308b\u30c4\u30fc\u30eb\u3067\u3059\u3002Rust\u3067\u958b\u767a\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001isort, black, flake8\u3067\u52d5\u4f5c\u3055\u305b\u308b\u3088\u308a\u6bb5\u9055\u3044\u306b\u9ad8\u901f\u3067\u3059\u3002\u307e\u305f\u3001<code>mypy</code>\u306f\u3001\u9759\u7684\u578b\u30c1\u30a7\u30c3\u30af\u30c4\u30fc\u30eb\u3067\u3059\u3002RDEToolKit\u306f\u578b\u306e\u8a73\u7d30\u306a\u5b9a\u7fa9\u3092\u5f37\u5236\u3059\u308b\u3053\u3068\u3067\u3001\u30b3\u30fc\u30c9\u306e\u53ef\u8aad\u6027\u3068\u4fdd\u5b88\u6027\u306e\u5411\u4e0a\u3092\u76ee\u7684\u3068\u3057\u3066\u3044\u307e\u3059\u3002</p> <ul> <li>Ruff: https://docs.astral.sh/ruff/</li> <li>mypy: https://mypy.readthedocs.io/en/stable/</li> </ul>"},{"location":"contribute/sourcecode_contributing/#_10","title":"\u30c6\u30b9\u30c8\u306e\u5b9f\u884c","text":"<p>\u5909\u66f4\u3092\u884c\u3063\u305f\u5f8c\u306f\u3001\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u3066\u6b63\u5e38\u306b\u52d5\u4f5c\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>tox\n</code></pre>"},{"location":"contribute/sourcecode_contributing/#_11","title":"\u30b3\u30df\u30c3\u30c8\u3068\u30d7\u30c3\u30b7\u30e5","text":"<p>\u5909\u66f4\u3092\u30b3\u30df\u30c3\u30c8\u3057\u3001\u30ea\u30e2\u30fc\u30c8\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30d7\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002</p> <pre><code>git add .\ngit commit -m \"#[issue\u756a\u53f7] [\u5909\u66f4\u5185\u5bb9\u306e\u7c21\u5358\u306a\u8aac\u660e]\"\ngit push origin develop-v&lt;x.y.z&gt;-&lt;\u5148\u307b\u3069\u3064\u3051\u305f\u540d\u79f0&gt;\n</code></pre> <p>\u3082\u3057\u3001pre-commit\u306e\u30c1\u30a7\u30c3\u30af\u3067\u30b3\u30df\u30c3\u30c8\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u5168\u3066\u306e\u30a8\u30e9\u30fc\u3092\u89e3\u6d88\u3057\u305f\u4e0a\u3067\u30b3\u30df\u30c3\u30c8\u3092\u304a\u9858\u3044\u3057\u307e\u3059\u3002</p>"},{"location":"contribute/sourcecode_contributing/#pull-request","title":"\u5909\u66f4\u30ea\u30af\u30a8\u30b9\u30c8 (Pull Request)","text":"<p> \u3053\u306e\u6642\u3001<code>main</code>\u30d6\u30e9\u30f3\u30c1\u306b\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u767a\u884c\u3057\u3066\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002</p> <p>\u5909\u66f4\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001GitHub\u7b49\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092\u4f7f\u7528\u3057\u3066\u5909\u66f4\u30ea\u30af\u30a8\u30b9\u30c8 (PR) \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u3053\u306e\u6642\u3001\u30ec\u30d3\u30e5\u30fc\u3092\u53d7\u3051\u3001\u5fc5\u305aCI\u30c6\u30b9\u30c8\u304c\u5168\u3066\u30d1\u30b9\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u3082\u3057\u3001CI\u4e0a\u306e\u30c6\u30b9\u30c8\u304c\u30d1\u30b9\u3057\u306a\u3044\u5834\u5408\u3001\u5168\u3066\u306e\u30a8\u30e9\u30fc\u3092\u89e3\u6d88\u3057\u305f\u4e0a\u3067\u3001\u30ec\u30d3\u30e5\u30fc\u306e\u4f9d\u983c\u3092\u767a\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"contribute/sourcecode_contributing/#_12","title":"\u30de\u30fc\u30b8","text":"<p>\u30ec\u30d3\u30e5\u30fc\u304c\u5b8c\u4e86\u3057\u3001\u554f\u984c\u304c\u306a\u3044\u3068\u5224\u65ad\u3055\u308c\u305f\u3089\u3001\u5bfe\u8c61\u30d6\u30e9\u30f3\u30c1\u306b\u30de\u30fc\u30b8\u3057\u307e\u3059\u3002</p> <p>\u307e\u305f\u3001\u5168\u3066\u306e\u958b\u767a\u304cfix\u3057\u305f\u3089\u3001main\u30d6\u30e9\u30f3\u30c1\u306b\u30de\u30fc\u30b8\u3057\u3066\u304f\u3060\u3055\u3044\u3002main\u30d6\u30e9\u30f3\u30c1\u306b\u30de\u30fc\u30b8\u5f8c\u3001\u30c7\u30d7\u30ed\u30a4\u304c\u6b63\u3057\u304f\u5b9f\u884c\u3067\u304d\u305f\u3089\u3001tag\u306e\u4f5c\u6210\u3068Release\u30da\u30fc\u30b8\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>Release\u30da\u30fc\u30b8: https://github.com/nims-dpfc/rdetoolkit/releases</p>"},{"location":"rdetoolkit/config/","title":"config","text":""},{"location":"rdetoolkit/config/#parse_config_file","title":"parse_config_file","text":"<p>Parse the configuration file and return a Config object.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the configuration file. If not provided, the function will attempt to find and parse the default configuration file.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Config</code> <code>Config</code> <p>The parsed configuration object.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the specified configuration file does not exist.</p> File Loading Priority <ol> <li>If <code>path</code> is provided and the file extension is \".toml\", the function will attempt to read the file as a TOML file.</li> <li>If <code>path</code> is provided and the file extension is \".yaml\" or \".yml\", the function will attempt to read the file as a YAML file.</li> <li>If <code>path</code> is not provided, the function will attempt to find and parse the default configuration file named \"pyproject.toml\" in the current working directory.</li> </ol> Accepted Config Files <ul> <li>\"rdeconfig.yaml\"</li> <li>\"rdeconfig.yml\"</li> <li>\"pyproject.toml\"</li> </ul> Note <ul> <li>If the specified configuration file does not exist or is not in the correct format, an empty Config object will be returned.</li> </ul> Example <p>parse_config_file(path=\"config.yaml\")</p> Source code in <code>src/rdetoolkit/config.py</code> <pre><code>def parse_config_file(*, path: str | None = None) -&gt; Config:\n    \"\"\"Parse the configuration file and return a Config object.\n\n    Args:\n        path (str, optional): The path to the configuration file. If not provided, the function will attempt to find and parse the default configuration file.\n\n    Returns:\n        Config: The parsed configuration object.\n\n    Raises:\n        FileNotFoundError: If the specified configuration file does not exist.\n\n    File Loading Priority:\n        1. If `path` is provided and the file extension is \".toml\", the function will attempt to read the file as a TOML file.\n        2. If `path` is provided and the file extension is \".yaml\" or \".yml\", the function will attempt to read the file as a YAML file.\n        3. If `path` is not provided, the function will attempt to find and parse the default configuration file named \"pyproject.toml\" in the current working directory.\n\n    Accepted Config Files:\n        - \"rdeconfig.yaml\"\n        - \"rdeconfig.yml\"\n        - \"pyproject.toml\"\n\n    Note:\n        - If the specified configuration file does not exist or is not in the correct format, an empty Config object will be returned.\n\n    Example:\n        parse_config_file(path=\"config.yaml\")\n\n    \"\"\"\n    config_data: dict[str, Any] = {\n        \"system\": SystemSettings().model_dump(),\n        \"multidata_tile\": MultiDataTileSettings().model_dump(),\n    }\n    if path is not None and Path(path).name not in CONFIG_FILES:\n        return Config(system=SystemSettings(), multidata_tile=MultiDataTileSettings())\n\n    if path is not None and is_toml(path):\n        config_data = __read_pyproject_toml(path)\n    elif path is not None and is_yaml(path):\n        with open(path, encoding=\"utf-8\") as f:\n            config_data = yaml.safe_load(f)\n    elif path is None:\n        project_path = Path.cwd()\n        pyproject_toml = project_path.joinpath(PYPROJECT_CONFIG_FILES[0])\n        config_data = __read_pyproject_toml(str(pyproject_toml))\n    else:\n        return Config(system=SystemSettings(), multidata_tile=MultiDataTileSettings())\n\n    if config_data is None:\n        return Config(system=SystemSettings(), multidata_tile=MultiDataTileSettings())\n\n    return Config(**config_data)\n</code></pre>"},{"location":"rdetoolkit/config/#find_config_files","title":"find_config_files","text":"<p>Find and return a list of configuration files in the given input directory.</p> <p>Parameters:</p> Name Type Description Default <code>target_dir_path</code> <code>RdeFsPath</code> <p>(RdeFsPath): An object containing the paths to the input directories.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of configuration file paths.</p> Source code in <code>src/rdetoolkit/config.py</code> <pre><code>def find_config_files(target_dir_path: RdeFsPath) -&gt; list[str]:\n    \"\"\"Find and return a list of configuration files in the given input directory.\n\n    Args:\n        target_dir_path: (RdeFsPath): An object containing the paths to the input directories.\n\n    Returns:\n        list[str]: A list of configuration file paths.\n\n    \"\"\"\n    files: list[str] = []\n    if isinstance(target_dir_path, Path):\n        target_dir_path = str(target_dir_path)\n    existing_files = os.listdir(target_dir_path)\n    if not existing_files:\n        return files\n    for config_file in CONFIG_FILES:\n        if config_file in existing_files:\n            files.append(os.path.join(target_dir_path, config_file))\n    return sorted(files, key=lambda x: (is_toml(x), is_yaml(x)))\n</code></pre>"},{"location":"rdetoolkit/config/#get_config","title":"get_config","text":"<p>Retrieves the configuration from the specified directory path.</p> <p>This function searches for configuration files in the specified directory. It parses each found configuration file until it finds a valid configuration, which it then returns. If no valid configuration is found in the directory, it searches for a pyproject.toml file, parses it, and returns its configuration if valid. If no valid configuration is found, it returns None.</p> <p>Parameters:</p> Name Type Description Default <code>target_dir_path</code> <code>RdeFsPath</code> <p>The path of the directory to search for configuration files.</p> required <p>Returns:</p> Type Description <code>Config | None</code> <p>Optional[Config]: The first valid configuration found, or None if no valid configuration is found.</p> Source code in <code>src/rdetoolkit/config.py</code> <pre><code>def get_config(target_dir_path: RdeFsPath) -&gt; Config | None:\n    \"\"\"Retrieves the configuration from the specified directory path.\n\n    This function searches for configuration files in the specified directory.\n    It parses each found configuration file until it finds a valid configuration,\n    which it then returns. If no valid configuration is found in the directory,\n    it searches for a pyproject.toml file, parses it, and returns its configuration\n    if valid. If no valid configuration is found, it returns None.\n\n    Args:\n        target_dir_path (RdeFsPath): The path of the directory to search for configuration files.\n\n    Returns:\n        Optional[Config]: The first valid configuration found, or None if no valid configuration is found.\n    \"\"\"\n    if isinstance(target_dir_path, str):\n        target_dir_path = Path(target_dir_path)\n    if not target_dir_path.exists():\n        return None\n    for cfg_file in find_config_files(target_dir_path):\n        try:\n            __config = parse_config_file(path=cfg_file)\n        except ValidationError as e:\n            emsg = f\"Invalid configuration file: {cfg_file}\"\n            raise ValueError(emsg) from e\n        if __config is not None:\n            return __config\n\n    pyproject_toml_path = get_pyproject_toml()\n    if pyproject_toml_path is not None:\n        try:\n            __config = parse_config_file(path=str(pyproject_toml_path))\n        except ValidationError as e:\n            emsg = f\"Invalid configuration file: {pyproject_toml_path}\"\n            raise ValueError(emsg) from e\n        if __config is not None:\n            return __config\n    return None\n</code></pre>"},{"location":"rdetoolkit/config/#load_config","title":"load_config","text":"<p>Loads the configuration for the RDE Toolkit.</p> <p>Parameters:</p> Name Type Description Default <code>tasksupport_path</code> <code>RdeFsPath</code> <p>The path to the tasksupport directory.</p> required <code>config</code> <code>Optional[Config]</code> <p>An optional existing configuration object.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Config</code> <code>Config</code> <p>The loaded configuration object.</p> Source code in <code>src/rdetoolkit/config.py</code> <pre><code>def load_config(tasksupport_path: RdeFsPath, *, config: Config | None = None) -&gt; Config:\n    \"\"\"Loads the configuration for the RDE Toolkit.\n\n    Args:\n        tasksupport_path (RdeFsPath): The path to the tasksupport directory.\n        config (Optional[Config]): An optional existing configuration object.\n\n    Returns:\n        Config: The loaded configuration object.\n\n    \"\"\"\n    __config: Config = Config()\n    if config is not None:\n        __config = config\n    else:\n        __rtn_config = get_config(tasksupport_path)\n        __config = Config() if __rtn_config is None else __rtn_config\n    return __config\n</code></pre>"},{"location":"rdetoolkit/config/#is_toml","title":"is_toml","text":"<p>Check if the given filename has a .toml extension.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The name of the file to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the filename has a .toml extension, False otherwise.</p> Source code in <code>src/rdetoolkit/config.py</code> <pre><code>def is_toml(filename: str) -&gt; bool:\n    \"\"\"Check if the given filename has a .toml extension.\n\n    Args:\n        filename (str): The name of the file to check.\n\n    Returns:\n        bool: True if the filename has a .toml extension, False otherwise.\n    \"\"\"\n    return filename.lower().endswith(\".toml\")\n</code></pre>"},{"location":"rdetoolkit/config/#is_yaml","title":"is_yaml","text":"<p>Check if the given filename has a YAML file extension.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The name of the file to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the filename has a YAML file extension, False otherwise.</p> Source code in <code>src/rdetoolkit/config.py</code> <pre><code>def is_yaml(filename: str) -&gt; bool:\n    \"\"\"Check if the given filename has a YAML file extension.\n\n    Args:\n        filename (str): The name of the file to check.\n\n    Returns:\n        bool: True if the filename has a YAML file extension, False otherwise.\n    \"\"\"\n    return filename.lower().endswith(\".yaml\") or filename.lower().endswith(\".yml\")\n</code></pre>"},{"location":"rdetoolkit/config/#get_pyproject_toml","title":"get_pyproject_toml","text":"<p>Get the pyproject.toml file.</p> <p>Returns:</p> Type Description <code>Path | None</code> <p>Optional[Path]: The path to the pyproject.toml file.</p> Source code in <code>src/rdetoolkit/config.py</code> <pre><code>def get_pyproject_toml() -&gt; Path | None:\n    \"\"\"Get the pyproject.toml file.\n\n    Returns:\n        Optional[Path]: The path to the pyproject.toml file.\n    \"\"\"\n    pyproject_toml_path = Path.cwd().joinpath(\"pyproject.toml\")\n    return pyproject_toml_path.exists() and pyproject_toml_path or None\n</code></pre>"},{"location":"rdetoolkit/errors/","title":"errors","text":""},{"location":"rdetoolkit/errors/#catch_exception_with_message","title":"catch_exception_with_message","text":"<p>A decorator that catches exceptions and re-raises a StructuredError with a customized message and error code.</p> <p>This decorator catches exceptions thrown within the decorated function. If a StructuredError is raised, it re-raises it with the specified error message, error code, and optional additional error object. For other exceptions, it re-raises them as standard Exceptions. The verbosity level of the error message can be controlled via the verbose parameter.</p> <p>Parameters:</p> Name Type Description Default <code>error_message</code> <code>Optional[str]</code> <p>Customized message to be used in case of an error. Defaults to None.</p> <code>None</code> <code>error_code</code> <code>Optional[int]</code> <p>Error code to be used in case of an error. Defaults to None.</p> <code>None</code> <code>eobj</code> <code>Optional[Any]</code> <p>Additional object to include in the error. Defaults to None.</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>If set to True, provides detailed error messages. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Callable</code> <code>Callable</code> <p>A function decorator that provides customized error handling on exception occurrence.</p> Source code in <code>src/rdetoolkit/errors.py</code> <pre><code>def catch_exception_with_message(\n    *,\n    error_message: str | None = None,\n    error_code: int | None = None,\n    eobj: Any | None = None,\n    verbose: bool = False,\n) -&gt; Callable:\n    \"\"\"A decorator that catches exceptions and re-raises a StructuredError with a customized message and error code.\n\n    This decorator catches exceptions thrown within the decorated function.\n    If a StructuredError is raised, it re-raises it with the specified error message, error code, and optional additional error object.\n    For other exceptions, it re-raises them as standard Exceptions. The verbosity level of the error message can be controlled via the verbose parameter.\n\n    Args:\n        error_message (Optional[str]): Customized message to be used in case of an error. Defaults to None.\n        error_code (Optional[int]): Error code to be used in case of an error. Defaults to None.\n        eobj (Optional[Any]): Additional object to include in the error. Defaults to None.\n        verbose (bool): If set to True, provides detailed error messages. Defaults to False.\n\n    Returns:\n        Callable: A function decorator that provides customized error handling on exception occurrence.\n    \"\"\"\n\n    def decorator(func: Callable) -&gt; Callable:\n        @wraps(func)\n        def wrapper(*args, **kwargs) -&gt; None:\n            try:\n                return func(*args, **kwargs)\n            except Exception as e:\n                _emsg = e.emsg if hasattr(e, \"emsg\") else error_message\n                _ecode = e.ecode if hasattr(e, \"ecode\") else error_code\n                _eobj = e.eobj if hasattr(e, \"eobj\") else eobj\n                raise handle_exception(e, error_message=_emsg, error_code=_ecode, eobj=_eobj, verbose=verbose) from e\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"rdetoolkit/errors/#format_simplified_traceback","title":"format_simplified_traceback","text":"<p>Formats a simplified version of the traceback information.</p> <p>This function takes a list of traceback frame summaries and constructs a formatted string representing the call stack. The formatted string includes indentation and node characters to indicate the call path, highlighting the file, line number, and function name. The final line of the traceback is marked with a fire emoji.</p> <p>Parameters:</p> Name Type Description Default <code>tb_list</code> <code>list[FrameSummary]</code> <p>A list of traceback frame summaries to format.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A formatted string representing the simplified traceback information.</p> Source code in <code>src/rdetoolkit/errors.py</code> <pre><code>def format_simplified_traceback(tb_list: list[traceback.FrameSummary]) -&gt; str:\n    \"\"\"Formats a simplified version of the traceback information.\n\n    This function takes a list of traceback frame summaries and constructs a formatted string representing the call stack.\n    The formatted string includes indentation and node characters to indicate the call path,\n    highlighting the file, line number, and function name. The final line of the traceback is marked with a fire emoji.\n\n    Args:\n        tb_list (list[traceback.FrameSummary]): A list of traceback frame summaries to format.\n\n    Returns:\n        str: A formatted string representing the simplified traceback information.\n    \"\"\"\n    formatted_traceback = \"\"\n    indent = \"  \"\n    node_char = \"\u2514\u2500\"\n    last_index = len(tb_list) - 1\n    fire_mark = \"\\U0001F525\"\n    for index, tb in enumerate(tb_list):\n        prefix = (indent * 2 * index) + node_char if index != 0 else indent\n        formatted_traceback += f\"{prefix} File: {tb.filename}, Line: {tb.lineno} in {tb.name}()\\n\"\n\n        if index == last_index:\n            final_prefix = (indent * 2 * (index + 1)) + node_char\n            formatted_traceback += f\"{final_prefix}&gt; L{tb.lineno}: {tb.line} {fire_mark}\"\n\n    return formatted_traceback\n</code></pre>"},{"location":"rdetoolkit/errors/#handle_exception","title":"handle_exception","text":"<p>Handles exceptions and formats them into a StructuredError with optional custom message, error code, and additional object.</p> <p>This function captures the exception type and traceback, then formats a simplified version of the traceback. It constructs a custom error message, optionally including the full original traceback if verbose mode is enabled. The function returns a StructuredError containing the error message, error code, optional additional object, and simplified traceback information.</p> <p>Parameters:</p> Name Type Description Default <code>e</code> <code>Exception</code> <p>The exception to handle.</p> required <code>error_message</code> <code>Optional[str]</code> <p>Customized message to be used in case of an error. Defaults to the exception message.</p> <code>None</code> <code>error_code</code> <code>Optional[int]</code> <p>Error code to be used in case of an error. Defaults to 1.</p> <code>None</code> <code>eobj</code> <code>Optional[Any]</code> <p>Additional object to include in the error. Defaults to None.</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>If set to True, includes the original traceback in the error message. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>StructuredError</code> <code>StructuredError</code> <p>A structured error object containing the error message, error code, additional object,</p> <code>StructuredError</code> <p>and simplified traceback information.</p> Source code in <code>src/rdetoolkit/errors.py</code> <pre><code>def handle_exception(\n    e: Exception,\n    error_message: str | None = None,\n    error_code: int | None = None,\n    eobj: Any | None = None,\n    verbose: bool = False,\n) -&gt; StructuredError:\n    \"\"\"Handles exceptions and formats them into a StructuredError with optional custom message, error code, and additional object.\n\n    This function captures the exception type and traceback, then formats a simplified version of the traceback.\n    It constructs a custom error message, optionally including the full original traceback if verbose mode is enabled.\n    The function returns a StructuredError containing the error message, error code, optional additional object,\n    and simplified traceback information.\n\n    Args:\n        e (Exception): The exception to handle.\n        error_message (Optional[str]): Customized message to be used in case of an error. Defaults to the exception message.\n        error_code (Optional[int]): Error code to be used in case of an error. Defaults to 1.\n        eobj (Optional[Any]): Additional object to include in the error. Defaults to None.\n        verbose (bool): If set to True, includes the original traceback in the error message. Defaults to False.\n\n    Returns:\n        StructuredError: A structured error object containing the error message, error code, additional object,\n        and simplified traceback information.\n    \"\"\"\n    _message = f\"Error: {error_message}\" if error_message else f\"Error: {str(e)}\"\n    _code = error_code if error_code else 1\n\n    exc_type, _, exc_traceback = sys.exc_info()\n    exc_type_name = exc_type.__name__ if exc_type else \"UnknownException\"\n    tb_list = traceback.extract_tb(exc_traceback)\n\n    simplifed_traceback: str = format_simplified_traceback(tb_list)\n    error_messages = (\n        \"\\nTraceback (simplified message):\\n\",\n        f\"Call Path:\\n{simplifed_traceback}\\n\",\n        f\"\\nException Type: {exc_type_name}\\n\",\n        _message,\n    )\n\n    if verbose:\n        original_traceback = traceback.format_exc()\n        error_msg = f\"{original_traceback}\\n\\n{'=' * 60}\\nCustom Traceback (simplified and more readable):\\n{'=' * 60}\\n\"\n        sys.stderr.write(error_msg)\n\n    return StructuredError(emsg=_message, ecode=_code, eobj=eobj, traceback_info=\"\".join(error_messages))\n</code></pre>"},{"location":"rdetoolkit/errors/#handle_and_exit_on_structured_error","title":"handle_and_exit_on_structured_error","text":"<p>Catch StructuredError and write to log file.</p> <p>Parameters:</p> Name Type Description Default <code>e</code> <code>StructuredError</code> <p>StructuredError instance</p> required <code>logger</code> <code>Logger</code> <p>Logger instance</p> required Source code in <code>src/rdetoolkit/errors.py</code> <pre><code>def handle_and_exit_on_structured_error(e: StructuredError, logger: logging.Logger) -&gt; None:\n    \"\"\"Catch StructuredError and write to log file.\n\n    Args:\n        e (StructuredError): StructuredError instance\n        logger (logging.Logger): Logger instance\n    \"\"\"\n    sys.stderr.write((e.traceback_info or \"\") + \"\\n\")\n    write_job_errorlog_file(e.ecode, e.emsg)\n    logger.exception(e.emsg)\n    sys.exit(1)\n</code></pre>"},{"location":"rdetoolkit/errors/#handle_generic_error","title":"handle_generic_error","text":"<p>Catch generic error and write to log file.</p> <p>Parameters:</p> Name Type Description Default <code>e</code> <code>Exception</code> <p>Exception instance</p> required <code>logger</code> <code>Logger</code> <p>Logger instance</p> required Source code in <code>src/rdetoolkit/errors.py</code> <pre><code>def handle_generic_error(e: Exception, logger: logging.Logger) -&gt; None:\n    \"\"\"Catch generic error and write to log file.\n\n    Args:\n        e (Exception): Exception instance\n        logger (logging.Logger): Logger instance\n    \"\"\"\n    structured_error = handle_exception(e, verbose=True)\n    sys.stderr.write((structured_error.traceback_info or \"\") + \"\\n\")\n    write_job_errorlog_file(999, \"Error: Please check the logs and code, then try again.\")\n    logger.exception(str(e))\n    sys.exit(1)\n</code></pre>"},{"location":"rdetoolkit/errors/#write_job_errorlog_file","title":"write_job_errorlog_file","text":"<p>Write the error log to a file.</p> <p>This function writes the given error code and message to a specified file. The file will be saved in a directory determined by <code>StorageDir.get_datadir(False)</code>.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>int</code> <p>The error code to be written to the log file.</p> required <code>message</code> <code>str</code> <p>The error message to be written to the log file.</p> required <code>filename</code> <code>str</code> <p>The name of the file to which the error log will be written. Defaults to \"job.failed\".</p> <code>'job.failed'</code> Example <pre><code>write_job_errorlog_file(404, 'Not Found', filename='error.log')\n</code></pre> Source code in <code>src/rdetoolkit/errors.py</code> <pre><code>def write_job_errorlog_file(code: int, message: str, *, filename: str = \"job.failed\") -&gt; None:\n    \"\"\"Write the error log to a file.\n\n    This function writes the given error code and message to a specified file.\n    The file will be saved in a directory determined by `StorageDir.get_datadir(False)`.\n\n    Args:\n        code (int): The error code to be written to the log file.\n        message (str): The error message to be written to the log file.\n        filename (str, optional): The name of the file to which the error log will be written.\n            Defaults to \"job.failed\".\n\n    Example:\n        ```python\n        write_job_errorlog_file(404, 'Not Found', filename='error.log')\n        ```\n    \"\"\"\n    with open(\n        os.path.join(StorageDir.get_datadir(False), filename),\n        \"w\",\n        encoding=\"utf_8\",\n    ) as f:\n        f.write(f\"ErrorCode={code}\\n\")\n        f.write(f\"ErrorMessage={message}\\n\")\n</code></pre>"},{"location":"rdetoolkit/exceptions/","title":"exceptions","text":""},{"location":"rdetoolkit/exceptions/#structurederror","title":"StructuredError","text":"<p>               Bases: <code>Exception</code></p> <p>A custom exception class providing structured error information.</p> <p>This class extends the standard Exception class to include additional information such as an error message, an error code, an error object, and traceback information. This allows for a more detailed representation of errors.</p> <p>Parameters:</p> Name Type Description Default <code>emsg</code> <code>str</code> <p>The error message.</p> <code>''</code> <code>ecode</code> <code>int</code> <p>The error code. Defaults to 1.</p> <code>1</code> <code>eobj</code> <code>any</code> <p>An additional error object. This can be an object of any type to provide more context to the error.</p> <code>None</code> <code>traceback_info</code> <code>str</code> <p>Additional traceback information. Defaults to None.</p> <code>None</code> Source code in <code>src/rdetoolkit/exceptions.py</code> <pre><code>class StructuredError(Exception):\n    \"\"\"A custom exception class providing structured error information.\n\n    This class extends the standard Exception class to include additional information\n    such as an error message, an error code, an error object, and traceback information.\n    This allows for a more detailed representation of errors.\n\n    Args:\n        emsg (str): The error message.\n        ecode (int): The error code. Defaults to 1.\n        eobj (any): An additional error object. This can be an object of any type to provide more context to the error.\n        traceback_info (str, optional): Additional traceback information. Defaults to None.\n    \"\"\"\n\n    def __init__(self, emsg: str = \"\", ecode: int = 1, eobj: Any | None = None, traceback_info: str | None = None) -&gt; None:\n        super().__init__(emsg)\n        self.emsg = emsg\n        self.ecode = ecode\n        self.eobj = eobj\n        self.traceback_info = traceback_info\n</code></pre>"},{"location":"rdetoolkit/exceptions/#invoicemodeerror","title":"InvoiceModeError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors related to invoice mode.</p> <p>Attributes:</p> Name Type Description <code>emsg</code> <code>str</code> <p>Error message describing the exception.</p> <code>ecode</code> <code>int</code> <p>Error code associated with the exception. Default is 100.</p> <code>eobj</code> <code>Any | None</code> <p>Optional object related to the exception. Default is None.</p> <code>traceback_info</code> <code>str | None</code> <p>Optional traceback information. Default is None.</p> <p>Parameters:</p> Name Type Description Default <code>emsg</code> <code>str</code> <p>Error message describing the exception.</p> <code>''</code> <code>ecode</code> <code>int</code> <p>Error code associated with the exception. Default is 100.</p> <code>100</code> <code>eobj</code> <code>Any | None</code> <p>Optional object related to the exception. Default is None.</p> <code>None</code> <code>traceback_info</code> <code>str | None</code> <p>Optional traceback information. Default is None.</p> <code>None</code> Source code in <code>src/rdetoolkit/exceptions.py</code> <pre><code>class InvoiceModeError(Exception):\n    \"\"\"Exception raised for errors related to invoice mode.\n\n    Attributes:\n        emsg (str): Error message describing the exception.\n        ecode (int): Error code associated with the exception. Default is 100.\n        eobj (Any | None): Optional object related to the exception. Default is None.\n        traceback_info (str | None): Optional traceback information. Default is None.\n\n    Args:\n        emsg (str): Error message describing the exception.\n        ecode (int): Error code associated with the exception. Default is 100.\n        eobj (Any | None): Optional object related to the exception. Default is None.\n        traceback_info (str | None): Optional traceback information. Default is None.\n    \"\"\"\n    def __init__(self, emsg: str = \"\", ecode: int = 100, eobj: Any | None = None, traceback_info: str | None = None) -&gt; None:\n        emsg = f\"InvoiceMode Error: {emsg}\" if emsg else \"InvoiceMode Error\"\n        super().__init__(emsg)\n        self.emsg = emsg\n        self.ecode = ecode\n        self.eobj = eobj\n        self.traceback_info = traceback_info\n</code></pre>"},{"location":"rdetoolkit/exceptions/#excelinvoicemodeerror","title":"ExcelInvoiceModeError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors related to Excelinvoice mode.</p> <p>Attributes:</p> Name Type Description <code>emsg</code> <code>str</code> <p>Error message describing the exception.</p> <code>ecode</code> <code>int</code> <p>Error code associated with the exception. Default is 101.</p> <code>eobj</code> <code>Any | None</code> <p>Optional object related to the exception. Default is None.</p> <code>traceback_info</code> <code>str | None</code> <p>Optional traceback information. Default is None.</p> <p>Parameters:</p> Name Type Description Default <code>emsg</code> <code>str</code> <p>Error message describing the exception.</p> <code>''</code> <code>ecode</code> <code>int</code> <p>Error code associated with the exception. Default is 102.</p> <code>101</code> <code>eobj</code> <code>Any | None</code> <p>Optional object related to the exception. Default is None.</p> <code>None</code> <code>traceback_info</code> <code>str | None</code> <p>Optional traceback information. Default is None.</p> <code>None</code> Source code in <code>src/rdetoolkit/exceptions.py</code> <pre><code>class ExcelInvoiceModeError(Exception):\n    \"\"\"Exception raised for errors related to Excelinvoice mode.\n\n    Attributes:\n        emsg (str): Error message describing the exception.\n        ecode (int): Error code associated with the exception. Default is 101.\n        eobj (Any | None): Optional object related to the exception. Default is None.\n        traceback_info (str | None): Optional traceback information. Default is None.\n\n    Args:\n        emsg (str): Error message describing the exception.\n        ecode (int): Error code associated with the exception. Default is 102.\n        eobj (Any | None): Optional object related to the exception. Default is None.\n        traceback_info (str | None): Optional traceback information. Default is None.\n    \"\"\"\n    def __init__(self, emsg: str = \"\", ecode: int = 101, eobj: Any | None = None, traceback_info: str | None = None) -&gt; None:\n        emsg = f\"ExcelInvoiceMode Error: {emsg}\" if emsg else \"ExcelInvoiceMode Error\"\n        super().__init__(emsg)\n        self.emsg = emsg\n        self.ecode = ecode\n        self.eobj = eobj\n        self.traceback_info = traceback_info\n</code></pre>"},{"location":"rdetoolkit/exceptions/#multidatatilemodeerror","title":"MultiDataTileModeError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in MultiData tile mode operations.</p> <p>Attributes:</p> Name Type Description <code>emsg</code> <code>str</code> <p>Error message describing the exception.</p> <code>ecode</code> <code>int</code> <p>Error code associated with the exception. Default is 102.</p> <code>eobj</code> <code>Any | None</code> <p>Optional object related to the error. Default is None.</p> <code>traceback_info</code> <code>str | None</code> <p>Optional traceback information. Default is None.</p> <p>Parameters:</p> Name Type Description Default <code>emsg</code> <code>str</code> <p>Error message describing the exception.</p> <code>''</code> <code>ecode</code> <code>int</code> <p>Error code associated with the exception. Default is 101.</p> <code>102</code> <code>eobj</code> <code>Any | None</code> <p>Optional object related to the error. Default is None.</p> <code>None</code> <code>traceback_info</code> <code>str | None</code> <p>Optional traceback information. Default is None.</p> <code>None</code> Source code in <code>src/rdetoolkit/exceptions.py</code> <pre><code>class MultiDataTileModeError(Exception):\n    \"\"\"Exception raised for errors in MultiData tile mode operations.\n\n    Attributes:\n        emsg (str): Error message describing the exception.\n        ecode (int): Error code associated with the exception. Default is 102.\n        eobj (Any | None): Optional object related to the error. Default is None.\n        traceback_info (str | None): Optional traceback information. Default is None.\n\n    Args:\n        emsg (str): Error message describing the exception.\n        ecode (int): Error code associated with the exception. Default is 101.\n        eobj (Any | None): Optional object related to the error. Default is None.\n        traceback_info (str | None): Optional traceback information. Default is None.\n    \"\"\"\n\n    def __init__(self, emsg: str = \"\", ecode: int = 102, eobj: Any | None = None, traceback_info: str | None = None) -&gt; None:\n        emsg = f\"MultiDataTileMode Error: {emsg}\" if emsg else \"MultiDataTileMode Error\"\n        super().__init__(emsg)\n        self.emsg = emsg\n        self.ecode = ecode\n        self.eobj = eobj\n        self.traceback_info = traceback_info\n</code></pre>"},{"location":"rdetoolkit/exceptions/#rdeformatmodeerror","title":"RdeFormatModeError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in the RDE format mode.</p> <p>Attributes:</p> Name Type Description <code>emsg</code> <code>str</code> <p>Error message describing the exception.</p> <code>ecode</code> <code>int</code> <p>Error code associated with the exception. Default is 103.</p> <code>eobj</code> <code>Any | None</code> <p>Optional object related to the error. Default is None.</p> <code>traceback_info</code> <code>str | None</code> <p>Optional traceback information. Default is None.</p> <p>Parameters:</p> Name Type Description Default <code>emsg</code> <code>str</code> <p>Error message describing the exception.</p> <code>''</code> <code>ecode</code> <code>int</code> <p>Error code associated with the exception. Default is 103.</p> <code>103</code> <code>eobj</code> <code>Any | None</code> <p>Optional object related to the error. Default is None.</p> <code>None</code> <code>traceback_info</code> <code>str | None</code> <p>Optional traceback information. Default is None.</p> <code>None</code> Source code in <code>src/rdetoolkit/exceptions.py</code> <pre><code>class RdeFormatModeError(Exception):\n    \"\"\"Exception raised for errors in the RDE format mode.\n\n    Attributes:\n        emsg (str): Error message describing the exception.\n        ecode (int): Error code associated with the exception. Default is 103.\n        eobj (Any | None): Optional object related to the error. Default is None.\n        traceback_info (str | None): Optional traceback information. Default is None.\n\n    Args:\n        emsg (str): Error message describing the exception.\n        ecode (int): Error code associated with the exception. Default is 103.\n        eobj (Any | None): Optional object related to the error. Default is None.\n        traceback_info (str | None): Optional traceback information. Default is None.\n    \"\"\"\n    def __init__(self, emsg: str = \"\", ecode: int = 103, eobj: Any | None = None, traceback_info: str | None = None) -&gt; None:\n        emsg = f\"RdeFormatMode Error: {emsg}\" if emsg else \"RdeFormatMode Error\"\n        super().__init__(emsg)\n        self.emsg = emsg\n        self.ecode = ecode\n        self.eobj = eobj\n        self.traceback_info = traceback_info\n</code></pre>"},{"location":"rdetoolkit/exceptions/#invoiceschemavalidationerror","title":"InvoiceSchemaValidationError","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when a validation error occurs.</p> Source code in <code>src/rdetoolkit/exceptions.py</code> <pre><code>class InvoiceSchemaValidationError(Exception):\n    \"\"\"Raised when a validation error occurs.\"\"\"\n\n    def __init__(self, message: str = \"Validation error\") -&gt; None:\n        self.message = message\n        super().__init__(self.message)\n</code></pre>"},{"location":"rdetoolkit/exceptions/#metadatavalidationerror","title":"MetadataValidationError","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when a validation error occurs.</p> Source code in <code>src/rdetoolkit/exceptions.py</code> <pre><code>class MetadataValidationError(Exception):\n    \"\"\"Raised when a validation error occurs.\"\"\"\n\n    def __init__(self, message: str = \"Validation error\") -&gt; None:\n        self.message = message\n        super().__init__(self.message)\n</code></pre>"},{"location":"rdetoolkit/img2thumb/","title":"img2thumb","text":"<p>In img2thumb, processes related to representative images (thumbnail images) are defined.</p>"},{"location":"rdetoolkit/img2thumb/#copy_images_to_thumbnail","title":"copy_images_to_thumbnail","text":"<p>Copy the image files in the other image folder and the main image folder to the thumbnail folder.</p> <p>Parameters:</p> Name Type Description Default <code>out_dir_thumb_img</code> <code>str</code> <p>directory path where thumbnail image is saved</p> required <code>out_dir_main_img</code> <code>str</code> <p>directory path where main image is saved</p> required <code>target_image_name</code> <code>str</code> <p>Specify the name of the image file to be copied to the thumbnail folder.</p> <code>None</code> <code>img_ext</code> <code>str</code> <p>image file extension.</p> <code>None</code> Source code in <code>src/rdetoolkit/img2thumb.py</code> <pre><code>@catch_exception_with_message(error_message=\"ERROR: failed to copy image files\", error_code=50)\ndef copy_images_to_thumbnail(\n    out_dir_thumb_img: str | Path,\n    out_dir_main_img: str | Path,\n    *,\n    target_image_name: str | None = None,\n    img_ext: str | None = None,\n) -&gt; None:\n    \"\"\"Copy the image files in the other image folder and the main image folder to the thumbnail folder.\n\n    Args:\n        out_dir_thumb_img (str): directory path where thumbnail image is saved\n        out_dir_main_img (str): directory path where main image is saved\n        target_image_name (str, optional): Specify the name of the image file to be copied to the thumbnail folder.\n        img_ext (str, optional): image file extension.\n    \"\"\"\n    img_exts = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\", \".svg\", \".webp\"] if img_ext is None else [img_ext]\n\n    img_paths_main = [glob(os.path.join(out_dir_main_img, \"*\" + ext)) for ext in img_exts]\n    img_path_main = list(itertools.chain.from_iterable(img_paths_main))\n\n    # When there are multiple images in the main image folder, copy one at the leading index as the representative image.\n    __main_img_path: str = \"\"\n    if target_image_name is not None:\n        __main_img_path = __find_img_path(str(out_dir_main_img), target_image_name)\n    elif len(img_path_main) &gt;= 1:\n        __main_img_path = img_path_main[0]\n\n    if __main_img_path:\n        __copy_img_to_thumb(str(out_dir_thumb_img), __main_img_path)\n</code></pre>"},{"location":"rdetoolkit/img2thumb/#resize_image","title":"resize_image","text":"<p>Resize an image to the specified width and height while maintaining its aspect ratio.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the image file.</p> required <code>width</code> <code>int</code> <p>The target width of the resized image. Defaults to 640.</p> <code>640</code> <code>height</code> <code>int</code> <p>The target height of the resized image. Defaults to 480.</p> <code>480</code> <code>output_path</code> <code>str | Path | None</code> <p>The path where the resized image will be saved. If None, the original image will be overwritten.</p> <code>None</code> <p>Raises:</p> Type Description <code>StructuredError</code> <p>If the width or height is less than or equal to 0.</p> <p>Returns:</p> Name Type Description <code>NoReturn</code> <code>str</code> <p>This function does not return a value.</p> Source code in <code>src/rdetoolkit/img2thumb.py</code> <pre><code>def resize_image(path: str | Path, width: int = 640, height: int = 480, output_path: str | Path | None = None) -&gt; str:\n    \"\"\"Resize an image to the specified width and height while maintaining its aspect ratio.\n\n    Args:\n        path (str | Path): The path to the image file.\n        width (int, optional): The target width of the resized image. Defaults to 640.\n        height (int, optional): The target height of the resized image. Defaults to 480.\n        output_path (str | Path | None, optional): The path where the resized image will be saved. If None, the original image will be overwritten.\n\n    Raises:\n        StructuredError: If the width or height is less than or equal to 0.\n\n    Returns:\n        NoReturn: This function does not return a value.\n\n    \"\"\"\n    if width &lt;= 0 or height &lt;= 0:\n        msg = \"Width and height must be greater than 0.\"\n        raise StructuredError(msg)\n\n    image_path = str(path) if isinstance(path, Path) else path\n    if output_path is None:\n        _output_path = image_path\n    elif isinstance(output_path, Path):\n        _output_path = str(output_path)\n    else:\n        _output_path = output_path\n\n    try:\n        resize_image_aspect_ratio(image_path, _output_path, width, height)\n    except Exception as e:\n        msg = f\"Failed to resize image: {e}\"\n        raise StructuredError(msg) from e\n\n    return _output_path\n</code></pre>"},{"location":"rdetoolkit/invoicefile/","title":"invoicefile","text":"<p>In <code>invoicefile.py</code>, processes for handling invoices are defined.</p>"},{"location":"rdetoolkit/invoicefile/#read_excelinvoice","title":"read_excelinvoice","text":"<p>Reads an ExcelInvoice and processes each sheet into a dataframe.</p> <p>This function reads an ExcelInvoice file and processes various sheets within the file, specifically looking for sheets named <code>invoiceList_format_id</code>,<code>generalTerm</code>, and <code>specificTerm</code>.</p> <p>These sheets are converted into pandas dataframes and returned as output.</p> <p>Parameters:</p> Name Type Description Default <code>excelinvoice_filepath</code> <code>str</code> <p>The file path of the Excel invoice file.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple[DataFrame, DataFrame, DataFrame]</code> <p>A tuple containing dataframes for the invoice list, general terms, and specific terms.If any of these sheets are missing or if there are multiple invoice list sheets, a StructuredError is raised.</p> <p>Raises:</p> Type Description <code>StructuredError</code> <p>If there are multiple sheets with <code>invoiceList_format_id</code> in the ExcelInvoice, or if no sheets are present in the ExcelInvoice.</p> Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def read_excelinvoice(excelinvoice_filepath: RdeFsPath) -&gt; tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:\n    \"\"\"Reads an ExcelInvoice and processes each sheet into a dataframe.\n\n    This function reads an ExcelInvoice file and processes various sheets within the file, specifically looking for sheets named `invoiceList_format_id`,`generalTerm`, and `specificTerm`.\n\n    These sheets are converted into pandas dataframes and returned as output.\n\n    Args:\n        excelinvoice_filepath (str): The file path of the Excel invoice file.\n\n    Returns:\n        tuple: A tuple containing dataframes for the invoice list, general terms, and specific terms.If any of these sheets are missing or if there are multiple invoice list sheets, a StructuredError is raised.\n\n    Raises:\n        StructuredError: If there are multiple sheets with `invoiceList_format_id` in the ExcelInvoice, or if no sheets are present in the ExcelInvoice.\n    \"\"\"\n    dct_sheets = pd.read_excel(excelinvoice_filepath, sheet_name=None, dtype=str, header=None, index_col=None)\n    dfexcelinvoice = None\n    df_general = None\n    df_specific = None\n    for sh_name, df in dct_sheets.items():\n        if df.empty:\n            continue\n        if df.iat[0, 0] == \"invoiceList_format_id\":\n            if dfexcelinvoice is not None:\n                emsg = \"ERROR: multiple sheet in invoiceList files\"\n                raise StructuredError(emsg)\n            ExcelInvoiceFile.check_intermittent_empty_rows(df)\n            dfexcelinvoice = __process_invoice_sheet(df)\n        elif sh_name == \"generalTerm\":\n            df_general = __process_general_term_sheet(df)\n        elif sh_name == \"specificTerm\":\n            df_specific = __process_specific_term_sheet(df)\n\n    if dfexcelinvoice is None:\n        emsg = \"ERROR: no sheet in invoiceList files\"\n        raise StructuredError(emsg)\n    return dfexcelinvoice, df_general, df_specific\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#check_exist_rawfiles","title":"check_exist_rawfiles","text":"<p>Checks for the existence of raw file paths listed in a DataFrame against a list of file Paths.</p> <p>This function compares a set of file names extracted from the <code>data_file_names/name</code> column of the provided DataFrame (dfexcelinvoice) with the names of files in the excel_rawfiles list. If there are file names in the DataFrame that are not present in the excel_rawfiles list, it raises a StructuredError with a message indicating the missing file. If all file names in the DataFrame are present in the excel_rawfiles list, it returns a list of Path objects from excel_rawfiles, sorted in the order they appear in the DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>dfexcelinvoice</code> <code>DataFrame</code> <p>A DataFrame containing file names in the 'data_file_names/name' column.</p> required <code>excel_rawfiles</code> <code>list[Path]</code> <p>A list of Path objects representing file paths.</p> required <p>Raises:</p> Type Description <code>tructuredError</code> <p>If any file name in dfexcelinvoice is not found in excel_rawfiles.</p> <p>Returns:</p> Type Description <code>list[Path]</code> <p>list[Path]: A list of Path objects corresponding to the file names in dfexcelinvoice, ordered as they appear in the DataFrame.</p> Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def check_exist_rawfiles(dfexcelinvoice: pd.DataFrame, excel_rawfiles: list[Path]) -&gt; list[Path]:\n    \"\"\"Checks for the existence of raw file paths listed in a DataFrame against a list of file Paths.\n\n    This function compares a set of file names extracted from the `data_file_names/name` column of the provided DataFrame (dfexcelinvoice) with the names of files in the excel_rawfiles list.\n    If there are file names in the DataFrame that are not present in the excel_rawfiles list, it raises a StructuredError with a message indicating the missing file.\n    If all file names in the DataFrame are present in the excel_rawfiles list, it returns a list of Path objects from excel_rawfiles, sorted in the order they appear in the DataFrame.\n\n    Args:\n        dfexcelinvoice (pd.DataFrame): A DataFrame containing file names in the 'data_file_names/name' column.\n        excel_rawfiles (list[Path]): A list of Path objects representing file paths.\n\n    Raises:\n        tructuredError: If any file name in dfexcelinvoice is not found in excel_rawfiles.\n\n    Returns:\n        list[Path]: A list of Path objects corresponding to the file names in dfexcelinvoice, ordered as they appear in the DataFrame.\n    \"\"\"\n    file_set_group = {f.name for f in excel_rawfiles}\n    file_set_invoice = set(dfexcelinvoice[\"data_file_names/name\"])\n    if file_set_invoice - file_set_group:\n        emsg = f\"ERROR: raw file not found: {(file_set_invoice-file_set_group).pop()}\"\n        raise StructuredError(emsg)\n    # excel_rawfiles\u3092\u3001\u30a4\u30f3\u30dc\u30a4\u30b9\u51fa\u73fe\u9806\u306b\u4e26\u3073\u66ff\u3048\u308b\n    _tmp = {f.name: f for f in excel_rawfiles}\n    return [_tmp[f] for f in dfexcelinvoice[\"data_file_names/name\"]]\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#_assign_invoice_val","title":"_assign_invoice_val","text":"<p>When the destination key, which is the first key 'keys1', is 'custom', valobj is cast according to the invoiceschema_obj. In all other cases, valobj is assigned without changing its type.</p> Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def _assign_invoice_val(invoiceobj: dict[str, Any], key1: str, key2: str, valobj: Any, invoiceschema_obj: dict[str, Any]) -&gt; None:\n    \"\"\"When the destination key, which is the first key 'keys1', is 'custom', valobj is cast according to the invoiceschema_obj. In all other cases, valobj is assigned without changing its type.\"\"\"\n    if key1 == \"custom\":\n        dct_schema = invoiceschema_obj[\"properties\"][key1][\"properties\"][key2]\n        try:\n            invoiceobj[key1][key2] = rde2util.castval(valobj, dct_schema[\"type\"], dct_schema.get(\"format\"))\n        except StructuredError as struct_err:\n            emsg = f\"ERROR: failed to cast invoice value for key [{key1}][{key2}]\"\n            raise StructuredError(emsg) from struct_err\n    else:\n        invoiceobj[key1][key2] = valobj\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#overwrite_invoicefile_for_dpfterm","title":"overwrite_invoicefile_for_dpfterm","text":"<p>A function to overwrite DPF metadata into an invoice file.</p> <p>Parameters:</p> Name Type Description Default <code>invoiceobj</code> <code>dict[str, Any]</code> <p>The object of invoice.json.</p> required <code>invoice_dst_filepath</code> <code>RdeFsPath</code> <p>The file path for the destination invoice.json.</p> required <code>invoiceschema_filepath</code> <code>RdeFsPath</code> <p>The file path of invoice.schema.json.</p> required <code>invoice_info</code> <code>dict[str, Any]</code> <p>Information about the invoice file.</p> required Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def overwrite_invoicefile_for_dpfterm(\n    invoiceobj: dict[str, Any],\n    invoice_dst_filepath: RdeFsPath,\n    invoiceschema_filepath: RdeFsPath,\n    invoice_info: dict[str, Any],\n) -&gt; None:\n    \"\"\"A function to overwrite DPF metadata into an invoice file.\n\n    Args:\n        invoiceobj (dict[str, Any]): The object of invoice.json.\n        invoice_dst_filepath (RdeFsPath): The file path for the destination invoice.json.\n        invoiceschema_filepath (RdeFsPath): The file path of invoice.schema.json.\n        invoice_info (dict[str, Any]): Information about the invoice file.\n    \"\"\"\n    with open(invoiceschema_filepath, \"rb\") as f:\n        data = f.read()\n    enc = chardet.detect(data)[\"encoding\"]\n    with open(invoiceschema_filepath, encoding=enc) as f:\n        invoiceschema_obj = json.load(f)\n    for k, v in invoice_info.items():\n        _assign_invoice_val(invoiceobj, \"custom\", k, v, invoiceschema_obj)\n    with open(invoice_dst_filepath, \"w\", encoding=enc) as fout:\n        json.dump(invoiceobj, fout, indent=4, ensure_ascii=False)\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#invoicefile_1","title":"InvoiceFile","text":"<p>Represents an invoice file and provides utilities to read and overwrite it.</p> <p>Attributes:</p> Name Type Description <code>invoice_path</code> <code>Path</code> <p>Path to the invoice file.</p> <code>invoice_obj</code> <code>dict</code> <p>Dictionary representation of the invoice JSON file.</p> Note <ul> <li>The class uses an external utility <code>rde2util.CharDecEncoding.detect_text_file_encoding</code> to detect the encoding of the file.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>invoice_path</code> <code>Path</code> <p>The path to the invoice file.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>invoice_obj</code> is not a dictionary.</p> Example Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>class InvoiceFile:\n    \"\"\"Represents an invoice file and provides utilities to read and overwrite it.\n\n    Attributes:\n        invoice_path (Path): Path to the invoice file.\n        invoice_obj (dict): Dictionary representation of the invoice JSON file.\n\n    Note:\n        - The class uses an external utility `rde2util.CharDecEncoding.detect_text_file_encoding` to detect the encoding of the file.\n\n    Args:\n        invoice_path (Path): The path to the invoice file.\n\n    Raises:\n        ValueError: If `invoice_obj` is not a dictionary.\n\n    Example:\n        # Usage\n        invoice = InvoiceFile(\"invoice.json\")\n        invoice.invoice_obj[\"basic\"][\"dataName\"] = \"new_data_name\"\n        invoice.overwrite(\"invoice_new.json\")\n    \"\"\"\n\n    def __init__(self, invoice_path: Path):\n        self.invoice_path = invoice_path\n        self._invoice_obj = self.read()\n\n    @property\n    def invoice_obj(self) -&gt; dict[str, Any]:\n        \"\"\"Gets the invoice object.\"\"\"\n        return self._invoice_obj\n\n    @invoice_obj.setter\n    def invoice_obj(self, value: dict[str, Any]) -&gt; None:\n        \"\"\"Sets the invoice object.\"\"\"\n        if not isinstance(value, dict):\n            emsg = \"invoice_obj must be a dictionary\"\n            raise ValueError(emsg)\n        self._invoice_obj = value\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self._invoice_obj[key]\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self._invoice_obj[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self._invoice_obj[key]\n\n    def read(self, *, target_path: Path | None = None) -&gt; dict:\n        \"\"\"Reads the content of the invoice file and returns it as a dictionary.\n\n        Args:\n            target_path (Optional[Path], optional): Path to the target invoice file. If not provided,\n                uses the path from `self.invoice_path`. Defaults to None.\n\n        Returns:\n            dict: Dictionary representation of the invoice JSON file.\n        \"\"\"\n        if target_path is None:\n            target_path = self.invoice_path\n\n        enc = CharDecEncoding.detect_text_file_encoding(target_path)\n        with open(target_path, encoding=enc) as f:\n            self.invoice_obj = json.load(f)\n        return self.invoice_obj\n\n    def overwrite(self, dst_file_path: Path, *, src_obj: Path | None = None) -&gt; None:\n        \"\"\"Overwrites the contents of the destination file with the invoice JSON data.\n\n        Args:\n            dst_file_path (Path): The path to the destination file.\n            src_obj (Optional[Path], optional): The path to the source object. Defaults to None.\n\n        Raises:\n            StructuredError: If the destination file does not exist.\n\n        Example:\n            # Usage\n            invoice = InvoiceFile(\"invoice.json\")\n            invoice.invoice_obj[\"basic\"][\"dataName\"] = \"new_data_name\"\n            invoice.overwrite(\"invoice_new.json\")\n\n        \"\"\"\n        if src_obj is None:\n            src_obj = self.invoice_path\n        parent_dir = os.path.dirname(dst_file_path)\n        os.makedirs(parent_dir, exist_ok=True)\n        enc = CharDecEncoding.detect_text_file_encoding(self.invoice_path)\n        with open(dst_file_path, \"w\", encoding=enc) as f:\n            json.dump(self.invoice_obj, f, indent=4, ensure_ascii=False)\n\n    @classmethod\n    def copy_original_invoice(cls, src_file_path: Path, dst_file_path: Path) -&gt; None:\n        \"\"\"Copies the original invoice file from the source file path to the destination file path.\n\n        Args:\n            src_file_path (Path): The source file path of the original invoice file.\n            dst_file_path (Path): The destination file path where the original invoice file will be copied to.\n\n        Raises:\n            StructuredError: If the source file path does not exist.\n\n        Returns:\n            None\n        \"\"\"\n        if not os.path.exists(src_file_path):\n            emsg = f\"File Not Found: {src_file_path}\"\n            raise StructuredError(emsg)\n        if src_file_path != dst_file_path:\n            shutil.copy(str(src_file_path), str(dst_file_path))\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.InvoiceFile--usage","title":"Usage","text":"<p>invoice = InvoiceFile(\"invoice.json\") invoice.invoice_obj\"basic\" = \"new_data_name\" invoice.overwrite(\"invoice_new.json\")</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.InvoiceFile.read","title":"<code>read(*, target_path=None)</code>","text":"<p>Reads the content of the invoice file and returns it as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>target_path</code> <code>Optional[Path]</code> <p>Path to the target invoice file. If not provided, uses the path from <code>self.invoice_path</code>. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Dictionary representation of the invoice JSON file.</p> Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def read(self, *, target_path: Path | None = None) -&gt; dict:\n    \"\"\"Reads the content of the invoice file and returns it as a dictionary.\n\n    Args:\n        target_path (Optional[Path], optional): Path to the target invoice file. If not provided,\n            uses the path from `self.invoice_path`. Defaults to None.\n\n    Returns:\n        dict: Dictionary representation of the invoice JSON file.\n    \"\"\"\n    if target_path is None:\n        target_path = self.invoice_path\n\n    enc = CharDecEncoding.detect_text_file_encoding(target_path)\n    with open(target_path, encoding=enc) as f:\n        self.invoice_obj = json.load(f)\n    return self.invoice_obj\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.InvoiceFile.overwrite","title":"<code>overwrite(dst_file_path, *, src_obj=None)</code>","text":"<p>Overwrites the contents of the destination file with the invoice JSON data.</p> <p>Parameters:</p> Name Type Description Default <code>dst_file_path</code> <code>Path</code> <p>The path to the destination file.</p> required <code>src_obj</code> <code>Optional[Path]</code> <p>The path to the source object. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>StructuredError</code> <p>If the destination file does not exist.</p> Example Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def overwrite(self, dst_file_path: Path, *, src_obj: Path | None = None) -&gt; None:\n    \"\"\"Overwrites the contents of the destination file with the invoice JSON data.\n\n    Args:\n        dst_file_path (Path): The path to the destination file.\n        src_obj (Optional[Path], optional): The path to the source object. Defaults to None.\n\n    Raises:\n        StructuredError: If the destination file does not exist.\n\n    Example:\n        # Usage\n        invoice = InvoiceFile(\"invoice.json\")\n        invoice.invoice_obj[\"basic\"][\"dataName\"] = \"new_data_name\"\n        invoice.overwrite(\"invoice_new.json\")\n\n    \"\"\"\n    if src_obj is None:\n        src_obj = self.invoice_path\n    parent_dir = os.path.dirname(dst_file_path)\n    os.makedirs(parent_dir, exist_ok=True)\n    enc = CharDecEncoding.detect_text_file_encoding(self.invoice_path)\n    with open(dst_file_path, \"w\", encoding=enc) as f:\n        json.dump(self.invoice_obj, f, indent=4, ensure_ascii=False)\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.InvoiceFile.overwrite--usage","title":"Usage","text":"<p>invoice = InvoiceFile(\"invoice.json\") invoice.invoice_obj\"basic\" = \"new_data_name\" invoice.overwrite(\"invoice_new.json\")</p>"},{"location":"rdetoolkit/invoicefile/#excelinvoicefile","title":"ExcelInvoiceFile","text":"<p>Class representing an invoice file in Excel format. Provides utilities for reading and overwriting the invoice file.</p> <p>Attributes:</p> Name Type Description <code>invoice_path</code> <code>Path</code> <p>Path to the invoice file.</p> <code>dfexcelinvoice</code> <code>DataFrame</code> <p>Dataframe of the invoice.</p> <code>df_general</code> <code>DataFrame</code> <p>Dataframe of general data.</p> <code>df_specific</code> <code>DataFrame</code> <p>Dataframe of specific data.</p> Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>class ExcelInvoiceFile:\n    \"\"\"Class representing an invoice file in Excel format. Provides utilities for reading and overwriting the invoice file.\n\n    Attributes:\n        invoice_path (Path): Path to the invoice file.\n        dfexcelinvoice (pd.DataFrame): Dataframe of the invoice.\n        df_general (pd.DataFrame): Dataframe of general data.\n        df_specific (pd.DataFrame): Dataframe of specific data.\n    \"\"\"\n\n    def __init__(self, invoice_path: Path):\n        self.invoice_path = invoice_path\n        self.dfexcelinvoice, self.df_general, self.df_specific = self.read()\n\n    def read(self, *, target_path: Path | None = None) -&gt; tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:\n        \"\"\"Reads the content of the Excel invoice file and returns it as three dataframes.\n\n        Args:\n            target_path (Optional[Path], optional): Path to the invoice file to be read. If not provided,\n                uses the path from `self.invoice_path`. Defaults to None.\n\n        Returns:\n            tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]: Three dataframes (dfexcelinvoice, df_general, df_specific).\n\n        Raises:\n            StructuredError: If the invoice file is not found, or if multiple sheets exist in the invoice list files,\n            or if no sheet is present in the invoice list files.\n        \"\"\"\n        if target_path is None:\n            target_path = self.invoice_path\n\n        self.__check_exist_rawfiles(target_path)\n\n        dct_sheets = pd.read_excel(target_path, sheet_name=None, dtype=str, header=None, index_col=None)\n\n        dfexcelinvoice, df_general, df_specific = None, None, None\n        for sh_name, df in dct_sheets.items():\n            if df.empty:\n                continue\n\n            target_comment_value = df.iat[0, 0]\n            if target_comment_value == \"invoiceList_format_id\":\n                if dfexcelinvoice is not None:\n                    emsg = \"ERROR: multiple sheet in invoiceList files\"\n                    raise StructuredError(emsg)\n                ExcelInvoiceFile.check_intermittent_empty_rows(df)\n                dfexcelinvoice = self._process_invoice_sheet(df)\n            elif sh_name == \"generalTerm\":\n                df_general = self._process_general_term_sheet(df)\n            elif sh_name == \"specificTerm\":\n                df_specific = self._process_specific_term_sheet(df)\n\n        if dfexcelinvoice is None:\n            emsg = \"ERROR: no sheet in invoiceList files\"\n            raise StructuredError(emsg)\n\n        return dfexcelinvoice, df_general, df_specific\n\n    def _process_invoice_sheet(self, df: pd.DataFrame) -&gt; pd.Series:\n        df = df.dropna(axis=0, how=\"all\").dropna(axis=1, how=\"all\")\n        hd1 = list(df.iloc[1, :].fillna(\"\"))\n        hd2 = list(df.iloc[2, :].fillna(\"\"))\n        df.columns = [f\"{s1}/{s2}\" if s1 else s2 for s1, s2 in zip(hd1, hd2)]\n        return df.iloc[4:, :].reset_index(drop=True).copy()\n\n    def _process_general_term_sheet(self, df: pd.DataFrame) -&gt; pd.Series:\n        _df_general = df[1:].copy()\n        _df_general.columns = [\"term_id\", \"key_name\"]\n        return _df_general\n\n    def _process_specific_term_sheet(self, df: pd.DataFrame) -&gt; pd.Series:\n        _df_specific = df[1:].copy()\n        _df_specific.columns = [\"sample_class_id\", \"term_id\", \"key_name\"]\n        return _df_specific\n\n    def __check_exist_rawfiles(self, excel_rawfiles: Path) -&gt; None:\n        if not os.path.exists(excel_rawfiles):\n            emsg = f\"ERROR: excelinvoice not found {excel_rawfiles}\"\n            raise StructuredError(emsg)\n\n    def overwrite(self, invoice_org: Path, dist_path: Path, invoice_schema_path: Path, idx: int) -&gt; None:\n        \"\"\"Overwrites the content of the original invoice file based on the data from the Excel invoice and saves it as a new file.\n\n        Args:\n            invoice_org (Path): Path to the original invoice file.\n            dist_path (Path): Path to where the overwritten invoice file will be saved.\n            invoice_schema_path (Path): Path to the invoice schema.\n            idx (int): Index of the target row in the invoice dataframe.\n        \"\"\"\n        invoice_schema_obj = self._load_json(invoice_schema_path)\n        invoice_obj = self._load_json(invoice_org)\n\n        # excel\u30a4\u30f3\u30dc\u30a4\u30b9\u306e\u5024\u304c\u7a7a\u6b04\u306e\u5834\u5408\u306b\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u5024\u304c\u5165\u3089\u306a\u3044\u3088\u3046\u306b\u521d\u671f\u5316\u3002\n        # \u3053\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u30a8\u30af\u30bb\u30eb\u30a4\u30f3\u30dc\u30a4\u30b9\u3067\u306f\u30bf\u30b0\u3001\u95a2\u9023\u8a66\u6599\u306f\u5bfe\u5fdc\u3057\u306a\u3044\u3002\n        for key, value in invoice_obj.items():\n            if key == \"sample\":\n                self._initialize_sample(value)\n            else:\n                self._initialize_non_sample(key, value)\n\n        for k, valstr in self.dfexcelinvoice.iloc[idx, :].dropna().items():\n            self._assign_value_to_invoice(k, valstr, invoice_obj, invoice_schema_obj)\n\n        self._ensure_sample_id_order(invoice_obj)\n\n        enc = self._detect_encoding(invoice_org)\n        enc = \"utf_8\" if enc.lower() == \"ascii\" else enc\n        self._write_json(dist_path, invoice_obj, enc)\n\n    @staticmethod\n    def check_intermittent_empty_rows(df: pd.DataFrame) -&gt; None:\n        \"\"\"Function to detect if there are empty rows between data rows in the ExcelInvoice (in DataFrame format).\n\n        If an empty row exists, an exception is raised.\n\n        Args:\n            df (pd.DataFrame): Information of Sheet 1 of ExcelInvoice.\n\n        Raises:\n            StructuredError: An exception is raised if an empty row exists.\n        \"\"\"\n        for i, row in df.iterrows():\n            if not ExcelInvoiceFile.__is_empty_row(row):\n                continue\n            if any(not ExcelInvoiceFile.__is_empty_row(r) for r in df.iloc[i + 1]):\n                emsg = \"Error! Blank lines exist between lines\"\n                raise StructuredError(emsg)\n\n    @staticmethod\n    def __is_empty_row(row: pd.Series) -&gt; bool:\n        return all(cell == \"\" or pd.isnull(cell) for cell in row)\n\n    def _assign_value_to_invoice(self, key: str, value: str, invoice_obj: dict, schema_obj: dict) -&gt; None:\n        assign_funcs: dict[str, Callable[[str, str, dict[Any, Any], dict[Any, Any]], None]] = {\n            \"basic/\": self._assign_basic,\n            \"sample/\": self._assign_sample,\n            \"sample.general/\": self._assign_sample_general,\n            \"sample.specific/\": self._assign_sample_specific,\n            \"custom/\": self._assign_custom,\n        }\n\n        for prefix, func in assign_funcs.items():\n            if key.startswith(prefix):\n                func(key, value, invoice_obj, schema_obj)\n                break\n\n    def _assign_basic(self, key: str, value: str, invoice_obj: dict, schema_obj: dict) -&gt; None:\n        cval = key.replace(\"basic/\", \"\")\n        _assign_invoice_val(invoice_obj, \"basic\", cval, value, schema_obj)\n\n    def _assign_sample(self, key: str, value: str, invoice_obj: dict, schema_obj: dict) -&gt; None:\n        cval = key.replace(\"sample/\", \"\")\n        if cval == \"names\":\n            _assign_invoice_val(invoice_obj, \"sample\", cval, [value], schema_obj)\n        else:\n            _assign_invoice_val(invoice_obj, \"sample\", cval, value, schema_obj)\n\n    def _assign_sample_general(self, key: str, value: str, invoice_obj: dict, schema_obj: dict) -&gt; None:\n        cval = key.replace(\"sample.general/\", \"sample.general.\")\n        term_id = self.df_general[self.df_general[\"key_name\"] == cval][\"term_id\"].values[0]\n        for dictobj in invoice_obj[\"sample\"][\"generalAttributes\"]:\n            if dictobj.get(\"termId\") == term_id:\n                dictobj[\"value\"] = value\n                break\n\n    def _assign_sample_specific(self, key: str, value: str, invoice_obj: dict, schema_obj: dict) -&gt; None:\n        cval = key.replace(\"sample.specific/\", \"sample.specific.\")\n        term_id = self.df_specific[self.df_specific[\"key_name\"] == cval][\"term_id\"].values[0]\n        for dictobj in invoice_obj[\"sample\"][\"specificAttributes\"]:\n            if dictobj.get(\"termId\") == term_id:\n                dictobj[\"value\"] = value\n                break\n\n    def _assign_custom(self, key: str, value: str, invoice_obj: dict, schema_obj: dict) -&gt; None:\n        cval = key.replace(\"custom/\", \"\")\n        _assign_invoice_val(invoice_obj, \"custom\", cval, value, schema_obj)\n\n    def _ensure_sample_id_order(self, invoice_obj: dict) -&gt; None:\n        sample_info_value = invoice_obj.get(\"sample\")\n        if sample_info_value is None:\n            return\n        if \"sampleId\" not in sample_info_value:\n            return\n\n        sampleid_value = invoice_obj[\"sample\"].pop(\"sampleId\")\n        invoice_obj[\"sample\"] = {\"sampleId\": sampleid_value, **invoice_obj[\"sample\"]}\n\n    def _detect_encoding(self, file_path: Path) -&gt; str:\n        return CharDecEncoding.detect_text_file_encoding(file_path)\n\n    def _load_json(self, file_path: Path) -&gt; dict[str, Any]:\n        enc = self._detect_encoding(file_path)\n        with open(file_path, encoding=enc) as f:\n            return json.load(f)\n\n    def _write_json(self, file_path: Path, obj: Any, enc: str) -&gt; None:\n        with open(file_path, \"w\", encoding=enc) as f:\n            json.dump(obj, f, indent=4, ensure_ascii=False)\n\n    def _initialize_sample(self, sample_obj: Any) -&gt; None:\n        for item, val in sample_obj.items():\n            if item in [\"sampleId\", \"composition\", \"referenceUrl\", \"description\", \"ownerId\"]:\n                sample_obj[item] = None\n            elif item in [\"generalAttributes\", \"specificAttributes\"]:\n                for attribute in val:\n                    attribute[\"value\"] = None\n\n    def _initialize_non_sample(self, key: str, value: Any) -&gt; None:\n        if key not in [\"datasetId\", \"sample\"]:\n            for item in value:\n                if item not in [\"dateSubmitted\", \"instrumentId\"]:\n                    value[item] = None\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile.read","title":"<code>read(*, target_path=None)</code>","text":"<p>Reads the content of the Excel invoice file and returns it as three dataframes.</p> <p>Parameters:</p> Name Type Description Default <code>target_path</code> <code>Optional[Path]</code> <p>Path to the invoice file to be read. If not provided, uses the path from <code>self.invoice_path</code>. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[DataFrame, DataFrame, DataFrame]</code> <p>tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]: Three dataframes (dfexcelinvoice, df_general, df_specific).</p> <p>Raises:</p> Type Description <code>StructuredError</code> <p>If the invoice file is not found, or if multiple sheets exist in the invoice list files,</p> Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def read(self, *, target_path: Path | None = None) -&gt; tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:\n    \"\"\"Reads the content of the Excel invoice file and returns it as three dataframes.\n\n    Args:\n        target_path (Optional[Path], optional): Path to the invoice file to be read. If not provided,\n            uses the path from `self.invoice_path`. Defaults to None.\n\n    Returns:\n        tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]: Three dataframes (dfexcelinvoice, df_general, df_specific).\n\n    Raises:\n        StructuredError: If the invoice file is not found, or if multiple sheets exist in the invoice list files,\n        or if no sheet is present in the invoice list files.\n    \"\"\"\n    if target_path is None:\n        target_path = self.invoice_path\n\n    self.__check_exist_rawfiles(target_path)\n\n    dct_sheets = pd.read_excel(target_path, sheet_name=None, dtype=str, header=None, index_col=None)\n\n    dfexcelinvoice, df_general, df_specific = None, None, None\n    for sh_name, df in dct_sheets.items():\n        if df.empty:\n            continue\n\n        target_comment_value = df.iat[0, 0]\n        if target_comment_value == \"invoiceList_format_id\":\n            if dfexcelinvoice is not None:\n                emsg = \"ERROR: multiple sheet in invoiceList files\"\n                raise StructuredError(emsg)\n            ExcelInvoiceFile.check_intermittent_empty_rows(df)\n            dfexcelinvoice = self._process_invoice_sheet(df)\n        elif sh_name == \"generalTerm\":\n            df_general = self._process_general_term_sheet(df)\n        elif sh_name == \"specificTerm\":\n            df_specific = self._process_specific_term_sheet(df)\n\n    if dfexcelinvoice is None:\n        emsg = \"ERROR: no sheet in invoiceList files\"\n        raise StructuredError(emsg)\n\n    return dfexcelinvoice, df_general, df_specific\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile.overwrite","title":"<code>overwrite(invoice_org, dist_path, invoice_schema_path, idx)</code>","text":"<p>Overwrites the content of the original invoice file based on the data from the Excel invoice and saves it as a new file.</p> <p>Parameters:</p> Name Type Description Default <code>invoice_org</code> <code>Path</code> <p>Path to the original invoice file.</p> required <code>dist_path</code> <code>Path</code> <p>Path to where the overwritten invoice file will be saved.</p> required <code>invoice_schema_path</code> <code>Path</code> <p>Path to the invoice schema.</p> required <code>idx</code> <code>int</code> <p>Index of the target row in the invoice dataframe.</p> required Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def overwrite(self, invoice_org: Path, dist_path: Path, invoice_schema_path: Path, idx: int) -&gt; None:\n    \"\"\"Overwrites the content of the original invoice file based on the data from the Excel invoice and saves it as a new file.\n\n    Args:\n        invoice_org (Path): Path to the original invoice file.\n        dist_path (Path): Path to where the overwritten invoice file will be saved.\n        invoice_schema_path (Path): Path to the invoice schema.\n        idx (int): Index of the target row in the invoice dataframe.\n    \"\"\"\n    invoice_schema_obj = self._load_json(invoice_schema_path)\n    invoice_obj = self._load_json(invoice_org)\n\n    # excel\u30a4\u30f3\u30dc\u30a4\u30b9\u306e\u5024\u304c\u7a7a\u6b04\u306e\u5834\u5408\u306b\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u5024\u304c\u5165\u3089\u306a\u3044\u3088\u3046\u306b\u521d\u671f\u5316\u3002\n    # \u3053\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u30a8\u30af\u30bb\u30eb\u30a4\u30f3\u30dc\u30a4\u30b9\u3067\u306f\u30bf\u30b0\u3001\u95a2\u9023\u8a66\u6599\u306f\u5bfe\u5fdc\u3057\u306a\u3044\u3002\n    for key, value in invoice_obj.items():\n        if key == \"sample\":\n            self._initialize_sample(value)\n        else:\n            self._initialize_non_sample(key, value)\n\n    for k, valstr in self.dfexcelinvoice.iloc[idx, :].dropna().items():\n        self._assign_value_to_invoice(k, valstr, invoice_obj, invoice_schema_obj)\n\n    self._ensure_sample_id_order(invoice_obj)\n\n    enc = self._detect_encoding(invoice_org)\n    enc = \"utf_8\" if enc.lower() == \"ascii\" else enc\n    self._write_json(dist_path, invoice_obj, enc)\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile._process_invoice_sheet","title":"<code>_process_invoice_sheet(df)</code>","text":"Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def _process_invoice_sheet(self, df: pd.DataFrame) -&gt; pd.Series:\n    df = df.dropna(axis=0, how=\"all\").dropna(axis=1, how=\"all\")\n    hd1 = list(df.iloc[1, :].fillna(\"\"))\n    hd2 = list(df.iloc[2, :].fillna(\"\"))\n    df.columns = [f\"{s1}/{s2}\" if s1 else s2 for s1, s2 in zip(hd1, hd2)]\n    return df.iloc[4:, :].reset_index(drop=True).copy()\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile._process_general_term_sheet","title":"<code>_process_general_term_sheet(df)</code>","text":"Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def _process_general_term_sheet(self, df: pd.DataFrame) -&gt; pd.Series:\n    _df_general = df[1:].copy()\n    _df_general.columns = [\"term_id\", \"key_name\"]\n    return _df_general\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile._process_specific_term_sheet","title":"<code>_process_specific_term_sheet(df)</code>","text":"Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def _process_specific_term_sheet(self, df: pd.DataFrame) -&gt; pd.Series:\n    _df_specific = df[1:].copy()\n    _df_specific.columns = [\"sample_class_id\", \"term_id\", \"key_name\"]\n    return _df_specific\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile._assign_basic","title":"<code>_assign_basic(key, value, invoice_obj, schema_obj)</code>","text":"Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def _assign_basic(self, key: str, value: str, invoice_obj: dict, schema_obj: dict) -&gt; None:\n    cval = key.replace(\"basic/\", \"\")\n    _assign_invoice_val(invoice_obj, \"basic\", cval, value, schema_obj)\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile._assign_sample","title":"<code>_assign_sample(key, value, invoice_obj, schema_obj)</code>","text":"Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def _assign_sample(self, key: str, value: str, invoice_obj: dict, schema_obj: dict) -&gt; None:\n    cval = key.replace(\"sample/\", \"\")\n    if cval == \"names\":\n        _assign_invoice_val(invoice_obj, \"sample\", cval, [value], schema_obj)\n    else:\n        _assign_invoice_val(invoice_obj, \"sample\", cval, value, schema_obj)\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile._assign_sample_general","title":"<code>_assign_sample_general(key, value, invoice_obj, schema_obj)</code>","text":"Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def _assign_sample_general(self, key: str, value: str, invoice_obj: dict, schema_obj: dict) -&gt; None:\n    cval = key.replace(\"sample.general/\", \"sample.general.\")\n    term_id = self.df_general[self.df_general[\"key_name\"] == cval][\"term_id\"].values[0]\n    for dictobj in invoice_obj[\"sample\"][\"generalAttributes\"]:\n        if dictobj.get(\"termId\") == term_id:\n            dictobj[\"value\"] = value\n            break\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile._assign_sample_specific","title":"<code>_assign_sample_specific(key, value, invoice_obj, schema_obj)</code>","text":"Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def _assign_sample_specific(self, key: str, value: str, invoice_obj: dict, schema_obj: dict) -&gt; None:\n    cval = key.replace(\"sample.specific/\", \"sample.specific.\")\n    term_id = self.df_specific[self.df_specific[\"key_name\"] == cval][\"term_id\"].values[0]\n    for dictobj in invoice_obj[\"sample\"][\"specificAttributes\"]:\n        if dictobj.get(\"termId\") == term_id:\n            dictobj[\"value\"] = value\n            break\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile._assign_custom","title":"<code>_assign_custom(key, value, invoice_obj, schema_obj)</code>","text":"Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def _assign_custom(self, key: str, value: str, invoice_obj: dict, schema_obj: dict) -&gt; None:\n    cval = key.replace(\"custom/\", \"\")\n    _assign_invoice_val(invoice_obj, \"custom\", cval, value, schema_obj)\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile._ensure_sample_id_order","title":"<code>_ensure_sample_id_order(invoice_obj)</code>","text":"Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def _ensure_sample_id_order(self, invoice_obj: dict) -&gt; None:\n    sample_info_value = invoice_obj.get(\"sample\")\n    if sample_info_value is None:\n        return\n    if \"sampleId\" not in sample_info_value:\n        return\n\n    sampleid_value = invoice_obj[\"sample\"].pop(\"sampleId\")\n    invoice_obj[\"sample\"] = {\"sampleId\": sampleid_value, **invoice_obj[\"sample\"]}\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile._detect_encoding","title":"<code>_detect_encoding(file_path)</code>","text":"Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def _detect_encoding(self, file_path: Path) -&gt; str:\n    return CharDecEncoding.detect_text_file_encoding(file_path)\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile._load_json","title":"<code>_load_json(file_path)</code>","text":"Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def _load_json(self, file_path: Path) -&gt; dict[str, Any]:\n    enc = self._detect_encoding(file_path)\n    with open(file_path, encoding=enc) as f:\n        return json.load(f)\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile._write_json","title":"<code>_write_json(file_path, obj, enc)</code>","text":"Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def _write_json(self, file_path: Path, obj: Any, enc: str) -&gt; None:\n    with open(file_path, \"w\", encoding=enc) as f:\n        json.dump(obj, f, indent=4, ensure_ascii=False)\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile._initialize_sample","title":"<code>_initialize_sample(sample_obj)</code>","text":"Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def _initialize_sample(self, sample_obj: Any) -&gt; None:\n    for item, val in sample_obj.items():\n        if item in [\"sampleId\", \"composition\", \"referenceUrl\", \"description\", \"ownerId\"]:\n            sample_obj[item] = None\n        elif item in [\"generalAttributes\", \"specificAttributes\"]:\n            for attribute in val:\n                attribute[\"value\"] = None\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile._initialize_non_sample","title":"<code>_initialize_non_sample(key, value)</code>","text":"Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def _initialize_non_sample(self, key: str, value: Any) -&gt; None:\n    if key not in [\"datasetId\", \"sample\"]:\n        for item in value:\n            if item not in [\"dateSubmitted\", \"instrumentId\"]:\n                value[item] = None\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#backup_invoice_json_files","title":"backup_invoice_json_files","text":"<p>Backs up invoice files and retrieves paths based on the mode specified in the input.</p> <p>For excelinvoice and rdeformat modes, it backs up invoice.json as the original file in the temp directory in MultiDataTile mode. For other modes, it treats the files in the invoice directory as the original files. After backing up, it returns the file paths for invoice_org.json and invoice.schema.json.</p> <p>Parameters:</p> Name Type Description Default <code>excel_invoice_file</code> <code>Optional[Path]</code> <p>File path for excelinvoice mode</p> required <code>mode</code> <code>str</code> <p>mode flags</p> required <p>Returns:</p> Type Description <code>Path</code> <p>tuple[Path, Path]: File paths for invoice.json and invoice.schema.json</p> Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def backup_invoice_json_files(excel_invoice_file: Path | None, mode: str | None) -&gt; Path:\n    \"\"\"Backs up invoice files and retrieves paths based on the mode specified in the input.\n\n    For excelinvoice and rdeformat modes, it backs up invoice.json as the original file in the temp directory in MultiDataTile mode.\n    For other modes, it treats the files in the invoice directory as the original files.\n    After backing up, it returns the file paths for invoice_org.json and invoice.schema.json.\n\n    Args:\n        excel_invoice_file (Optional[Path]): File path for excelinvoice mode\n        mode (str): mode flags\n\n    Returns:\n        tuple[Path, Path]: File paths for invoice.json and invoice.schema.json\n    \"\"\"\n    if mode is None:\n        mode = \"\"\n    invoice_org_filepath = StorageDir.get_specific_outputdir(False, \"invoice\").joinpath(\"invoice.json\")\n    if (excel_invoice_file is not None) or (mode is not None and mode.lower() in [\"rdeformat\", \"multidatatile\"]):\n        invoice_org_filepath = StorageDir.get_specific_outputdir(True, \"temp\").joinpath(\"invoice_org.json\")\n        shutil.copy(StorageDir.get_specific_outputdir(False, \"invoice\").joinpath(\"invoice.json\"), invoice_org_filepath)\n    # elif mode is not None and mode.lower() in [\"rdeformat\", \"multidatatile\"]:\n    #     invoice_org_filepath = StorageDir.get_specific_outputdir(True, \"temp\").joinpath(\"invoice_org.json\")\n    #     shutil.copy(StorageDir.get_specific_outputdir(False, \"invoice\").joinpath(\"invoice.json\"), invoice_org_filepath)\n\n    return invoice_org_filepath\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#update_description_with_features","title":"update_description_with_features","text":"<p>Writes the provided features to the description field RDE.</p> <p>This function takes a dictionary of features and formats them to be written into the description field(to invoice.json)</p> <p>Parameters:</p> Name Type Description Default <code>rde_resource</code> <code>RdeOutputResourcePath</code> <p>Path object containing resource paths needed for RDE processing.</p> required <code>dst_invoice_json</code> <code>Path</code> <p>Path to the invoice.json file where the features will be written.</p> required <code>metadata_def_json</code> <code>Path</code> <p>Path to the metadata list JSON file, which may include definitions or schema information.</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>The function does not return a value but writes the features to the invoice.json file in the description field.</p> Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def update_description_with_features(\n    rde_resource: RdeOutputResourcePath,\n    dst_invoice_json: Path,\n    metadata_def_json: Path,\n) -&gt; None:\n    \"\"\"Writes the provided features to the description field RDE.\n\n    This function takes a dictionary of features and formats them to be written\n    into the description field(to invoice.json)\n\n    Args:\n        rde_resource (RdeOutputResourcePath): Path object containing resource paths needed for RDE processing.\n        dst_invoice_json (Path): Path to the invoice.json file where the features will be written.\n        metadata_def_json (Path): Path to the metadata list JSON file, which may include definitions or schema information.\n\n    Returns:\n        None: The function does not return a value but writes the features to the invoice.json file in the description field.\n    \"\"\"\n    with open(dst_invoice_json, \"rb\") as dst_invoice:\n        enc_dst_invoice_data = dst_invoice.read()\n    enc = chardet.detect(enc_dst_invoice_data)[\"encoding\"]\n    with open(dst_invoice_json, encoding=enc) as f:\n        invoice_obj = json.load(f)\n\n    with open(rde_resource.invoice_schema_json, \"rb\") as rde_resource_invoice_schema:\n        enc_rde_invoice_schema_data = rde_resource_invoice_schema.read()\n    enc = chardet.detect(enc_rde_invoice_schema_data)[\"encoding\"]\n    with open(rde_resource.invoice_schema_json, encoding=enc) as f:\n        invoice_schema_obj = json.load(f)\n\n    with open(metadata_def_json, \"rb\") as metadata_def_json_f:\n        enc_rde_invoice_schema_data = metadata_def_json_f.read()\n    enc = chardet.detect(enc_rde_invoice_schema_data)[\"encoding\"]\n    with open(metadata_def_json, encoding=enc) as f:\n        metadata_def_obj = json.load(f)\n\n    with open(rde_resource.meta.joinpath(\"metadata.json\"), encoding=enc) as f:\n        metadata_json_obj = json.load(f)\n\n    description = invoice_obj[\"basic\"][\"description\"] if invoice_obj[\"basic\"][\"description\"] else \"\"\n    for key, value in metadata_def_obj.items():\n        if not value.get(\"_feature\"):\n            continue\n\n        dscheader = __serch_key_from_constant_variable_obj(key, metadata_json_obj)\n        if dscheader is None:\n            continue\n        if dscheader.get(key) is None:\n            continue\n\n        if value.get(\"unit\"):\n            description += f\"\\n{metadata_def_obj[key]['name']['ja']}({metadata_def_obj[key]['unit']}):{dscheader[key]['value']}\"\n        else:\n            description += f\"\\n{metadata_def_obj[key]['name']['ja']}:{dscheader[key]['value']}\"\n\n        if description.startswith(\"\\n\"):\n            description = description[1:]\n\n    _assign_invoice_val(invoice_obj, \"basic\", \"description\", description, invoice_schema_obj)\n    rde2util.write_to_json_file(dst_invoice_json, invoice_obj)\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#rulebasedreplacer","title":"RuleBasedReplacer","text":"<p>A class for changing the rules of data naming.</p> <p>This class is used to manage and apply file name mapping rules. It reads rules from a JSON format rule file, sets rules, and performs file name transformations and replacements based on those rules.</p> <p>Attributes:</p> Name Type Description <code>rules</code> <code>dict[str, str]</code> <p>Dictionary holding the mapping rules.</p> <code>last_apply_result</code> <code>dict[str, Any]</code> <p>The result of the last applied rules.</p> <p>Parameters:</p> Name Type Description Default <code>rule_file_path</code> <code>Optional[Union[str, Path]]</code> <p>Path to the rule file. If specified, rules are loaded from this path.</p> <code>None</code> Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>class RuleBasedReplacer:\n    \"\"\"A class for changing the rules of data naming.\n\n    This class is used to manage and apply file name mapping rules. It reads rules from a JSON format\n    rule file, sets rules, and performs file name transformations and replacements based on those rules.\n\n    Attributes:\n        rules (dict[str, str]): Dictionary holding the mapping rules.\n        last_apply_result (dict[str, Any]): The result of the last applied rules.\n\n    Args:\n        rule_file_path (Optional[Union[str, Path]]): Path to the rule file. If specified, rules are loaded from this path.\n    \"\"\"\n\n    def __init__(self, *, rule_file_path: str | Path | None = None):\n        self.rules: dict[str, str] = {}\n        self.last_apply_result: dict[str, Any] = {}\n\n        if isinstance(rule_file_path, str):\n            rule_file_path = Path(rule_file_path)\n        if rule_file_path and rule_file_path.exists():\n            self.load_rules(rule_file_path)\n\n    def load_rules(self, filepath: str | Path) -&gt; None:\n        \"\"\"Function to read file mapping rules.\n\n        The file containing the mapping rules must be in JSON format.\n\n        Args:\n            filepath (Union[str, Path]): The file path of the JSON file containing the mapping rules.\n\n        Raises:\n            StructuredError: An exception is raised if the file extension is not json.\n        \"\"\"\n        if isinstance(filepath, str):\n            filepath = Path(filepath)\n        if filepath.suffix != \".json\":\n            emsg = f\"Error. File format/extension is not correct: {filepath}\"\n            raise StructuredError(emsg)\n\n        enc = CharDecEncoding.detect_text_file_encoding(filepath)\n        with open(filepath, encoding=enc) as f:\n            data = json.load(f)\n            self.rules = data.get(\"filename_mapping\", {})\n\n    def get_apply_rules_obj(\n        self,\n        replacements: dict[str, Any],\n        source_json_obj: dict[str, Any] | None,\n        *,\n        mapping_rules: dict[str, str] | None = None,\n    ) -&gt; dict[str, Any]:\n        \"\"\"Function to convert file mapping rules into a JSON format.\n\n        This function takes string mappings separated by dots ('.') and converts them into a dictionary format, making it easier to handle within a target JsonObject.\n\n        Args:\n            replacements (dict[str, str]): The object containing mapping rules.\n            source_json_obj (Optional[dict[str, Any]]): Objects of key and value to which you want to apply the rule\n            mapping_rules (Optional[dict[str, str]], optional): Rules for mapping key and value. Defaults to None.\n\n        Returns:\n            dict[str, Any]: dictionary type data after conversion\n\n        Example:\n            # rule.json\n            rule = {\n                \"filename_mapping\": {\n                    \"invoice.basic.dataName\": \"${filename}\",\n                    \"invoice.sample.names\": [\"${somedataname}\"],\n                }\n            }\n            replacer = RuleBasedReplacer('rules.json')\n            replacements = {\n                '${filename}': 'example.txt',\n                '${somedataname}': ['some data']\n            }\n            result = replacer.apply_rules(replacement_rule, save_file_path, mapping_rules = rule)\n            print(result)\n        \"\"\"\n        # [TODO] Correction of type definitions in version 0.1.6\n        if mapping_rules is None:\n            mapping_rules = self.rules\n        if source_json_obj is None:\n            source_json_obj = {}\n\n        for key, value in self.rules.items():\n            keys = key.split(\".\")\n            replace_value = replacements.get(value, \"\")\n            current_obj: dict[str, Any] = source_json_obj\n            for k in keys[:-1]:\n                # search for the desired key in the dictionary from \"xxx.xxx.xxx\" ...\n                if k not in current_obj:\n                    current_obj[k] = {}\n                current_obj = current_obj[k]\n            current_obj[keys[-1]] = replace_value\n\n        self.last_apply_result = source_json_obj\n\n        return self.last_apply_result\n\n    def set_rule(self, path: str, variable: str) -&gt; None:\n        \"\"\"Sets a new rule.\n\n        Args:\n            path (str): The path to the target location for replacement.\n            variable (str): The rule after replacement.\n\n        Example:\n            replacer = RuleBasedReplacer()\n            replacer.set_rule('invoice.basic.dataName', 'filename')\n            replacer.set_rule('invoice.sample.name', 'dataname')\n            print(replacer.rules)\n        \"\"\"\n        self.rules[path] = variable\n\n    def write_rule(self, replacements_rule: dict[str, Any], save_file_path: str | Path) -&gt; str:\n        \"\"\"Function to write file mapping rules to a target JSON file.\n\n        Writes the set mapping rules (in JSON format) to the target file\n\n        Args:\n            replacements_rule (dict[str, str]): The object containing mapping rules.\n            save_file_path (Union[str, Path]): The file path for saving.\n\n        Raises:\n            StructuredError: An exception error occurs if the extension of the save path is not .json.\n            StructuredError: An exception error occurs if values cannot be written to the json.\n\n        Returns:\n            str: The result of writing to the target JSON.\n        \"\"\"\n        contents: str = \"\"\n\n        if isinstance(save_file_path, str):\n            save_file_path = Path(save_file_path)\n\n        if save_file_path.suffix != \".json\":\n            emsg = f\"Extension error. Incorrect extension: {save_file_path}\"\n            raise StructuredError(emsg)\n\n        if save_file_path.exists():\n            enc = CharDecEncoding.detect_text_file_encoding(save_file_path)\n            with open(save_file_path, encoding=enc) as f:\n                exists_contents: dict = json.load(f)\n            _ = self.get_apply_rules_obj(replacements_rule, exists_contents)\n            data_to_write = copy.deepcopy(exists_contents)\n        else:\n            new_contents: dict[str, Any] = {}\n            _ = self.get_apply_rules_obj(replacements_rule, new_contents)\n            data_to_write = copy.deepcopy(new_contents)\n            enc = \"utf-8\"\n\n        try:\n            with open(save_file_path, mode=\"w\", encoding=enc) as f:\n                json.dump(data_to_write, f, indent=4, ensure_ascii=False)\n                contents = json.dumps({\"filename_mapping\": self.rules})\n        except json.JSONDecodeError as json_err:\n            emsg = \"Error. No write was performed on the target json\"\n            raise StructuredError(emsg) from json_err\n\n        return contents\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.RuleBasedReplacer.load_rules","title":"<code>load_rules(filepath)</code>","text":"<p>Function to read file mapping rules.</p> <p>The file containing the mapping rules must be in JSON format.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Union[str, Path]</code> <p>The file path of the JSON file containing the mapping rules.</p> required <p>Raises:</p> Type Description <code>StructuredError</code> <p>An exception is raised if the file extension is not json.</p> Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def load_rules(self, filepath: str | Path) -&gt; None:\n    \"\"\"Function to read file mapping rules.\n\n    The file containing the mapping rules must be in JSON format.\n\n    Args:\n        filepath (Union[str, Path]): The file path of the JSON file containing the mapping rules.\n\n    Raises:\n        StructuredError: An exception is raised if the file extension is not json.\n    \"\"\"\n    if isinstance(filepath, str):\n        filepath = Path(filepath)\n    if filepath.suffix != \".json\":\n        emsg = f\"Error. File format/extension is not correct: {filepath}\"\n        raise StructuredError(emsg)\n\n    enc = CharDecEncoding.detect_text_file_encoding(filepath)\n    with open(filepath, encoding=enc) as f:\n        data = json.load(f)\n        self.rules = data.get(\"filename_mapping\", {})\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.RuleBasedReplacer.get_apply_rules_obj","title":"<code>get_apply_rules_obj(replacements, source_json_obj, *, mapping_rules=None)</code>","text":"<p>Function to convert file mapping rules into a JSON format.</p> <p>This function takes string mappings separated by dots ('.') and converts them into a dictionary format, making it easier to handle within a target JsonObject.</p> <p>Parameters:</p> Name Type Description Default <code>replacements</code> <code>dict[str, str]</code> <p>The object containing mapping rules.</p> required <code>source_json_obj</code> <code>Optional[dict[str, Any]]</code> <p>Objects of key and value to which you want to apply the rule</p> required <code>mapping_rules</code> <code>Optional[dict[str, str]]</code> <p>Rules for mapping key and value. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: dictionary type data after conversion</p> Example Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def get_apply_rules_obj(\n    self,\n    replacements: dict[str, Any],\n    source_json_obj: dict[str, Any] | None,\n    *,\n    mapping_rules: dict[str, str] | None = None,\n) -&gt; dict[str, Any]:\n    \"\"\"Function to convert file mapping rules into a JSON format.\n\n    This function takes string mappings separated by dots ('.') and converts them into a dictionary format, making it easier to handle within a target JsonObject.\n\n    Args:\n        replacements (dict[str, str]): The object containing mapping rules.\n        source_json_obj (Optional[dict[str, Any]]): Objects of key and value to which you want to apply the rule\n        mapping_rules (Optional[dict[str, str]], optional): Rules for mapping key and value. Defaults to None.\n\n    Returns:\n        dict[str, Any]: dictionary type data after conversion\n\n    Example:\n        # rule.json\n        rule = {\n            \"filename_mapping\": {\n                \"invoice.basic.dataName\": \"${filename}\",\n                \"invoice.sample.names\": [\"${somedataname}\"],\n            }\n        }\n        replacer = RuleBasedReplacer('rules.json')\n        replacements = {\n            '${filename}': 'example.txt',\n            '${somedataname}': ['some data']\n        }\n        result = replacer.apply_rules(replacement_rule, save_file_path, mapping_rules = rule)\n        print(result)\n    \"\"\"\n    # [TODO] Correction of type definitions in version 0.1.6\n    if mapping_rules is None:\n        mapping_rules = self.rules\n    if source_json_obj is None:\n        source_json_obj = {}\n\n    for key, value in self.rules.items():\n        keys = key.split(\".\")\n        replace_value = replacements.get(value, \"\")\n        current_obj: dict[str, Any] = source_json_obj\n        for k in keys[:-1]:\n            # search for the desired key in the dictionary from \"xxx.xxx.xxx\" ...\n            if k not in current_obj:\n                current_obj[k] = {}\n            current_obj = current_obj[k]\n        current_obj[keys[-1]] = replace_value\n\n    self.last_apply_result = source_json_obj\n\n    return self.last_apply_result\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.RuleBasedReplacer.get_apply_rules_obj--rulejson","title":"rule.json","text":"<p>rule = {     \"filename_mapping\": {         \"invoice.basic.dataName\": \"${filename}\",         \"invoice.sample.names\": [\"${somedataname}\"],     } } replacer = RuleBasedReplacer('rules.json') replacements = {     '${filename}': 'example.txt',     '${somedataname}': ['some data'] } result = replacer.apply_rules(replacement_rule, save_file_path, mapping_rules = rule) print(result)</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.RuleBasedReplacer.set_rule","title":"<code>set_rule(path, variable)</code>","text":"<p>Sets a new rule.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the target location for replacement.</p> required <code>variable</code> <code>str</code> <p>The rule after replacement.</p> required Example <p>replacer = RuleBasedReplacer() replacer.set_rule('invoice.basic.dataName', 'filename') replacer.set_rule('invoice.sample.name', 'dataname') print(replacer.rules)</p> Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def set_rule(self, path: str, variable: str) -&gt; None:\n    \"\"\"Sets a new rule.\n\n    Args:\n        path (str): The path to the target location for replacement.\n        variable (str): The rule after replacement.\n\n    Example:\n        replacer = RuleBasedReplacer()\n        replacer.set_rule('invoice.basic.dataName', 'filename')\n        replacer.set_rule('invoice.sample.name', 'dataname')\n        print(replacer.rules)\n    \"\"\"\n    self.rules[path] = variable\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.RuleBasedReplacer.write_rule","title":"<code>write_rule(replacements_rule, save_file_path)</code>","text":"<p>Function to write file mapping rules to a target JSON file.</p> <p>Writes the set mapping rules (in JSON format) to the target file</p> <p>Parameters:</p> Name Type Description Default <code>replacements_rule</code> <code>dict[str, str]</code> <p>The object containing mapping rules.</p> required <code>save_file_path</code> <code>Union[str, Path]</code> <p>The file path for saving.</p> required <p>Raises:</p> Type Description <code>StructuredError</code> <p>An exception error occurs if the extension of the save path is not .json.</p> <code>StructuredError</code> <p>An exception error occurs if values cannot be written to the json.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The result of writing to the target JSON.</p> Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def write_rule(self, replacements_rule: dict[str, Any], save_file_path: str | Path) -&gt; str:\n    \"\"\"Function to write file mapping rules to a target JSON file.\n\n    Writes the set mapping rules (in JSON format) to the target file\n\n    Args:\n        replacements_rule (dict[str, str]): The object containing mapping rules.\n        save_file_path (Union[str, Path]): The file path for saving.\n\n    Raises:\n        StructuredError: An exception error occurs if the extension of the save path is not .json.\n        StructuredError: An exception error occurs if values cannot be written to the json.\n\n    Returns:\n        str: The result of writing to the target JSON.\n    \"\"\"\n    contents: str = \"\"\n\n    if isinstance(save_file_path, str):\n        save_file_path = Path(save_file_path)\n\n    if save_file_path.suffix != \".json\":\n        emsg = f\"Extension error. Incorrect extension: {save_file_path}\"\n        raise StructuredError(emsg)\n\n    if save_file_path.exists():\n        enc = CharDecEncoding.detect_text_file_encoding(save_file_path)\n        with open(save_file_path, encoding=enc) as f:\n            exists_contents: dict = json.load(f)\n        _ = self.get_apply_rules_obj(replacements_rule, exists_contents)\n        data_to_write = copy.deepcopy(exists_contents)\n    else:\n        new_contents: dict[str, Any] = {}\n        _ = self.get_apply_rules_obj(replacements_rule, new_contents)\n        data_to_write = copy.deepcopy(new_contents)\n        enc = \"utf-8\"\n\n    try:\n        with open(save_file_path, mode=\"w\", encoding=enc) as f:\n            json.dump(data_to_write, f, indent=4, ensure_ascii=False)\n            contents = json.dumps({\"filename_mapping\": self.rules})\n    except json.JSONDecodeError as json_err:\n        emsg = \"Error. No write was performed on the target json\"\n        raise StructuredError(emsg) from json_err\n\n    return contents\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#apply_default_filename_mapping_rule","title":"apply_default_filename_mapping_rule","text":"<p>Applies a default filename mapping rule based on the basename of the save file path.</p> <p>This function creates an instance of RuleBasedReplacer and applies a default mapping rule. If the basename of the save file path is 'invoice', it sets a specific rule for 'basic.dataName'. After setting the rule, it writes the mapping rule to the specified file path and returns the result of the last applied rules.</p> <p>Parameters:</p> Name Type Description Default <code>replacement_rule</code> <code>dict[str, Any]</code> <p>The replacement rules to be applied.</p> required <code>save_file_path</code> <code>Union[str, Path]</code> <p>The file path where the replacement rules are saved.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The result of the last applied replacement rules.</p> <p>The function assumes the existence of certain structures in the replacement rules and file paths, and it specifically checks for a basename of 'invoice' to apply a predefined rule.</p> Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def apply_default_filename_mapping_rule(replacement_rule: dict[str, Any], save_file_path: str | Path) -&gt; dict[str, Any]:\n    \"\"\"Applies a default filename mapping rule based on the basename of the save file path.\n\n    This function creates an instance of RuleBasedReplacer and applies a default mapping rule. If the basename\n    of the save file path is 'invoice', it sets a specific rule for 'basic.dataName'. After setting the rule,\n    it writes the mapping rule to the specified file path and returns the result of the last applied rules.\n\n    Args:\n        replacement_rule (dict[str, Any]): The replacement rules to be applied.\n        save_file_path (Union[str, Path]): The file path where the replacement rules are saved.\n\n    Returns:\n        dict[str, Any]: The result of the last applied replacement rules.\n\n    The function assumes the existence of certain structures in the replacement rules and file paths, and it\n    specifically checks for a basename of 'invoice' to apply a predefined rule.\n    \"\"\"\n    if isinstance(save_file_path, str):\n        basename = os.path.splitext(os.path.basename(save_file_path))[0]\n    elif isinstance(save_file_path, Path):\n        basename = save_file_path.stem\n\n    replacer = RuleBasedReplacer()\n    if basename == \"invoice\":\n        replacer.set_rule(\"basic.dataName\", \"${filename}\")\n    replacer.write_rule(replacement_rule, save_file_path)\n\n    return replacer.last_apply_result\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#apply_magic_variable","title":"apply_magic_variable","text":"<p>Converts the magic variable ${filename}.</p> <p>If ${filename} is present in basic.dataName of invoice.json, it is replaced with the filename of rawfile_path.</p> <p>Parameters:</p> Name Type Description Default <code>invoice_path</code> <code>Union[str, Path]</code> <p>The file path of invoice.json.</p> required <code>rawfile_path</code> <code>Union[str, Path]</code> <p>The file path of the input data.</p> required <code>save_filepath</code> <code>Optional[Union[str, Path]]</code> <p>The file path to save to. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The content of invoice.json after replacement.</p> Source code in <code>src/rdetoolkit/invoicefile.py</code> <pre><code>def apply_magic_variable(invoice_path: str | Path, rawfile_path: str | Path, *, save_filepath: str | Path | None = None) -&gt; dict[str, Any]:\n    \"\"\"Converts the magic variable ${filename}.\n\n    If ${filename} is present in basic.dataName of invoice.json, it is replaced with the filename of rawfile_path.\n\n    Args:\n        invoice_path (Union[str, Path]): The file path of invoice.json.\n        rawfile_path (Union[str, Path]): The file path of the input data.\n        save_filepath (Optional[Union[str, Path]], optional): The file path to save to. Defaults to None.\n\n    Returns:\n        dict[str, Any]: The content of invoice.json after replacement.\n    \"\"\"\n    contents: dict[str, Any] = {}\n    if isinstance(invoice_path, str):\n        invoice_path = Path(invoice_path)\n    if isinstance(rawfile_path, str):\n        rawfile_path = Path(rawfile_path)\n    if save_filepath is None:\n        save_filepath = invoice_path\n\n    invoice_contents = read_from_json_file(invoice_path)\n    if invoice_contents.get(\"basic\", {}).get(\"dataName\") == \"${filename}\":\n        replacement_rule = {\"${filename}\": str(rawfile_path.name)}\n        contents = apply_default_filename_mapping_rule(replacement_rule, save_filepath)\n\n    return contents\n</code></pre>"},{"location":"rdetoolkit/modeproc/","title":"modeproc","text":"<p>In <code>modeproc.py</code>, processes for each input mode of the structuring process are defined.</p>"},{"location":"rdetoolkit/modeproc/#invoice_mode_process","title":"invoice_mode_process","text":"<p>Processes invoice-related data, applies dataset transformations using the provided callback function, and updates descriptions.</p> <p>This function performs several steps:</p> <ol> <li>Copies input files to the rawfile directory.</li> <li>Runs a custom dataset process function if provided.</li> <li>Copies images to the thumbnail directory.</li> <li>Replaces the placeholder '${filename}' in the invoice with the actual filename if necessary.</li> <li>Attempts to update descriptions with features, ignoring any errors during this step.</li> <li>Validates the metadata-def.json file.</li> <li>Validates the invoice file against the invoice schema.</li> </ol> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>str</code> <p>The workflow execution ID (run_id) is a unique identifier used to distinguish a specific execution of a workflow.</p> required <code>srcpaths</code> <code>RdeInputDirPaths</code> <p>Input paths for the source data.</p> required <code>resource_paths</code> <code>RdeOutputResourcePath</code> <p>Paths to the resources where data will be written or read from.</p> required <code>datasets_process_function</code> <code>_CallbackType</code> <p>A callback function that processes datasets. Defaults to None.</p> <code>None</code> <code>config</code> <code>Config</code> <p>Configuration instance for structured processing execution. Defaults to None.</p> required <p>Returns:</p> Name Type Description <code>WorkflowExecutionStatus</code> <code>WorkflowExecutionStatus</code> <p>An object containing the execution status of the workflow, including: - run_id (str): The unique identifier for the workflow execution, zero-padded to four digits. - title (str): A descriptive title for the workflow execution. - status (str): The status of the workflow execution, either \"success\" or \"failed\". - mode (str): The mode in which the workflow was executed, e.g., \"rdeformat\". - error_code (int | None): The error code if an error occurred, otherwise None. - error_message (str | None): The error message if an error occurred, otherwise None. - target (str): The target directory or file path related to the workflow execution.</p> Source code in <code>src/rdetoolkit/modeproc.py</code> <pre><code>def invoice_mode_process(\n    index: str,\n    srcpaths: RdeInputDirPaths,\n    resource_paths: RdeOutputResourcePath,\n    datasets_process_function: _CallbackType | None = None,\n) -&gt; WorkflowExecutionStatus:\n    \"\"\"Processes invoice-related data, applies dataset transformations using the provided callback function, and updates descriptions.\n\n    This function performs several steps:\n\n    1. Copies input files to the rawfile directory.\n    2. Runs a custom dataset process function if provided.\n    3. Copies images to the thumbnail directory.\n    4. Replaces the placeholder '${filename}' in the invoice with the actual filename if necessary.\n    5. Attempts to update descriptions with features, ignoring any errors during this step.\n    6. Validates the metadata-def.json file.\n    7. Validates the invoice file against the invoice schema.\n\n    Args:\n        index: The workflow execution ID (run_id) is a unique identifier used to distinguish a specific execution of a workflow.\n        srcpaths (RdeInputDirPaths): Input paths for the source data.\n        resource_paths (RdeOutputResourcePath): Paths to the resources where data will be written or read from.\n        datasets_process_function (_CallbackType, optional): A callback function that processes datasets. Defaults to None.\n        config (Config, optional): Configuration instance for structured processing execution. Defaults to None.\n\n    Raises:\n        Any exceptions raised by `datasets_process_function` will propagate upwards. Exceptions during the `update_description_with_features` step are caught and silently ignored.\n\n    Returns:\n        WorkflowExecutionStatus: An object containing the execution status of the workflow, including:\n            - run_id (str): The unique identifier for the workflow execution, zero-padded to four digits.\n            - title (str): A descriptive title for the workflow execution.\n            - status (str): The status of the workflow execution, either \"success\" or \"failed\".\n            - mode (str): The mode in which the workflow was executed, e.g., \"rdeformat\".\n            - error_code (int | None): The error code if an error occurred, otherwise None.\n            - error_message (str | None): The error message if an error occurred, otherwise None.\n            - target (str): The target directory or file path related to the workflow execution.\n    \"\"\"\n    if srcpaths.config.system.save_raw:\n        copy_input_to_rawfile(resource_paths.raw, resource_paths.rawfiles)\n\n    if srcpaths.config.system.save_nonshared_raw:\n        copy_input_to_rawfile(resource_paths.nonshared_raw, resource_paths.rawfiles)\n\n    # run custom dataset process\n    if datasets_process_function is not None:\n        datasets_process_function(srcpaths, resource_paths)\n\n    if srcpaths.config.system.save_thumbnail_image:\n        img2thumb.copy_images_to_thumbnail(resource_paths.thumbnail, resource_paths.main_image)\n\n    # rewriting support for ${filename} by default\n    if srcpaths.config.system.magic_variable:\n        apply_magic_variable(resource_paths.invoice.joinpath(\"invoice.json\"), resource_paths.rawfiles[0])\n\n    with contextlib.suppress(Exception):\n        update_description_with_features(\n            resource_paths,\n            resource_paths.invoice.joinpath(\"invoice.json\"),\n            srcpaths.tasksupport.joinpath(\"metadata-def.json\"),\n        )\n\n    # validate metadata.json\n    if resource_paths.meta.joinpath(\"metadata.json\").exists():\n        metadata_validate(resource_paths.meta.joinpath(\"metadata.json\"))\n\n    # validate invoice.schema.json / invoice.json\n    schema_path = srcpaths.tasksupport.joinpath(\"invoice.schema.json\")\n    invoice_validate(resource_paths.invoice.joinpath(\"invoice.json\"), schema_path)\n\n    invoice = InvoiceFile(resource_paths.invoice.joinpath(\"invoice.json\"))\n    basedir = resource_paths.rawfiles[0].parent if len(resource_paths.rawfiles) &gt; 0 else \"\"\n    return WorkflowExecutionStatus(\n        run_id=index,\n        title=invoice.invoice_obj.get(\"basic\", {}).get(\"dataName\", \"Invoice Mode Process\"),\n        status=\"success\",\n        mode=\"invoice\",\n        error_code=None,\n        error_message=None,\n        target=str(basedir),\n        stacktrace=None,\n    )\n</code></pre>"},{"location":"rdetoolkit/modeproc/#excel_invoice_mode_process","title":"excel_invoice_mode_process","text":"<p>Processes invoice data from an Excel file and applies dataset transformations using the provided callback function.</p> <p>This function performs several steps:</p> <ol> <li>Overwrites the Excel invoice file.</li> <li>Copies input files to the rawfile directory.</li> <li>Runs a custom dataset process function if provided.</li> <li>Replaces the placeholder '${filename}' in the invoice with the actual filename if necessary.</li> <li>Copies images to the thumbnail directory.</li> <li>Attempts to update descriptions with features, ignoring any errors during this step.</li> <li>Validates the metadata-def.json file.</li> <li>Validates the invoice file against the invoice schema.</li> </ol> <p>Parameters:</p> Name Type Description Default <code>srcpaths</code> <code>RdeInputDirPaths</code> <p>Input paths for the source data.</p> required <code>resource_paths</code> <code>RdeOutputResourcePath</code> <p>Paths to the resources where data will be written or read from.</p> required <code>excel_invoice_file</code> <code>Path</code> <p>Path to the source Excel invoice file.</p> required <code>idx</code> <code>int</code> <p>Index or identifier for the data being processed.</p> required <code>datasets_process_function</code> <code>_CallbackType</code> <p>A callback function that processes datasets. Defaults to None.</p> <code>None</code> <code>config</code> <code>Config</code> <p>Configuration instance for structured processing execution. Defaults to None.</p> required <p>Raises:</p> Type Description <code>StructuredError</code> <p>When encountering issues related to Excel invoice overwriting or during the validation steps.</p> <p>Returns:</p> Name Type Description <code>WorkflowExecutionStatus</code> <code>WorkflowExecutionStatus</code> <p>An object containing the execution status of the workflow, including: - run_id (str): The unique identifier for the workflow execution, zero-padded to four digits. - title (str): A descriptive title for the workflow execution. - status (str): The status of the workflow execution, either \"success\" or \"failed\". - mode (str): The mode in which the workflow was executed, e.g., \"rdeformat\". - error_code (int | None): The error code if an error occurred, otherwise None. - error_message (str | None): The error message if an error occurred, otherwise None. - target (str): The target directory or file path related to the workflow execution.</p> Source code in <code>src/rdetoolkit/modeproc.py</code> <pre><code>def excel_invoice_mode_process(\n    srcpaths: RdeInputDirPaths,\n    resource_paths: RdeOutputResourcePath,\n    excel_invoice_file: Path,\n    idx: int,\n    datasets_process_function: _CallbackType | None = None,\n) -&gt; WorkflowExecutionStatus:\n    \"\"\"Processes invoice data from an Excel file and applies dataset transformations using the provided callback function.\n\n    This function performs several steps:\n\n    1. Overwrites the Excel invoice file.\n    2. Copies input files to the rawfile directory.\n    3. Runs a custom dataset process function if provided.\n    4. Replaces the placeholder '${filename}' in the invoice with the actual filename if necessary.\n    5. Copies images to the thumbnail directory.\n    6. Attempts to update descriptions with features, ignoring any errors during this step.\n    7. Validates the metadata-def.json file.\n    8. Validates the invoice file against the invoice schema.\n\n    Args:\n        srcpaths (RdeInputDirPaths): Input paths for the source data.\n        resource_paths (RdeOutputResourcePath): Paths to the resources where data will be written or read from.\n        excel_invoice_file (Path): Path to the source Excel invoice file.\n        idx (int): Index or identifier for the data being processed.\n        datasets_process_function (_CallbackType, optional): A callback function that processes datasets. Defaults to None.\n        config (Config, optional): Configuration instance for structured processing execution. Defaults to None.\n\n    Raises:\n        StructuredError: When encountering issues related to Excel invoice overwriting or during the validation steps.\n        Any exceptions raised by `datasets_process_function` will propagate upwards. Exceptions during the `update_description_with_features` step are caught and silently ignored.\n\n    Returns:\n        WorkflowExecutionStatus: An object containing the execution status of the workflow, including:\n            - run_id (str): The unique identifier for the workflow execution, zero-padded to four digits.\n            - title (str): A descriptive title for the workflow execution.\n            - status (str): The status of the workflow execution, either \"success\" or \"failed\".\n            - mode (str): The mode in which the workflow was executed, e.g., \"rdeformat\".\n            - error_code (int | None): The error code if an error occurred, otherwise None.\n            - error_message (str | None): The error message if an error occurred, otherwise None.\n            - target (str): The target directory or file path related to the workflow execution.\n    \"\"\"\n    # rewriting the invoice\n    excel_invoice = ExcelInvoiceFile(excel_invoice_file)\n    try:\n        excel_invoice.overwrite(\n            resource_paths.invoice_org,\n            resource_paths.invoice.joinpath(\"invoice.json\"),\n            resource_paths.invoice_schema_json,\n            idx,\n        )\n    except StructuredError:\n        raise\n    except Exception as e:\n        emsg = f\"ERROR: failed to generate invoice file for data {idx:04d}\"\n        raise StructuredError(\n            emsg,\n            eobj=e,\n        ) from e\n\n    if srcpaths.config.system.save_raw:\n        copy_input_to_rawfile(resource_paths.raw, resource_paths.rawfiles)\n\n    if srcpaths.config.system.save_nonshared_raw:\n        copy_input_to_rawfile(resource_paths.nonshared_raw, resource_paths.rawfiles)\n\n    # run custom dataset process\n    if datasets_process_function is not None:\n        datasets_process_function(srcpaths, resource_paths)\n\n    # rewriting support for ${filename} by default\n    # Excelinvoice applies to file mode only, folder mode is not supported.\n    # FileMode has only one element in resource_paths.rawfiles.\n    if srcpaths.config.system.magic_variable:\n        apply_magic_variable(resource_paths.invoice.joinpath(\"invoice.json\"), resource_paths.rawfiles[0])\n\n    if srcpaths.config.system.save_thumbnail_image:\n        img2thumb.copy_images_to_thumbnail(resource_paths.thumbnail, resource_paths.main_image)\n\n    with contextlib.suppress(Exception):\n        update_description_with_features(\n            resource_paths,\n            resource_paths.invoice.joinpath(\"invoice.json\"),\n            srcpaths.tasksupport.joinpath(\"metadata-def.json\"),\n        )\n\n    # validate metadata.json\n    if resource_paths.meta.joinpath(\"metadata.json\").exists():\n        metadata_validate(resource_paths.meta.joinpath(\"metadata.json\"))\n\n    # validate invoice.schema.json / invoice.json\n    schema_path = srcpaths.tasksupport.joinpath(\"invoice.schema.json\")\n    invoice_validate(resource_paths.invoice.joinpath(\"invoice.json\"), schema_path)\n\n    invoice = InvoiceFile(resource_paths.invoice.joinpath(\"invoice.json\"))\n    basedir = resource_paths.rawfiles[0].parent if len(resource_paths.rawfiles) &gt; 0 else \"\"\n    return WorkflowExecutionStatus(\n        run_id=str(idx),\n        title=invoice.invoice_obj.get(\"basic\", {}).get(\"dataName\", \"Excelinvoice Mode Process\"),\n        status=\"success\",\n        mode=\"Excelinvoice\",\n        error_code=None,\n        error_message=None,\n        target=str(basedir),\n        stacktrace=None,\n    )\n</code></pre>"},{"location":"rdetoolkit/modeproc/#rdeformat_mode_process","title":"rdeformat_mode_process","text":"<p>Process the source data and apply specific transformations using the provided callback function.</p> <p>This function performs several steps:</p> <ol> <li>Overwrites the invoice file.</li> <li>Copies input files to the rawfile directory.</li> <li>Runs a custom dataset process function if provided.</li> <li>Copies images to the thumbnail directory.</li> <li>Updates descriptions with features, ignoring any errors during this step.</li> <li>Validates the metadata-def.json file.</li> <li>Validates the invoice file against the invoice schema.</li> </ol> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>str</code> <p>The workflow execution ID (run_id) is a unique identifier used to distinguish a specific execution of a workflow.</p> required <code>srcpaths</code> <code>RdeInputDirPaths</code> <p>Input paths for the source data.</p> required <code>resource_paths</code> <code>RdeOutputResourcePath</code> <p>Paths to the resources where data will be written or read from.</p> required <code>datasets_process_function</code> <code>_CallbackType</code> <p>A callback function that processes datasets. Defaults to None.</p> <code>None</code> <code>config</code> <code>Config</code> <p>Configuration instance for structured processing execution. Defaults to None.</p> required <p>Returns:</p> Name Type Description <code>WorkflowExecutionStatus</code> <code>WorkflowExecutionStatus</code> <p>An object containing the execution status of the workflow, including: - run_id (str): The unique identifier for the workflow execution, zero-padded to four digits. - title (str): A descriptive title for the workflow execution. - status (str): The status of the workflow execution, either \"success\" or \"failed\". - mode (str): The mode in which the workflow was executed, e.g., \"rdeformat\". - error_code (int | None): The error code if an error occurred, otherwise None. - error_message (str | None): The error message if an error occurred, otherwise None. - target (str): The target directory or file path related to the workflow execution.</p> Source code in <code>src/rdetoolkit/modeproc.py</code> <pre><code>def rdeformat_mode_process(\n    index: str,\n    srcpaths: RdeInputDirPaths,\n    resource_paths: RdeOutputResourcePath,\n    datasets_process_function: _CallbackType | None = None,\n) -&gt; WorkflowExecutionStatus:\n    \"\"\"Process the source data and apply specific transformations using the provided callback function.\n\n    This function performs several steps:\n\n    1. Overwrites the invoice file.\n    2. Copies input files to the rawfile directory.\n    3. Runs a custom dataset process function if provided.\n    4. Copies images to the thumbnail directory.\n    5. Updates descriptions with features, ignoring any errors during this step.\n    6. Validates the metadata-def.json file.\n    7. Validates the invoice file against the invoice schema.\n\n    Args:\n        index: The workflow execution ID (run_id) is a unique identifier used to distinguish a specific execution of a workflow.\n        srcpaths (RdeInputDirPaths): Input paths for the source data.\n        resource_paths (RdeOutputResourcePath): Paths to the resources where data will be written or read from.\n        datasets_process_function (_CallbackType, optional): A callback function that processes datasets. Defaults to None.\n        config (Config, optional): Configuration instance for structured processing execution. Defaults to None.\n\n    Raises:\n        Any exceptions raised by `datasets_process_function` or during the validation steps will propagate upwards. Exceptions during the `update_description_with_features` step are caught and silently ignored.\n\n    Returns:\n        WorkflowExecutionStatus: An object containing the execution status of the workflow, including:\n            - run_id (str): The unique identifier for the workflow execution, zero-padded to four digits.\n            - title (str): A descriptive title for the workflow execution.\n            - status (str): The status of the workflow execution, either \"success\" or \"failed\".\n            - mode (str): The mode in which the workflow was executed, e.g., \"rdeformat\".\n            - error_code (int | None): The error code if an error occurred, otherwise None.\n            - error_message (str | None): The error message if an error occurred, otherwise None.\n            - target (str): The target directory or file path related to the workflow execution.\n    \"\"\"\n    basedir = resource_paths.rawfiles[0].parent if len(resource_paths.rawfiles) &gt; 0 else \"\"\n\n    # rewriting the invoice\n    invoice_dst_filepath = resource_paths.invoice.joinpath(\"invoice.json\")\n    InvoiceFile.copy_original_invoice(resource_paths.invoice_org, invoice_dst_filepath)\n    copy_input_to_rawfile_for_rdeformat(resource_paths)\n    invoice = InvoiceFile(invoice_dst_filepath)\n\n    # run custom dataset process\n    if datasets_process_function is not None:\n        datasets_process_function(srcpaths, resource_paths)\n\n    if srcpaths.config.system.save_thumbnail_image:\n        img2thumb.copy_images_to_thumbnail(\n            resource_paths.thumbnail,\n            resource_paths.main_image,\n        )\n\n    with contextlib.suppress(Exception):\n        update_description_with_features(resource_paths, invoice_dst_filepath, srcpaths.tasksupport.joinpath(\"metadata-def.json\"))\n\n    # validate metadata.json\n    if resource_paths.meta.joinpath(\"metadata.json\").exists():\n        metadata_validate(resource_paths.meta.joinpath(\"metadata.json\"))\n\n    # validate invoice.schema.json / invoice.json\n    schema_path = srcpaths.tasksupport.joinpath(\"invoice.schema.json\")\n    invoice_validate(invoice_dst_filepath, schema_path)\n\n    return WorkflowExecutionStatus(\n        run_id=index,\n        title=invoice.invoice_obj.get(\"basic\", {}).get(\"dataName\", \"RDEFormat Mode Process\"),\n        status=\"success\",\n        mode=\"rdeformat\",\n        error_code=None,\n        error_message=None,\n        target=str(basedir),\n        stacktrace=None,\n    )\n</code></pre>"},{"location":"rdetoolkit/modeproc/#copy_input_to_rawfile_for_rdeformat","title":"copy_input_to_rawfile_for_rdeformat","text":"<p>Copy the input raw files to their respective directories based on the file's part names.</p> <p>This function scans through the parts of each file's path in <code>resource_paths.rawfiles</code>. If the file path contains a directory name listed in the <code>directories</code> dict, the file will be copied to the corresponding directory.</p> <p>Parameters:</p> Name Type Description Default <code>resource_paths</code> <code>RdeOutputResourcePath</code> <p>Paths to the resources where data will be written or read from.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/rdetoolkit/modeproc.py</code> <pre><code>def copy_input_to_rawfile_for_rdeformat(resource_paths: RdeOutputResourcePath) -&gt; None:\n    \"\"\"Copy the input raw files to their respective directories based on the file's part names.\n\n    This function scans through the parts of each file's path in `resource_paths.rawfiles`. If the file path\n    contains a directory name listed in the `directories` dict, the file will be copied to the corresponding\n    directory.\n\n    Args:\n        resource_paths (RdeOutputResourcePath): Paths to the resources where data will be written or read from.\n\n    Returns:\n        None\n    \"\"\"\n    directories = {\n        \"raw\": resource_paths.raw,\n        \"main_image\": resource_paths.main_image,\n        \"other_image\": resource_paths.other_image,\n        \"meta\": resource_paths.meta,\n        \"structured\": resource_paths.struct,\n        \"logs\": resource_paths.logs,\n        \"nonshared_raw\": resource_paths.nonshared_raw,\n    }\n    for f in resource_paths.rawfiles:\n        for dir_name, directory in directories.items():\n            if dir_name in f.parts:\n                shutil.copy(f, os.path.join(str(directory), f.name))\n                break\n</code></pre>"},{"location":"rdetoolkit/modeproc/#multifile_mode_process","title":"multifile_mode_process","text":"<p>Processes multiple source files and applies transformations using the provided callback function.</p> <p>This function performs several steps:</p> <ol> <li>Overwrites the invoice file.</li> <li>Copies input files to the rawfile directory.</li> <li>Runs a custom dataset process function if provided.</li> <li>Replaces the placeholder '${filename}' in the invoice with the actual filename if necessary.</li> <li>Copies images to the thumbnail directory.</li> <li>Attempts to update descriptions with features, ignoring any errors during this step.</li> <li>Validates the metadata-def.json file.</li> <li>Validates the invoice file against the invoice schema.</li> </ol> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>str</code> <p>The workflow execution ID (run_id) is a unique identifier used to distinguish a specific execution of a workflow.</p> required <code>srcpaths</code> <code>RdeInputDirPaths</code> <p>Input paths for the source data.</p> required <code>resource_paths</code> <code>RdeOutputResourcePath</code> <p>Paths to the resources where data will be written or read from.</p> required <code>datasets_process_function</code> <code>_CallbackType</code> <p>A callback function that processes datasets. Defaults to None.</p> <code>None</code> <code>config</code> <code>Config</code> <p>Configuration instance for structured processing execution. Defaults to None.</p> required <p>Returns:</p> Name Type Description <code>WorkflowExecutionStatus</code> <code>WorkflowExecutionStatus</code> <p>An object containing the execution status of the workflow, including: - run_id (str): The unique identifier for the workflow execution, zero-padded to four digits. - title (str): A descriptive title for the workflow execution. - status (str): The status of the workflow execution, either \"success\" or \"failed\". - mode (str): The mode in which the workflow was executed, e.g., \"rdeformat\". - error_code (int | None): The error code if an error occurred, otherwise None. - error_message (str | None): The error message if an error occurred, otherwise None. - target (str): The target directory or file path related to the workflow execution.</p> Source code in <code>src/rdetoolkit/modeproc.py</code> <pre><code>def multifile_mode_process(\n    index: str,\n    srcpaths: RdeInputDirPaths,\n    resource_paths: RdeOutputResourcePath,\n    datasets_process_function: _CallbackType | None = None,\n) -&gt; WorkflowExecutionStatus:\n    \"\"\"Processes multiple source files and applies transformations using the provided callback function.\n\n    This function performs several steps:\n\n    1. Overwrites the invoice file.\n    2. Copies input files to the rawfile directory.\n    3. Runs a custom dataset process function if provided.\n    4. Replaces the placeholder '${filename}' in the invoice with the actual filename if necessary.\n    5. Copies images to the thumbnail directory.\n    6. Attempts to update descriptions with features, ignoring any errors during this step.\n    7. Validates the metadata-def.json file.\n    8. Validates the invoice file against the invoice schema.\n\n    Args:\n        index: The workflow execution ID (run_id) is a unique identifier used to distinguish a specific execution of a workflow.\n        srcpaths (RdeInputDirPaths): Input paths for the source data.\n        resource_paths (RdeOutputResourcePath): Paths to the resources where data will be written or read from.\n        datasets_process_function (_CallbackType, optional): A callback function that processes datasets. Defaults to None.\n        config (Config, optional): Configuration instance for structured processing execution. Defaults to None.\n\n    Raises:\n        Any exceptions raised by `datasets_process_function` or during the validation steps will propagate upwards. Exceptions during the `update_description_with_features` step are caught and silently ignored.\n\n    Returns:\n        WorkflowExecutionStatus: An object containing the execution status of the workflow, including:\n            - run_id (str): The unique identifier for the workflow execution, zero-padded to four digits.\n            - title (str): A descriptive title for the workflow execution.\n            - status (str): The status of the workflow execution, either \"success\" or \"failed\".\n            - mode (str): The mode in which the workflow was executed, e.g., \"rdeformat\".\n            - error_code (int | None): The error code if an error occurred, otherwise None.\n            - error_message (str | None): The error message if an error occurred, otherwise None.\n            - target (str): The target directory or file path related to the workflow execution.\n    \"\"\"\n    basedir = resource_paths.rawfiles[0].parent if len(resource_paths.rawfiles) &gt; 0 else \"\"\n    invoice_dst_filepath = resource_paths.invoice.joinpath(\"invoice.json\")\n    InvoiceFile.copy_original_invoice(resource_paths.invoice_org, invoice_dst_filepath)\n    invoice = InvoiceFile(invoice_dst_filepath)\n\n    if srcpaths.config.system.save_raw:\n        copy_input_to_rawfile(resource_paths.raw, resource_paths.rawfiles)\n\n    if srcpaths.config.system.save_nonshared_raw:\n        copy_input_to_rawfile(resource_paths.nonshared_raw, resource_paths.rawfiles)\n\n    # run custom dataset process\n    if datasets_process_function is not None:\n        datasets_process_function(srcpaths, resource_paths)\n\n    # rewriting support for ${filename} by default\n    if srcpaths.config.system.magic_variable:\n        apply_magic_variable(resource_paths.invoice.joinpath(\"invoice.json\"), resource_paths.rawfiles[0])\n\n    if srcpaths.config.system.save_thumbnail_image:\n        img2thumb.copy_images_to_thumbnail(resource_paths.thumbnail, resource_paths.main_image)\n\n    with contextlib.suppress(Exception):\n        update_description_with_features(resource_paths, invoice_dst_filepath, srcpaths.tasksupport.joinpath(\"metadata-def.json\"))\n\n    # validate metadata.json\n    if resource_paths.meta.joinpath(\"metadata.json\").exists():\n        metadata_validate(resource_paths.meta.joinpath(\"metadata.json\"))\n\n    # validate invoice.schema.json / invoice.json\n    schema_path = srcpaths.tasksupport.joinpath(\"invoice.schema.json\")\n    invoice_validate(invoice_dst_filepath, schema_path)\n\n    return WorkflowExecutionStatus(\n        run_id=index,\n        title=invoice.invoice_obj.get(\"basic\", {}).get(\"dataName\", \"MultiDataTile Mode Process\"),\n        status=\"success\",\n        mode=\"MultiDataTile\",\n        error_code=None,\n        error_message=None,\n        target=str(basedir),\n        stacktrace=None,\n    )\n</code></pre>"},{"location":"rdetoolkit/modeproc/#copy_input_to_rawfile","title":"copy_input_to_rawfile","text":"<p>Copy the input raw files to the specified directory.</p> <p>This function takes a list of raw file paths and copies each file to the given <code>raw_dir_path</code>.</p> <p>Parameters:</p> Name Type Description Default <code>raw_dir_path</code> <code>Path</code> <p>The directory path where the raw files will be copied to.</p> required <code>raw_files</code> <code>tuple[Path, ...]</code> <p>A tuple of file paths that need to be copied.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/rdetoolkit/modeproc.py</code> <pre><code>def copy_input_to_rawfile(raw_dir_path: Path, raw_files: tuple[Path, ...]) -&gt; None:\n    \"\"\"Copy the input raw files to the specified directory.\n\n    This function takes a list of raw file paths and copies each file to the given `raw_dir_path`.\n\n    Args:\n        raw_dir_path (Path): The directory path where the raw files will be copied to.\n        raw_files (tuple[Path, ...]): A tuple of file paths that need to be copied.\n\n    Returns:\n        None\n    \"\"\"\n    for f in raw_files:\n        shutil.copy(f, os.path.join(raw_dir_path, f.name))\n</code></pre>"},{"location":"rdetoolkit/modeproc/#selected_input_checker","title":"selected_input_checker","text":"<p>Determine the appropriate input file checker based on the provided format flags and source paths.</p> <p>The function scans the source paths to identify the type of input files present. Based on the file type and format flags provided, it instantiates and returns the appropriate checker.</p> <p>Parameters:</p> Name Type Description Default <code>src_paths</code> <code>RdeInputDirPaths</code> <p>Paths for the source input files.</p> required <code>unpacked_dir_path</code> <code>Path</code> <p>Directory path for unpacked files.</p> required <code>mode</code> <code>Optional[str]</code> <p>Format flags indicating which checker mode is enabled.</p> required <p>Returns:</p> Name Type Description <code>IInputFileChecker</code> <code>IInputFileChecker</code> <p>An instance of the appropriate input file checker based on the provided criteria.</p> Source code in <code>src/rdetoolkit/modeproc.py</code> <pre><code>def selected_input_checker(src_paths: RdeInputDirPaths, unpacked_dir_path: Path, mode: str | None) -&gt; IInputFileChecker:\n    \"\"\"Determine the appropriate input file checker based on the provided format flags and source paths.\n\n    The function scans the source paths to identify the type of input files present. Based on the file type\n    and format flags provided, it instantiates and returns the appropriate checker.\n\n    Args:\n        src_paths (RdeInputDirPaths): Paths for the source input files.\n        unpacked_dir_path (Path): Directory path for unpacked files.\n        mode (Optional[str]): Format flags indicating which checker mode is enabled.\n\n    Returns:\n        IInputFileChecker: An instance of the appropriate input file checker based on the provided criteria.\n\n    Raises:\n        None, but callers should be aware that downstream exceptions can be raised by individual checker initializations.\n    \"\"\"\n    input_files = list(src_paths.inputdata.glob(\"*\"))\n    excel_invoice_files = [f for f in input_files if f.suffix.lower() in [\".xls\", \".xlsx\"] and f.stem.endswith(\"_excel_invoice\")]\n    mode = mode.lower() if mode is not None else \"\"\n    if mode == \"rdeformat\":\n        return RDEFormatChecker(unpacked_dir_path)\n    if mode == \"multidatatile\":\n        return MultiFileChecker(unpacked_dir_path)\n    if excel_invoice_files:\n        return ExcelInvoiceChecker(unpacked_dir_path)\n    return InvoiceChecker(unpacked_dir_path)\n</code></pre>"},{"location":"rdetoolkit/rde2util/","title":"rde2util","text":"<p><code>rde2util</code>\u3067\u306f\u3001\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"rdetoolkit/rde2util/#meta","title":"Meta","text":"<p>This class initializes metadata from a definition file, with existing metadata loading not currently supported.</p> Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>class Meta:\n    \"\"\"This class initializes metadata from a definition file, with existing metadata loading not currently supported.\"\"\"\n\n    def __init__(\n        self,\n        metadef_filepath: RdeFsPath,\n        *,\n        metafilepath: RdeFsPath | None = None,\n    ):\n        \"\"\"Initializes the Meta class.\n\n        This method supports either loading existing metadata (if `metafilepath` is specified)\n        or creating new metadata (if `metaDefFilePath` is specified). Currently, the functionality\n        to load existing metadata is not supported and will raise an error.\n\n        Args:\n            metadef_filepath (RdeFsPath): The file path for metadata definition, used for creating new metadata.\n            metafilepath (Optional[RdeFsPath]): The file path for existing metadata, intended for future support\n                                                in loading existing metadata. Currently not supported.\n\n        Raises:\n            StructuredError: If `metafilepath` is not None, as loading existing metadata is not supported yet.\n\n        Note:\n            The `metaDefFilterFunc` attribute is currently not in use and has been removed.\n\n        Attributes:\n            metaConst (dict[str, MetaItem]): A dictionary for constant metadata.\n            metaVar (list[dict[str, MetaItem]]): A list of dictionaries for variable metadata.\n            actions (list[str]): A list of actions.\n            referedmap (dict[str, Optional[Union[str, list]]]): A dictionary mapping references.\n            metaDef (dict[str, MetadataDefJson]): A dictionary for metadata definition, read from the metadata definition file.\n        \"\"\"\n        self.metaConst: dict[str, MetaItem] = {}\n        self.metaVar: list[dict[str, MetaItem]] = []\n        self.actions: list[str] = []\n        self.referedmap: dict[str, str | list | None] = {}\n        if metafilepath is not None:\n            emsg = \"ERROR: not supported yet\"\n            raise StructuredError(emsg)\n        self.metaDef: dict[str, MetadataDefJson] = self._read_metadef_file(metadef_filepath)\n\n    def _read_metadef_file(self, metadef_filepath: RdeFsPath) -&gt; dict[str, MetadataDefJson]:  # pragma: no cover\n        \"\"\"Reads the metadata definition file metadata-def.json.\n\n        Args:\n            metadef_filepath (RdeFsPath): The path of the metadata definition file.\n\n        Returns:\n            dict[str, MetadataDefJson]: Returns metadata-def.json as a dictionary.\n\n        Caution:\n            Unclear whether the processing of actions and units after l262 is currently necessary.\n        \"\"\"\n        if metadef_filepath:\n            enc = CharDecEncoding.detect_text_file_encoding(metadef_filepath)\n            with open(metadef_filepath, encoding=enc) as f:\n                _tmp_metadef = json.load(f)\n        else:\n            _tmp_metadef = {}\n\n        for _, vdef in _tmp_metadef.items():\n            if vdef.get(\"action\"):\n                self.actions.append(vdef.get(\"action\"))\n            if vdef.get(\"unit\"):\n                outunit = vdef.get(\"unit\")\n                if not outunit.startswith(\"$\"):\n                    continue\n                keyref = outunit[1:]\n                self.referedmap[keyref] = None\n        return _tmp_metadef\n\n    def assign_vals(\n        self,\n        entry_dict_meta: MetaType | RepeatedMetaType,\n        *,\n        ignore_empty_strvalue: bool = True,\n    ) -&gt; dict[str, set]:\n        \"\"\"Register the value of metadata.\n\n        Perform validation and casting on the input metadata value in the specified format, and register it.\n        The target format is validated using the key, format, and Unit specified in metadata-def.json.\n\n        Args:\n            entry_dict_meta (EntryMetaData): metadata(key/value) to register\n            ignore_empty_strvalue (bool, optional): When ignore_empty_strvalue is True,\n            even if the metadata value is an empty string, it is registered as a meta.\n            However, if false, an empty string is not registered as a meta. Defaults to True.\n\n        Raises:\n            StructuredError: an exception is raised when the 'action' is included in the metadata-def.json.\n\n        Returns:\n            dict[str, set]: The key that could be registered as metadata is added to the object ret for storing the registration result.\n\n        Caution!\n        / Items with a metadata value of None to be registered are excluded from assignment.\n        \"\"\"\n        ret = {\"assigned\": set()}  # type: ignore[var-annotated]\n\n        # Register referred values in the reference table for actions and referred units (raw names)\n        self.__register_refered_values(entry_dict_meta)\n\n        for kdef, vdef in self.metaDef.items():\n            keysrc = self.__get_source_key(kdef, vdef, entry_dict_meta)\n            if keysrc is None:\n                continue\n\n            vsrc = entry_dict_meta[keysrc]\n            _vsrc = self.__convert_to_str(vsrc)\n\n            if kdef:\n                # Register referred values in the reference table for actions and referred units (meta names)\n                self.__registerd_refered_table(kdef, _vsrc)\n\n            self.__process_meta_value(kdef, vdef, _vsrc, ignore_empty_strvalue)\n            ret[\"assigned\"].add(keysrc)\n            # Do not break because a single value may be assigned to multiple places\n\n        ret[\"unknown\"] = {k for k in entry_dict_meta if k not in ret[\"assigned\"]}\n        return ret\n\n    def __register_refered_values(self, entry_dict_meta: MetaType | RepeatedMetaType) -&gt; None:\n        \"\"\"Register referred values in the reference table.\n\n        This method converts the values from the input metadata dictionary to strings\n        and registers them in the referred values table using the original keys.\n\n        Args:\n            entry_dict_meta (Union[MetaType, RepeatedMetaType]): The metadata dictionary\n            containing key-value pairs to be registered.\n\n        \"\"\"\n        for keysrc, vsrc in entry_dict_meta.items():\n            _vsrc = self.__convert_to_str(vsrc)\n            self.__registerd_refered_table(keysrc, _vsrc)\n\n    def __get_source_key(self, kdef: str, vdef: MetadataDefJson, entry_dict_meta: MetaType | RepeatedMetaType) -&gt; str | None:\n        keysrc = kdef\n        if kdef not in entry_dict_meta and \"originalName\" in vdef:\n            keysrc = vdef[\"originalName\"]\n        if keysrc not in entry_dict_meta:\n            return None\n        return keysrc\n\n    def __process_meta_value(self, kdef: str, vdef: MetadataDefJson, _vsrc: str | list[str], ignore_empty_strvalue: bool) -&gt; None:\n        if vdef.get(\"action\"):\n            emsg = \"ERROR: this meta value should set by action\"\n            raise StructuredError(emsg)\n\n        if vdef.get(\"variable\"):\n            self.__set_variable_metadata(kdef, _vsrc, vdef, ignore_empty_strvalue)\n        else:\n            if _vsrc is None or (_vsrc == \"\" and ignore_empty_strvalue):\n                return\n            self.__set_const_metadata(kdef, _vsrc, vdef)\n\n    def _process_unit(self, vobj: dict[str, Any], idx: int | None) -&gt; None:  # pragma: no cover\n        _unit = vobj.get(\"unit\", \"\")\n        # \"unit\"\u306e\u3046\u3061\u3001\"$\"\u304b\u3089\u59cb\u307e\u308b\u4ed6\u30ad\u30fc\u53c2\u7167\u3092\u5b9f\u969b\u306b\u7f6e\u304d\u63db\u3048\u308b\n        if _unit.startswith(\"$\"):\n            srckey = _unit[1:]\n            srcval = self.referedmap[srckey]\n            if srcval is None:\n                # \u53c2\u7167\u5148\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u5358\u4f4d\u672a\u8a2d\u5b9a\u306e\u72b6\u614b\u3068\u3059\u308b\n                del vobj[\"unit\"]\n            elif isinstance(srcval, str):\n                vobj[\"unit\"] = srcval\n            elif idx is not None:\n                vobj[\"unit\"] = srcval[idx]\n\n    def _process_action(self, vobj: dict[str, Any], k: str, idx: int | None) -&gt; None:  # pragma: no cover\n        # action\u306e\u51e6\u7406\n        stract = self.metaDef[k].get(\"action\")\n        if not stract:\n            return\n\n        for srckey, srcval in self.referedmap.items():\n            if srckey not in stract:\n                continue\n            if idx is not None:\n                realval = srcval[idx] if isinstance(srcval, list) else srcval\n                stract = stract.replace(srckey, f'\"{realval}\"' if isinstance(realval, str) else str(realval))\n        vobj[\"value\"] = eval(stract)\n\n    def __convert_to_str(self, value: str | float | list) -&gt; str | list[str]:\n        \"\"\"Convert the given value to string or list of strings.\"\"\"\n        if isinstance(value, (str, int, float, bool)):\n            return str(value)\n        if isinstance(value, list):\n            return list(map(str, value))\n        return \"\"\n\n    def writefile(self, meta_filepath: str, enc: str = \"utf_8\") -&gt; dict[str, Any]:\n        \"\"\"Writes the metadata to a file after processing units and actions.\n\n        This method serializes the metadata into JSON format and writes it to the specified file.\n        It processes units and actions for each metadata entry, sorts items according to 'metaDef',\n        and outputs the sorted data to a file.\n\n        The method also returns a list of keys from 'metaDef' that were not assigned values in the output.\n\n        Args:\n            meta_filepath (str): The file path where the metadata will be written.\n            enc (str, optional): The encoding for the output file. Default is \"utf_8\".\n\n        Returns:\n            dict: A dictionary with keys 'assigned' and 'unknown'.\n                'assigned' contains the set of keys that were assigned values,\n                and 'unknown' contains the set of keys from 'metaDef' that were not used.\n\n        Raises:\n            CustomException: If the metadata generation fails, with a custom error message and error code.\n        \"\"\"\n        outdict = json.loads(json.dumps({\"constant\": self.metaConst, \"variable\": self.metaVar}))\n\n        for idx, kvdict in [(None, outdict[\"constant\"])] + list(enumerate(outdict[\"variable\"])):\n            for k, vobj in kvdict.items():\n                self._process_unit(vobj, idx)\n                self._process_action(vobj, k, idx)\n\n        # \u9805\u76ee\u3092metaDef\u306b\u5f93\u3063\u3066\u30bd\u30fc\u30c8\n        outdict[\"constant\"] = self.__sort_by_metadef(outdict[\"constant\"])\n        outdict[\"variable\"] = [self.__sort_by_metadef(dvOrg) for dvOrg in outdict[\"variable\"]]\n\n        # \u30d5\u30a1\u30a4\u30eb\u51fa\u529b\n        with open(meta_filepath, \"w\", encoding=enc) as fout:\n            json.dump(outdict, fout, indent=4, ensure_ascii=False)\n\n        # metaDef\u306e\u3046\u3061\u5024\u306e\u5165\u3089\u306a\u304b\u3063\u305f\u30ad\u30fc\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n        assigned_keys = set(outdict[\"constant\"].keys()).union(*(dv.keys() for dv in outdict[\"variable\"]))\n        unkown_keys = {k for k in self.metaDef if k not in assigned_keys}\n\n        return {\"assigned\": assigned_keys, \"unknown\": unkown_keys}\n\n    def __sort_by_metadef(self, data_dict: dict[str, Any]) -&gt; dict[str, Any]:\n        return {k: data_dict[k] for k in self.metaDef if k in data_dict}\n\n    def __registerd_refered_table(self, key: str, value: str | list[str]) -&gt; None:  # pragma: no cover\n        \"\"\"Registers the referenced value in the referred value table for actions and referred units, using the raw name.\n\n        This method updates the referred value table with the provided key and value. If the key already exists in the table,\n        its value is replaced. If the key does not exist and is found within any of the actions, it is added to the table.\n\n        Args:\n            key (str): The key to be registered in the referred value table. Typically represents an action or unit name.\n            value (Union[str, list[str]]): The value to be registered in the referred value table. This can be a single string or a list of strings,\n                representing the raw names to be associated with the key.\n\n        Returns:\n            None: This method does not return anything. It updates the referredmap attribute of the class.\n\n        Note:\n            This method is intended for internal use and not covered by automated testing (as indicated by 'pragma: no cover').\n        \"\"\"\n        if key in self.referedmap:\n            self.referedmap[key] = deepcopy(value)\n        else:\n            for stract in self.actions:\n                if key not in stract:\n                    continue\n                self.referedmap[key] = deepcopy(value)\n\n    def __set_variable_metadata(\n        self,\n        key: str,\n        metavalues: str | list[str],\n        metadefvalue: MetadataDefJson,\n        opt_ignore_emptystr: bool,\n    ) -&gt; None:  # pragma: no cover\n        outtype = metadefvalue[\"schema\"].get(\"type\")\n        outfmt = metadefvalue[\"schema\"].get(\"format\")\n        orgtype = metadefvalue.get(\"originalType\")\n        outunit = metadefvalue.get(\"unit\")\n        if len(self.metaVar) &lt; len(metavalues):\n            self.metaVar += [{} for _ in range(len(metavalues) - len(self.metaVar))]\n        for idx, val_src_element in enumerate(metavalues):\n            if val_src_element is None:\n                continue\n            if val_src_element == \"\" and opt_ignore_emptystr:\n                continue\n            self.metaVar[idx][key] = self._metadata_validation(val_src_element, outtype, outfmt, orgtype, outunit)\n\n    def __set_const_metadata(\n        self,\n        key: str,\n        metavalue: str | list[str],\n        metadefvalue: MetadataDefJson,\n    ) -&gt; None:  # pragma: no cover\n        outtype = metadefvalue[\"schema\"].get(\"type\")\n        outfmt = metadefvalue[\"schema\"].get(\"format\")\n        orgtype = metadefvalue.get(\"originalType\")\n        outunit = metadefvalue.get(\"unit\")\n        if not isinstance(metavalue, list):\n            self.metaConst[key] = self._metadata_validation(metavalue, outtype, outfmt, orgtype, outunit)\n\n    def _metadata_validation(\n        self,\n        vsrc: str,\n        outtype: str | None,\n        outfmt: str | None,\n        orgtype: str | None,\n        outunit: str | None,\n    ) -&gt; dict[str, bool | int | float | str]:  # pragma: no cover\n        \"\"\"Casts the input metadata to the specified format and performs validation to check.\n\n        if it can be cast to the specified data type. The formats for various metadata are described in metadata-def.json.\n\n        Args:\n            vsrc (str): The value of the input metadata.\n            outtype (Optional[str]): The data type of the converted metadata.\n            outfmt (Optional[str]): The format of the converted metadata.\n            orgtype (Optional[str]): The data type of the original metadata.\n            outunit (Optional[str]): The unit of the converted metadata.\n\n        Returns:\n            dict[str, Union[bool, int, float, str]]: Returns the conversion result in the form of metadata for metadata.json.\n\n        Note:\n            original func: _vDict()\n        \"\"\"\n        vsrc = vsrc.strip()\n\n        if orgtype is None:\n            _casted_value = castval(vsrc, outtype, outfmt)\n        elif orgtype in [\"integer\", \"number\"]:\n            # \u5358\u4f4d\u4ed8\u304d\u6587\u5b57\u5217\u304c\u6e21\u3055\u308c\u3066\u3082\u5358\u4f4d\u306e\u4ee3\u5165\u306f\u672c\u95a2\u6570\u5185\u3067\u306f\u6271\u308f\u306a\u3044\u3002\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5225\u9014\u4ee3\u5165\u3059\u308b\u4e8b\u3002\n            valpair = _split_value_unit(vsrc)\n            vstr = valpair.value\n            # \u89e3\u91c8\u53ef\u80fd\u304b\u30c1\u30a7\u30c3\u30af\u3002\u4e0d\u53ef\u80fd\u3060\u3063\u305f\u5834\u5408\u306f\u4f8b\u5916\u30b9\u30ed\u30fc\u3055\u308c\u308b\u305f\u3081\u3001\n            # \u4f8b\u5916\u306a\u304f\u51e6\u7406\u7d42\u4e86\u3067\u304d\u308b\u304b\u306e\u307f\u306b\u8208\u5473\u304c\u3042\u308b\n            _casted_value = castval(vstr, orgtype, outfmt)\n        else:\n            vstr = vsrc\n            # \u89e3\u91c8\u53ef\u80fd\u304b\u30c1\u30a7\u30c3\u30af\u3002\u4e0d\u53ef\u80fd\u3060\u3063\u305f\u5834\u5408\u306f\u4f8b\u5916\u30b9\u30ed\u30fc\u3055\u308c\u308b\u305f\u3081\u3001\n            # \u4f8b\u5916\u306a\u304f\u51e6\u7406\u7d42\u4e86\u3067\u304d\u308b\u304b\u306e\u307f\u306b\u8208\u5473\u304c\u3042\u308b\n            _casted_value = castval(vstr, orgtype, outfmt)\n\n        if outunit:\n            return {\n                \"value\": _casted_value,\n                \"unit\": outunit,\n            }\n        return {\"value\": _casted_value}\n</code></pre>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta.assign_vals","title":"<code>assign_vals(entry_dict_meta, *, ignore_empty_strvalue=True)</code>","text":"<p>Register the value of metadata.</p> <p>Perform validation and casting on the input metadata value in the specified format, and register it. The target format is validated using the key, format, and Unit specified in metadata-def.json.</p> <p>Parameters:</p> Name Type Description Default <code>entry_dict_meta</code> <code>EntryMetaData</code> <p>metadata(key/value) to register</p> required <code>ignore_empty_strvalue</code> <code>bool</code> <p>When ignore_empty_strvalue is True,</p> <code>True</code> <p>Raises:</p> Type Description <code>StructuredError</code> <p>an exception is raised when the 'action' is included in the metadata-def.json.</p> <p>Returns:</p> Type Description <code>dict[str, set]</code> <p>dict[str, set]: The key that could be registered as metadata is added to the object ret for storing the registration result.</p> <p>Caution! / Items with a metadata value of None to be registered are excluded from assignment.</p> Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>def assign_vals(\n    self,\n    entry_dict_meta: MetaType | RepeatedMetaType,\n    *,\n    ignore_empty_strvalue: bool = True,\n) -&gt; dict[str, set]:\n    \"\"\"Register the value of metadata.\n\n    Perform validation and casting on the input metadata value in the specified format, and register it.\n    The target format is validated using the key, format, and Unit specified in metadata-def.json.\n\n    Args:\n        entry_dict_meta (EntryMetaData): metadata(key/value) to register\n        ignore_empty_strvalue (bool, optional): When ignore_empty_strvalue is True,\n        even if the metadata value is an empty string, it is registered as a meta.\n        However, if false, an empty string is not registered as a meta. Defaults to True.\n\n    Raises:\n        StructuredError: an exception is raised when the 'action' is included in the metadata-def.json.\n\n    Returns:\n        dict[str, set]: The key that could be registered as metadata is added to the object ret for storing the registration result.\n\n    Caution!\n    / Items with a metadata value of None to be registered are excluded from assignment.\n    \"\"\"\n    ret = {\"assigned\": set()}  # type: ignore[var-annotated]\n\n    # Register referred values in the reference table for actions and referred units (raw names)\n    self.__register_refered_values(entry_dict_meta)\n\n    for kdef, vdef in self.metaDef.items():\n        keysrc = self.__get_source_key(kdef, vdef, entry_dict_meta)\n        if keysrc is None:\n            continue\n\n        vsrc = entry_dict_meta[keysrc]\n        _vsrc = self.__convert_to_str(vsrc)\n\n        if kdef:\n            # Register referred values in the reference table for actions and referred units (meta names)\n            self.__registerd_refered_table(kdef, _vsrc)\n\n        self.__process_meta_value(kdef, vdef, _vsrc, ignore_empty_strvalue)\n        ret[\"assigned\"].add(keysrc)\n        # Do not break because a single value may be assigned to multiple places\n\n    ret[\"unknown\"] = {k for k in entry_dict_meta if k not in ret[\"assigned\"]}\n    return ret\n</code></pre>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta.writefile","title":"<code>writefile(meta_filepath, enc='utf_8')</code>","text":"<p>Writes the metadata to a file after processing units and actions.</p> <p>This method serializes the metadata into JSON format and writes it to the specified file. It processes units and actions for each metadata entry, sorts items according to 'metaDef', and outputs the sorted data to a file.</p> <p>The method also returns a list of keys from 'metaDef' that were not assigned values in the output.</p> <p>Parameters:</p> Name Type Description Default <code>meta_filepath</code> <code>str</code> <p>The file path where the metadata will be written.</p> required <code>enc</code> <code>str</code> <p>The encoding for the output file. Default is \"utf_8\".</p> <code>'utf_8'</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>A dictionary with keys 'assigned' and 'unknown'. 'assigned' contains the set of keys that were assigned values, and 'unknown' contains the set of keys from 'metaDef' that were not used.</p> <p>Raises:</p> Type Description <code>CustomException</code> <p>If the metadata generation fails, with a custom error message and error code.</p> Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>def writefile(self, meta_filepath: str, enc: str = \"utf_8\") -&gt; dict[str, Any]:\n    \"\"\"Writes the metadata to a file after processing units and actions.\n\n    This method serializes the metadata into JSON format and writes it to the specified file.\n    It processes units and actions for each metadata entry, sorts items according to 'metaDef',\n    and outputs the sorted data to a file.\n\n    The method also returns a list of keys from 'metaDef' that were not assigned values in the output.\n\n    Args:\n        meta_filepath (str): The file path where the metadata will be written.\n        enc (str, optional): The encoding for the output file. Default is \"utf_8\".\n\n    Returns:\n        dict: A dictionary with keys 'assigned' and 'unknown'.\n            'assigned' contains the set of keys that were assigned values,\n            and 'unknown' contains the set of keys from 'metaDef' that were not used.\n\n    Raises:\n        CustomException: If the metadata generation fails, with a custom error message and error code.\n    \"\"\"\n    outdict = json.loads(json.dumps({\"constant\": self.metaConst, \"variable\": self.metaVar}))\n\n    for idx, kvdict in [(None, outdict[\"constant\"])] + list(enumerate(outdict[\"variable\"])):\n        for k, vobj in kvdict.items():\n            self._process_unit(vobj, idx)\n            self._process_action(vobj, k, idx)\n\n    # \u9805\u76ee\u3092metaDef\u306b\u5f93\u3063\u3066\u30bd\u30fc\u30c8\n    outdict[\"constant\"] = self.__sort_by_metadef(outdict[\"constant\"])\n    outdict[\"variable\"] = [self.__sort_by_metadef(dvOrg) for dvOrg in outdict[\"variable\"]]\n\n    # \u30d5\u30a1\u30a4\u30eb\u51fa\u529b\n    with open(meta_filepath, \"w\", encoding=enc) as fout:\n        json.dump(outdict, fout, indent=4, ensure_ascii=False)\n\n    # metaDef\u306e\u3046\u3061\u5024\u306e\u5165\u3089\u306a\u304b\u3063\u305f\u30ad\u30fc\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n    assigned_keys = set(outdict[\"constant\"].keys()).union(*(dv.keys() for dv in outdict[\"variable\"]))\n    unkown_keys = {k for k in self.metaDef if k not in assigned_keys}\n\n    return {\"assigned\": assigned_keys, \"unknown\": unkown_keys}\n</code></pre>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta._metadata_validation","title":"<code>_metadata_validation(vsrc, outtype, outfmt, orgtype, outunit)</code>","text":"<p>Casts the input metadata to the specified format and performs validation to check.</p> <p>if it can be cast to the specified data type. The formats for various metadata are described in metadata-def.json.</p> <p>Parameters:</p> Name Type Description Default <code>vsrc</code> <code>str</code> <p>The value of the input metadata.</p> required <code>outtype</code> <code>Optional[str]</code> <p>The data type of the converted metadata.</p> required <code>outfmt</code> <code>Optional[str]</code> <p>The format of the converted metadata.</p> required <code>orgtype</code> <code>Optional[str]</code> <p>The data type of the original metadata.</p> required <code>outunit</code> <code>Optional[str]</code> <p>The unit of the converted metadata.</p> required <p>Returns:</p> Type Description <code>dict[str, bool | int | float | str]</code> <p>dict[str, Union[bool, int, float, str]]: Returns the conversion result in the form of metadata for metadata.json.</p> Note <p>original func: _vDict()</p> Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>def _metadata_validation(\n    self,\n    vsrc: str,\n    outtype: str | None,\n    outfmt: str | None,\n    orgtype: str | None,\n    outunit: str | None,\n) -&gt; dict[str, bool | int | float | str]:  # pragma: no cover\n    \"\"\"Casts the input metadata to the specified format and performs validation to check.\n\n    if it can be cast to the specified data type. The formats for various metadata are described in metadata-def.json.\n\n    Args:\n        vsrc (str): The value of the input metadata.\n        outtype (Optional[str]): The data type of the converted metadata.\n        outfmt (Optional[str]): The format of the converted metadata.\n        orgtype (Optional[str]): The data type of the original metadata.\n        outunit (Optional[str]): The unit of the converted metadata.\n\n    Returns:\n        dict[str, Union[bool, int, float, str]]: Returns the conversion result in the form of metadata for metadata.json.\n\n    Note:\n        original func: _vDict()\n    \"\"\"\n    vsrc = vsrc.strip()\n\n    if orgtype is None:\n        _casted_value = castval(vsrc, outtype, outfmt)\n    elif orgtype in [\"integer\", \"number\"]:\n        # \u5358\u4f4d\u4ed8\u304d\u6587\u5b57\u5217\u304c\u6e21\u3055\u308c\u3066\u3082\u5358\u4f4d\u306e\u4ee3\u5165\u306f\u672c\u95a2\u6570\u5185\u3067\u306f\u6271\u308f\u306a\u3044\u3002\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5225\u9014\u4ee3\u5165\u3059\u308b\u4e8b\u3002\n        valpair = _split_value_unit(vsrc)\n        vstr = valpair.value\n        # \u89e3\u91c8\u53ef\u80fd\u304b\u30c1\u30a7\u30c3\u30af\u3002\u4e0d\u53ef\u80fd\u3060\u3063\u305f\u5834\u5408\u306f\u4f8b\u5916\u30b9\u30ed\u30fc\u3055\u308c\u308b\u305f\u3081\u3001\n        # \u4f8b\u5916\u306a\u304f\u51e6\u7406\u7d42\u4e86\u3067\u304d\u308b\u304b\u306e\u307f\u306b\u8208\u5473\u304c\u3042\u308b\n        _casted_value = castval(vstr, orgtype, outfmt)\n    else:\n        vstr = vsrc\n        # \u89e3\u91c8\u53ef\u80fd\u304b\u30c1\u30a7\u30c3\u30af\u3002\u4e0d\u53ef\u80fd\u3060\u3063\u305f\u5834\u5408\u306f\u4f8b\u5916\u30b9\u30ed\u30fc\u3055\u308c\u308b\u305f\u3081\u3001\n        # \u4f8b\u5916\u306a\u304f\u51e6\u7406\u7d42\u4e86\u3067\u304d\u308b\u304b\u306e\u307f\u306b\u8208\u5473\u304c\u3042\u308b\n        _casted_value = castval(vstr, orgtype, outfmt)\n\n    if outunit:\n        return {\n            \"value\": _casted_value,\n            \"unit\": outunit,\n        }\n    return {\"value\": _casted_value}\n</code></pre>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta._process_action","title":"<code>_process_action(vobj, k, idx)</code>","text":"Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>def _process_action(self, vobj: dict[str, Any], k: str, idx: int | None) -&gt; None:  # pragma: no cover\n    # action\u306e\u51e6\u7406\n    stract = self.metaDef[k].get(\"action\")\n    if not stract:\n        return\n\n    for srckey, srcval in self.referedmap.items():\n        if srckey not in stract:\n            continue\n        if idx is not None:\n            realval = srcval[idx] if isinstance(srcval, list) else srcval\n            stract = stract.replace(srckey, f'\"{realval}\"' if isinstance(realval, str) else str(realval))\n    vobj[\"value\"] = eval(stract)\n</code></pre>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta._process_unit","title":"<code>_process_unit(vobj, idx)</code>","text":"Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>def _process_unit(self, vobj: dict[str, Any], idx: int | None) -&gt; None:  # pragma: no cover\n    _unit = vobj.get(\"unit\", \"\")\n    # \"unit\"\u306e\u3046\u3061\u3001\"$\"\u304b\u3089\u59cb\u307e\u308b\u4ed6\u30ad\u30fc\u53c2\u7167\u3092\u5b9f\u969b\u306b\u7f6e\u304d\u63db\u3048\u308b\n    if _unit.startswith(\"$\"):\n        srckey = _unit[1:]\n        srcval = self.referedmap[srckey]\n        if srcval is None:\n            # \u53c2\u7167\u5148\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u5358\u4f4d\u672a\u8a2d\u5b9a\u306e\u72b6\u614b\u3068\u3059\u308b\n            del vobj[\"unit\"]\n        elif isinstance(srcval, str):\n            vobj[\"unit\"] = srcval\n        elif idx is not None:\n            vobj[\"unit\"] = srcval[idx]\n</code></pre>"},{"location":"rdetoolkit/rde2util/#storagedir","title":"StorageDir","text":"<p>A class to handle storage directory operations.</p> <p>It provides methods to generate and create directories for storing data, with support for dividing data into specific indexes.</p> <p>Attributes:</p> Name Type Description <code>__nDigit</code> <code>int</code> <p>The number of digits used for the divided data index. Fixed value.</p> Note <p>In this system, the creation and support of the following folders are accommodated. Other folders can also be created, but they will not be reflected in the system:</p> <ul> <li>invoice</li> <li>invoice_patch</li> <li>inputdata</li> <li>invoice_patch</li> <li>structured</li> <li>temp</li> <li>logs</li> <li>meta</li> <li>thumbnail</li> <li>main_image</li> <li>other_image</li> <li>attachment</li> <li>nonshared_raw</li> <li>raw</li> <li>tasksupport</li> </ul> Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>class StorageDir:\n    \"\"\"A class to handle storage directory operations.\n\n    It provides methods to generate and create\n    directories for storing data, with support for dividing data into specific indexes.\n\n    Attributes:\n        __nDigit (int): The number of digits used for the divided data index. Fixed value.\n\n    Note:\n        In this system, the creation and support of the following folders are accommodated.\n        Other folders can also be created, but they will not be reflected in the system:\n\n        - invoice\n        - invoice_patch\n        - inputdata\n        - invoice_patch\n        - structured\n        - temp\n        - logs\n        - meta\n        - thumbnail\n        - main_image\n        - other_image\n        - attachment\n        - nonshared_raw\n        - raw\n        - tasksupport\n    \"\"\"\n\n    __nDigit = 4  # \u5206\u5272\u30c7\u30fc\u30bf\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6841\u6570\u3002\u56fa\u5b9a\u5024\n\n    @classmethod\n    def get_datadir(cls, is_mkdir: bool, idx: int = 0) -&gt; str:\n        \"\"\"Generates a data directory path based on an index and optionally creates it.\n\n        This method generates a directory path under 'data' or 'data/divided' based on the provided index.\n        If `is_mkdir` is True, the directory is created.\n\n        Args:\n            is_mkdir (bool): Flag to indicate whether to create the directory.\n            idx (int): The index for the divided data. Default is 0, which refers to the base 'data' directory.\n\n        Returns:\n            str: The path of the generated data directory.\n        \"\"\"\n        dir_basename = \"data\" if idx == 0 else os.path.join(\"data\", \"divided\", f\"{idx:0{cls.__nDigit}d}\")\n        if is_mkdir:\n            os.makedirs(dir_basename, exist_ok=True)\n        return dir_basename\n\n    @classmethod\n    def _make_data_basedir(cls, is_mkdir: bool, idx: int, dir_basename: str) -&gt; pathlib.Path:\n        \"\"\"Creates and returns the path to a specified data base directory.\n\n        This internal method is used to generate and optionally create a base directory for specific data types,\n        such as 'invoice', 'logs', etc., under the data directory.\n\n        Args:\n            is_mkdir (bool): Flag to indicate whether to create the directory.\n            idx (int): The index for the divided data.\n            dir_basename (str): The base name of the directory to be created.\n\n        Returns:\n            pathlib.Path: The path of the created base directory.\n        \"\"\"\n        target_dir = os.path.join(cls.get_datadir(is_mkdir, idx), dir_basename)\n        if is_mkdir:\n            os.makedirs(target_dir, exist_ok=True)\n        return pathlib.Path(target_dir)\n\n    @classmethod\n    def get_specific_outputdir(cls, is_mkdir: bool, dir_basename: str, idx: int = 0) -&gt; pathlib.Path:\n        \"\"\"Generates and optionally creates a specific output directory based on a base name and index.\n\n        This method facilitates creating directories for specific outputs like 'invoice_patch', 'temp', etc.,\n        within the structured data directories.\n\n        Args:\n            is_mkdir (bool): Flag to indicate whether to create the directory.\n            dir_basename (str): The base name of the specific output directory.\n            idx (int): The index for the divided data. Default is 0.\n\n        Returns:\n            pathlib.Path: The path of the specific output directory.\n        \"\"\"\n        return cls._make_data_basedir(is_mkdir, idx, dir_basename)\n</code></pre>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.StorageDir.get_datadir","title":"<code>get_datadir(is_mkdir, idx=0)</code>  <code>classmethod</code>","text":"<p>Generates a data directory path based on an index and optionally creates it.</p> <p>This method generates a directory path under 'data' or 'data/divided' based on the provided index. If <code>is_mkdir</code> is True, the directory is created.</p> <p>Parameters:</p> Name Type Description Default <code>is_mkdir</code> <code>bool</code> <p>Flag to indicate whether to create the directory.</p> required <code>idx</code> <code>int</code> <p>The index for the divided data. Default is 0, which refers to the base 'data' directory.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The path of the generated data directory.</p> Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>@classmethod\ndef get_datadir(cls, is_mkdir: bool, idx: int = 0) -&gt; str:\n    \"\"\"Generates a data directory path based on an index and optionally creates it.\n\n    This method generates a directory path under 'data' or 'data/divided' based on the provided index.\n    If `is_mkdir` is True, the directory is created.\n\n    Args:\n        is_mkdir (bool): Flag to indicate whether to create the directory.\n        idx (int): The index for the divided data. Default is 0, which refers to the base 'data' directory.\n\n    Returns:\n        str: The path of the generated data directory.\n    \"\"\"\n    dir_basename = \"data\" if idx == 0 else os.path.join(\"data\", \"divided\", f\"{idx:0{cls.__nDigit}d}\")\n    if is_mkdir:\n        os.makedirs(dir_basename, exist_ok=True)\n    return dir_basename\n</code></pre>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.StorageDir.get_specific_outputdir","title":"<code>get_specific_outputdir(is_mkdir, dir_basename, idx=0)</code>  <code>classmethod</code>","text":"<p>Generates and optionally creates a specific output directory based on a base name and index.</p> <p>This method facilitates creating directories for specific outputs like 'invoice_patch', 'temp', etc., within the structured data directories.</p> <p>Parameters:</p> Name Type Description Default <code>is_mkdir</code> <code>bool</code> <p>Flag to indicate whether to create the directory.</p> required <code>dir_basename</code> <code>str</code> <p>The base name of the specific output directory.</p> required <code>idx</code> <code>int</code> <p>The index for the divided data. Default is 0.</p> <code>0</code> <p>Returns:</p> Type Description <code>Path</code> <p>pathlib.Path: The path of the specific output directory.</p> Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>@classmethod\ndef get_specific_outputdir(cls, is_mkdir: bool, dir_basename: str, idx: int = 0) -&gt; pathlib.Path:\n    \"\"\"Generates and optionally creates a specific output directory based on a base name and index.\n\n    This method facilitates creating directories for specific outputs like 'invoice_patch', 'temp', etc.,\n    within the structured data directories.\n\n    Args:\n        is_mkdir (bool): Flag to indicate whether to create the directory.\n        dir_basename (str): The base name of the specific output directory.\n        idx (int): The index for the divided data. Default is 0.\n\n    Returns:\n        pathlib.Path: The path of the specific output directory.\n    \"\"\"\n    return cls._make_data_basedir(is_mkdir, idx, dir_basename)\n</code></pre>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.StorageDir._make_data_basedir","title":"<code>_make_data_basedir(is_mkdir, idx, dir_basename)</code>  <code>classmethod</code>","text":"<p>Creates and returns the path to a specified data base directory.</p> <p>This internal method is used to generate and optionally create a base directory for specific data types, such as 'invoice', 'logs', etc., under the data directory.</p> <p>Parameters:</p> Name Type Description Default <code>is_mkdir</code> <code>bool</code> <p>Flag to indicate whether to create the directory.</p> required <code>idx</code> <code>int</code> <p>The index for the divided data.</p> required <code>dir_basename</code> <code>str</code> <p>The base name of the directory to be created.</p> required <p>Returns:</p> Type Description <code>Path</code> <p>pathlib.Path: The path of the created base directory.</p> Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>@classmethod\ndef _make_data_basedir(cls, is_mkdir: bool, idx: int, dir_basename: str) -&gt; pathlib.Path:\n    \"\"\"Creates and returns the path to a specified data base directory.\n\n    This internal method is used to generate and optionally create a base directory for specific data types,\n    such as 'invoice', 'logs', etc., under the data directory.\n\n    Args:\n        is_mkdir (bool): Flag to indicate whether to create the directory.\n        idx (int): The index for the divided data.\n        dir_basename (str): The base name of the directory to be created.\n\n    Returns:\n        pathlib.Path: The path of the created base directory.\n    \"\"\"\n    target_dir = os.path.join(cls.get_datadir(is_mkdir, idx), dir_basename)\n    if is_mkdir:\n        os.makedirs(target_dir, exist_ok=True)\n    return pathlib.Path(target_dir)\n</code></pre>"},{"location":"rdetoolkit/rde2util/#get_default_values","title":"get_default_values","text":"<p>Reads default values from a default_value.csv file and returns them as a dictionary.</p> <p>This function opens a file specified by 'default_values_filepath', detects its encoding, and reads its content as a CSV. Each row in the CSV file should have 'key' and 'value' columns. The function constructs and returns a dictionary mapping keys to their corresponding values.</p> <p>Parameters:</p> Name Type Description Default <code>default_values_filepath</code> <code>RdeFsPath</code> <p>The file path to the CSV file containing default values.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>A dictionary containing the keys and their corresponding default values.</p> Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>def get_default_values(default_values_filepath: RdeFsPath) -&gt; dict[str, Any]:\n    \"\"\"Reads default values from a default_value.csv file and returns them as a dictionary.\n\n    This function opens a file specified by 'default_values_filepath', detects its encoding,\n    and reads its content as a CSV. Each row in the CSV file should have 'key' and 'value' columns.\n    The function constructs and returns a dictionary mapping keys to their corresponding values.\n\n    Args:\n        default_values_filepath (RdeFsPath): The file path to the CSV file containing default values.\n\n    Returns:\n        dict: A dictionary containing the keys and their corresponding default values.\n    \"\"\"\n    dct_default_values = {}\n    with open(default_values_filepath, \"rb\") as rf:\n        enc_default_values_data = rf.read()\n    enc = chardet.detect(enc_default_values_data)[\"encoding\"]\n    with open(default_values_filepath, encoding=enc) as fin:\n        for row in csv.DictReader(fin):\n            dct_default_values[row[\"key\"]] = row[\"value\"]\n    return dct_default_values\n</code></pre>"},{"location":"rdetoolkit/rde2util/#chardecencoding","title":"CharDecEncoding","text":"<p>A class to handle character encoding detection and conversion for text files.</p> Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>class CharDecEncoding:\n    \"\"\"A class to handle character encoding detection and conversion for text files.\"\"\"\n\n    USUAL_ENCs = (\"ascii\", \"shift_jis\", \"utf_8\", \"utf_8_sig\", \"euc_jp\")\n\n    @classmethod\n    def detect_text_file_encoding(cls, text_filepath: RdeFsPath) -&gt; str:\n        \"\"\"Detect the encoding of a given text file.\n\n        This function attempts to detect the encoding of a text file. If the initially\n        detected encoding isn't one of the usual ones, it uses chardet for a more thorough detection.\n\n        Args:\n            text_filepath (RdeFsPath): Path to the text file to be analyzed.\n\n        Returns:\n            str: The detected encoding of the text file.\n\n        Raises:\n            FileNotFoundError: If the given file path does not exist.\n        \"\"\"\n        if isinstance(text_filepath, pathlib.Path):\n            text_filepath = str(text_filepath)\n\n        with open(text_filepath, \"rb\") as tf:\n            bcontents = tf.read()\n        _cast_detect_ret: _ChardetType = cast(_ChardetType, detect(bcontents))\n        enc = _cast_detect_ret[\"encoding\"].replace(\"-\", \"_\").lower() if _cast_detect_ret[\"encoding\"] is not None else \"\"\n\n        if enc not in cls.USUAL_ENCs:\n            enc = cls.__detect(text_filepath)\n        if enc == \"shift_jis\":\n            enc = \"cp932\"\n        return enc\n\n    @classmethod\n    def __detect(cls, text_filepath: str) -&gt; str:\n        \"\"\"Detect the encoding of a given text file using chardet.\n\n        Args:\n            text_filepath (str): Path to the text file to be analyzed.\n\n        Returns:\n            str: The detected encoding of the text file.\n        \"\"\"\n        detector = UniversalDetector()\n\n        try:\n            with open(text_filepath, mode=\"rb\") as f:\n                while True:\n                    binary = f.readline()\n                    if binary == b\"\":\n                        break\n                    detector.feed(binary)\n                    if detector.done:\n                        break\n        finally:\n            detector.close()\n\n        ret = detector.result[\"encoding\"]\n        if ret:\n            return ret.replace(\"-\", \"_\").lower()\n        return \"\"\n</code></pre>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.CharDecEncoding.detect_text_file_encoding","title":"<code>detect_text_file_encoding(text_filepath)</code>  <code>classmethod</code>","text":"<p>Detect the encoding of a given text file.</p> <p>This function attempts to detect the encoding of a text file. If the initially detected encoding isn't one of the usual ones, it uses chardet for a more thorough detection.</p> <p>Parameters:</p> Name Type Description Default <code>text_filepath</code> <code>RdeFsPath</code> <p>Path to the text file to be analyzed.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The detected encoding of the text file.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the given file path does not exist.</p> Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>@classmethod\ndef detect_text_file_encoding(cls, text_filepath: RdeFsPath) -&gt; str:\n    \"\"\"Detect the encoding of a given text file.\n\n    This function attempts to detect the encoding of a text file. If the initially\n    detected encoding isn't one of the usual ones, it uses chardet for a more thorough detection.\n\n    Args:\n        text_filepath (RdeFsPath): Path to the text file to be analyzed.\n\n    Returns:\n        str: The detected encoding of the text file.\n\n    Raises:\n        FileNotFoundError: If the given file path does not exist.\n    \"\"\"\n    if isinstance(text_filepath, pathlib.Path):\n        text_filepath = str(text_filepath)\n\n    with open(text_filepath, \"rb\") as tf:\n        bcontents = tf.read()\n    _cast_detect_ret: _ChardetType = cast(_ChardetType, detect(bcontents))\n    enc = _cast_detect_ret[\"encoding\"].replace(\"-\", \"_\").lower() if _cast_detect_ret[\"encoding\"] is not None else \"\"\n\n    if enc not in cls.USUAL_ENCs:\n        enc = cls.__detect(text_filepath)\n    if enc == \"shift_jis\":\n        enc = \"cp932\"\n    return enc\n</code></pre>"},{"location":"rdetoolkit/rde2util/#unzip_japanese_zip","title":"unzip_japanese_zip","text":"<p>Extracts files from a ZIP archive considering Japanese file name encodings.</p> <p>This function handles ZIP archives that may have file names encoded with Japanese-specific encodings (like Shift JIS). It decodes the file names appropriately before extracting them to ensure they are correctly named in the destination directory.</p> <p>Parameters:</p> Name Type Description Default <code>src_zipfilepath</code> <code>str</code> <p>Path to the source ZIP file to be extracted.</p> required <code>dst_dirpath</code> <code>str</code> <p>Destination directory path where the files should be extracted.</p> required Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>def unzip_japanese_zip(src_zipfilepath: str, dst_dirpath: str) -&gt; None:\n    \"\"\"Extracts files from a ZIP archive considering Japanese file name encodings.\n\n    This function handles ZIP archives that may have file names encoded with\n    Japanese-specific encodings (like Shift JIS). It decodes the file names\n    appropriately before extracting them to ensure they are correctly named\n    in the destination directory.\n\n    Args:\n        src_zipfilepath (str): Path to the source ZIP file to be extracted.\n        dst_dirpath (str): Destination directory path where the files should be extracted.\n    \"\"\"\n    with zipfile.ZipFile(src_zipfilepath) as zfile:\n        for zinfo in zfile.infolist():\n            _decode_filename(zinfo)\n            zfile.extract(zinfo, dst_dirpath)\n</code></pre>"},{"location":"rdetoolkit/rde2util/#read_from_json_file","title":"read_from_json_file","text":"<p>A function that reads json file and returns the json object.</p> <p>Parameters:</p> Name Type Description Default <code>invoice_file_path</code> <code>RdeFsPath</code> <p>The path to the JSON file.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The parsed json object.</p> Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>def read_from_json_file(invoice_file_path: RdeFsPath) -&gt; dict[str, Any]:  # pragma: no cover\n    \"\"\"A function that reads json file and returns the json object.\n\n    Args:\n        invoice_file_path (RdeFsPath): The path to the JSON file.\n\n    Returns:\n        dict[str, Any]: The parsed json object.\n    \"\"\"\n    enc = CharDecEncoding.detect_text_file_encoding(invoice_file_path)\n    with open(invoice_file_path, encoding=enc) as f:\n        return json.load(f)\n</code></pre>"},{"location":"rdetoolkit/rde2util/#write_to_json_file","title":"write_to_json_file","text":"<p>Writes an content to a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>invoicefile_path</code> <code>RdeFsPath</code> <p>Path to the destination JSON file.</p> required <code>invoiceobj</code> <code>dict[str, Any]</code> <p>Invoice object to be serialized and written.</p> required <code>enc</code> <code>str</code> <p>Encoding to use when writing the file. Defaults to \"utf_8\".</p> <code>'utf_8'</code> Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>def write_to_json_file(invoicefile_path: RdeFsPath, invoiceobj: dict[str, Any], enc: str = \"utf_8\") -&gt; None:  # pragma: no cover\n    \"\"\"Writes an content to a JSON file.\n\n    Args:\n        invoicefile_path (RdeFsPath): Path to the destination JSON file.\n        invoiceobj (dict[str, Any]): Invoice object to be serialized and written.\n        enc (str): Encoding to use when writing the file. Defaults to \"utf_8\".\n    \"\"\"\n    with open(invoicefile_path, \"w\", encoding=enc) as f:\n        json.dump(invoiceobj, f, indent=4, ensure_ascii=False)\n</code></pre>"},{"location":"rdetoolkit/rde2util/#castval","title":"castval","text":"<p>The function formats the string valstr based on outtype and outfmt and returns the formatted value.</p> <p>The function returns a formatted value of the string valstr according to the specified outtype and outfmt. The outtype must be a string (\"string\") for outfmt to be used. If valstr contains a value with units, the assignment of units is not handled within this function. It should be assigned separately as needed.</p> <p>Parameters:</p> Name Type Description Default <code>valstr</code> <code>Any</code> <p>String to be converted of type</p> required <code>outtype</code> <code>str</code> <p>Type information at output</p> required <code>outfmt</code> <code>str</code> <p>Formatting at output (related to date data)</p> required Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>def castval(valstr: Any, outtype: str | None, outfmt: str | None) -&gt; bool | int | float | str:\n    \"\"\"The function formats the string valstr based on outtype and outfmt and returns the formatted value.\n\n    The function returns a formatted value of the string valstr according to the specified outtype and outfmt.\n    The outtype must be a string (\"string\") for outfmt to be used. If valstr contains a value with units, the assignment of units is not handled within this function.\n    It should be assigned separately as needed.\n\n    Args:\n        valstr (Any): String to be converted of type\n        outtype (str): Type information at output\n        outfmt (str): Formatting at output (related to date data)\n    \"\"\"\n    if outtype == \"boolean\":\n        if ValueCaster.trycast(valstr, bool) is not None:\n            return bool(valstr)\n\n    elif outtype in (\"integer\", \"number\"):\n        # Even if a string with units is passed, the assignment of units is not handled in this function. Assign units separately as necessary.\n        val_unit_pair = _split_value_unit(valstr)\n        if ValueCaster.trycast(val_unit_pair.value, int) is not None:\n            return int(val_unit_pair.value)\n        if outtype == \"number\" and ValueCaster.trycast(val_unit_pair.value, float) is not None:\n            return float(val_unit_pair.value)\n\n    elif outtype == \"string\":\n        return valstr if not outfmt else ValueCaster.convert_to_date_format(valstr, outfmt)\n\n    else:\n        emsg = \"ERROR: unknown value type in metaDef\"\n        raise StructuredError(emsg)\n\n    emsg = \"ERROR: failed to cast metaDef value\"\n    raise StructuredError(emsg)\n</code></pre>"},{"location":"rdetoolkit/rde2util/#valuecaster","title":"ValueCaster","text":"<p>A utility class for casting values and converting date formats.</p> Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>class ValueCaster:\n    \"\"\"A utility class for casting values and converting date formats.\"\"\"\n\n    @staticmethod\n    def trycast(valstr: str, tp: Callable[[str], Any]) -&gt; Any:\n        \"\"\"Tries to cast the given value string to the specified type.\n\n        Args:\n            valstr (str): The value string to be casted.\n            tp (Callable[[str], Any]): The type to cast the value to.\n\n        Returns:\n            Any: The casted value if successful, otherwise None.\n        \"\"\"\n        try:\n            return tp(valstr)\n        except ValueError:\n            return None\n\n    @staticmethod\n    def convert_to_date_format(value: str, fmt: str) -&gt; str:\n        \"\"\"Converts the given value to the specified date format.\n\n        Args:\n            value (str): The value to be converted.\n            fmt (str): The desired date format.\n\n        Returns:\n            str: The converted value in the specified date format.\n\n        Raises:\n            StructuredError: If the specified format is unknown.\n        \"\"\"\n        dtobj = dateutil.parser.parse(value)\n        if fmt == \"date-time\":\n            return dtobj.isoformat()\n        if fmt == \"date\":\n            return dtobj.strftime(\"%Y-%m-%d\")\n        if fmt == \"time\":\n            return dtobj.strftime(\"%H:%M:%S\")\n        emsg = \"ERROR: unknown format in metaDef\"\n        raise StructuredError(emsg)\n</code></pre>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.ValueCaster.convert_to_date_format","title":"<code>convert_to_date_format(value, fmt)</code>  <code>staticmethod</code>","text":"<p>Converts the given value to the specified date format.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The value to be converted.</p> required <code>fmt</code> <code>str</code> <p>The desired date format.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The converted value in the specified date format.</p> <p>Raises:</p> Type Description <code>StructuredError</code> <p>If the specified format is unknown.</p> Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>@staticmethod\ndef convert_to_date_format(value: str, fmt: str) -&gt; str:\n    \"\"\"Converts the given value to the specified date format.\n\n    Args:\n        value (str): The value to be converted.\n        fmt (str): The desired date format.\n\n    Returns:\n        str: The converted value in the specified date format.\n\n    Raises:\n        StructuredError: If the specified format is unknown.\n    \"\"\"\n    dtobj = dateutil.parser.parse(value)\n    if fmt == \"date-time\":\n        return dtobj.isoformat()\n    if fmt == \"date\":\n        return dtobj.strftime(\"%Y-%m-%d\")\n    if fmt == \"time\":\n        return dtobj.strftime(\"%H:%M:%S\")\n    emsg = \"ERROR: unknown format in metaDef\"\n    raise StructuredError(emsg)\n</code></pre>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.ValueCaster.trycast","title":"<code>trycast(valstr, tp)</code>  <code>staticmethod</code>","text":"<p>Tries to cast the given value string to the specified type.</p> <p>Parameters:</p> Name Type Description Default <code>valstr</code> <code>str</code> <p>The value string to be casted.</p> required <code>tp</code> <code>Callable[[str], Any]</code> <p>The type to cast the value to.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The casted value if successful, otherwise None.</p> Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>@staticmethod\ndef trycast(valstr: str, tp: Callable[[str], Any]) -&gt; Any:\n    \"\"\"Tries to cast the given value string to the specified type.\n\n    Args:\n        valstr (str): The value string to be casted.\n        tp (Callable[[str], Any]): The type to cast the value to.\n\n    Returns:\n        Any: The casted value if successful, otherwise None.\n    \"\"\"\n    try:\n        return tp(valstr)\n    except ValueError:\n        return None\n</code></pre>"},{"location":"rdetoolkit/rde2util/#dict2meta","title":"dict2meta","text":"<p>Converts dictionary data into metadata and writes it to a specified file.</p> <p>This function takes metadata definitions and dictionary information for constants and variables, then creates a Meta object to process and write this data to a metadata output file.</p> <p>Parameters:</p> Name Type Description Default <code>metadef_filepath</code> <code>Path</code> <p>The file path to the metadata definition file.                             This file defines the structure and expected types of the metadata.</p> required <code>metaout_filepath</code> <code>Path</code> <p>The file path where the processed metadata should be written.</p> required <code>const_info</code> <code>MetaType</code> <p>A dictionary containing constant metadata information.                     This should match the structure defined in the metadef_filepath.</p> required <code>val_info</code> <code>MetaType</code> <p>A dictionary containing variable metadata information.                 This too should align with the structure defined in the metadef_filepath.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, set[Any]]</code> <p>A dictionary containing information about the assigned and unknown metadata fields.     The 'assigned' key contains a set of fields that were successfully assigned values,     while the 'unknown' key contains a set of fields defined in the metadata definition but not present in the input dictionaries.</p> Note <p>MetaType is expected to be a dictionary or a similar structure containing metadata information.</p> Source code in <code>src/rdetoolkit/rde2util.py</code> <pre><code>def dict2meta(metadef_filepath: pathlib.Path, metaout_filepath: pathlib.Path, const_info: MetaType, val_info: MetaType) -&gt; dict[str, set[Any]]:\n    \"\"\"Converts dictionary data into metadata and writes it to a specified file.\n\n    This function takes metadata definitions and dictionary information for constants and variables,\n    then creates a Meta object to process and write this data to a metadata output file.\n\n    Args:\n        metadef_filepath (pathlib.Path): The file path to the metadata definition file.\n                                        This file defines the structure and expected types of the metadata.\n        metaout_filepath (pathlib.Path): The file path where the processed metadata should be written.\n        const_info (MetaType): A dictionary containing constant metadata information.\n                                This should match the structure defined in the metadef_filepath.\n        val_info (MetaType): A dictionary containing variable metadata information.\n                            This too should align with the structure defined in the metadef_filepath.\n\n    Returns:\n        dict: A dictionary containing information about the assigned and unknown metadata fields.\n                The 'assigned' key contains a set of fields that were successfully assigned values,\n                while the 'unknown' key contains a set of fields defined in the metadata definition but not present in the input dictionaries.\n\n    Note:\n        MetaType is expected to be a dictionary or a similar structure containing metadata information.\n    \"\"\"\n    meta_obj = Meta(metadef_filepath)\n    meta_obj.assign_vals(const_info)\n    meta_obj.assign_vals(val_info)\n\n    return meta_obj.writefile(str(metaout_filepath))\n</code></pre>"},{"location":"rdetoolkit/rdelogger/","title":"rdelogger","text":"<p><code>rdelogger</code>is used to collect execution logs of the structuring process.</p>"},{"location":"rdetoolkit/rdelogger/#get_logger","title":"get_logger","text":"<p>Creates a logger using Python's logging module.</p> <p>The logger is a tool for generating log messages, tracking processes, and facilitating debugging.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The identifier's name, usually the module name is specified (name).</p> required <code>file_path</code> <code>Optional[RdeFsPath]</code> <p>The path of the log file. If this parameter is specified, the log messages will be written to this file. If not specified, the log messages will be sent to the standard output. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Logger</code> <p>logging.Logger: A configured logger object.</p> Example <pre><code>from rdetoolkit import rdelogger\n\nlogger = rdelogger.get_logger(__name__, \"data/logs/rdesys.log\")\n\n# If you want to output a debug message, add the following code\nlogger.debug('This is a debug message.')\n&gt; 2023-01-01 00:00:00,111 - [rdetoolkit.rde2util](DEBUG) - This is a debug message.\n</code></pre> Source code in <code>src/rdetoolkit/rdelogger.py</code> <pre><code>def get_logger(name: str, *, file_path: RdeFsPath | None = None) -&gt; logging.Logger:\n    \"\"\"Creates a logger using Python's logging module.\n\n    The logger is a tool for generating log messages, tracking processes, and facilitating debugging.\n\n    Args:\n        name (str): The identifier's name, usually the module name is specified (__name__).\n        file_path (Optional[RdeFsPath], optional): The path of the log file. If this parameter is specified, the log messages will be written to this file. If not specified, the log messages will be sent to the standard output. Defaults to None.\n\n    Returns:\n        logging.Logger: A configured logger object.\n\n    Example:\n        ```python\n        from rdetoolkit import rdelogger\n\n        logger = rdelogger.get_logger(__name__, \"data/logs/rdesys.log\")\n\n        # If you want to output a debug message, add the following code\n        logger.debug('This is a debug message.')\n        &gt; 2023-01-01 00:00:00,111 - [rdetoolkit.rde2util](DEBUG) - This is a debug message.\n        ```\n    \"\"\"\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG)\n    formatter = logging.Formatter(\"%(asctime)s - [%(name)s](%(levelname)s) - %(message)s\")\n\n    if file_path is None:\n        return logger\n\n    # add a file handler\n    if not os.path.exists(os.path.dirname(file_path)):\n        os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    file_handler = logging.FileHandler(file_path)\n    file_handler.setLevel(logging.DEBUG)\n    file_handler.setFormatter(formatter)\n    logger.addHandler(file_handler)\n\n    return logger\n</code></pre>"},{"location":"rdetoolkit/rdelogger/#customlog","title":"CustomLog","text":"<p>The CustomLog class is a class for writing custom logs to a user's log file.</p> <p>To create an instance of this class, call <code>CustomLog</code> with the module name as an argument. Then, by calling the <code>get_log</code> method, you can get a logger for writing logs.</p> Example <pre><code>logger = CustomLog(__name__).get_log()\n\n# If you do not want to write a log, pass `False` as an argument to the `get_log` method.\nlogger = CustomLog(__name__).get_log(False)\n\n#In the above code, a logger is generated, but no log is written.\n</code></pre> Source code in <code>src/rdetoolkit/rdelogger.py</code> <pre><code>class CustomLog:\n    \"\"\"The CustomLog class is a class for writing custom logs to a user's log file.\n\n    To create an instance of this class, call `CustomLog` with the module name as an argument.\n    Then, by calling the `get_log` method, you can get a logger for writing logs.\n\n    Example:\n        ```python\n        logger = CustomLog(__name__).get_log()\n\n        # If you do not want to write a log, pass `False` as an argument to the `get_log` method.\n        logger = CustomLog(__name__).get_log(False)\n\n        #In the above code, a logger is generated, but no log is written.\n        ```\n    \"\"\"\n\n    def __init__(self, name: str = \"rdeuser\"):\n        logger = getLogger(name)\n        logger.propagate = False\n        logger.setLevel(DEBUG)\n\n        self.logger = logger\n\n    def get_logger(self, needlogs: bool = True) -&gt; Logger:\n        \"\"\"Retrieves the logger instance.\n\n        Args:\n            needlogs (bool, optional): Indicates whether logs are needed. Defaults to True.\n\n        Returns:\n            Logger: The logger instance.\n\n        \"\"\"\n        logger = self.logger\n        if not logger.hasHandlers():\n            logdir = StorageDir.get_specific_outputdir(True, \"logs\")\n            logfile = logdir / \"rdeuser.log\"\n            if needlogs:\n                self._set_handler(StreamHandler(), True)\n                self._set_handler(FileHandler(logfile), True)\n            else:\n                self._set_handler(NullHandler(), False)\n        self.logger = logger\n\n        return self.logger\n\n    def _set_handler(self, handler: Handler, verbose: bool) -&gt; None:\n        level = DEBUG if verbose else INFO\n        handler.setLevel(level)\n        formatter = Formatter(\n            # fmt=\"%(asctime)s - [%(name)s](%(levelname)s)\" +\n            #       \"%(funcName)-15s %(message)s\",\n            fmt=\"%(asctime)s (%(levelname)s) %(message)s\",\n            datefmt=\"%Y-%m-%d %H:%M:%S %z\",\n        )\n        handler.setFormatter(formatter)\n        self.logger.addHandler(handler)\n</code></pre>"},{"location":"rdetoolkit/rdelogger/#src.rdetoolkit.rdelogger.CustomLog.get_logger","title":"<code>get_logger(needlogs=True)</code>","text":"<p>Retrieves the logger instance.</p> <p>Parameters:</p> Name Type Description Default <code>needlogs</code> <code>bool</code> <p>Indicates whether logs are needed. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Logger</code> <code>Logger</code> <p>The logger instance.</p> Source code in <code>src/rdetoolkit/rdelogger.py</code> <pre><code>def get_logger(self, needlogs: bool = True) -&gt; Logger:\n    \"\"\"Retrieves the logger instance.\n\n    Args:\n        needlogs (bool, optional): Indicates whether logs are needed. Defaults to True.\n\n    Returns:\n        Logger: The logger instance.\n\n    \"\"\"\n    logger = self.logger\n    if not logger.hasHandlers():\n        logdir = StorageDir.get_specific_outputdir(True, \"logs\")\n        logfile = logdir / \"rdeuser.log\"\n        if needlogs:\n            self._set_handler(StreamHandler(), True)\n            self._set_handler(FileHandler(logfile), True)\n        else:\n            self._set_handler(NullHandler(), False)\n    self.logger = logger\n\n    return self.logger\n</code></pre>"},{"location":"rdetoolkit/rdelogger/#src.rdetoolkit.rdelogger.CustomLog._set_handler","title":"<code>_set_handler(handler, verbose)</code>","text":"Source code in <code>src/rdetoolkit/rdelogger.py</code> <pre><code>def _set_handler(self, handler: Handler, verbose: bool) -&gt; None:\n    level = DEBUG if verbose else INFO\n    handler.setLevel(level)\n    formatter = Formatter(\n        # fmt=\"%(asctime)s - [%(name)s](%(levelname)s)\" +\n        #       \"%(funcName)-15s %(message)s\",\n        fmt=\"%(asctime)s (%(levelname)s) %(message)s\",\n        datefmt=\"%Y-%m-%d %H:%M:%S %z\",\n    )\n    handler.setFormatter(formatter)\n    self.logger.addHandler(handler)\n</code></pre>"},{"location":"rdetoolkit/rdelogger/#log_decorator","title":"log_decorator","text":"<p>A decorator function that logs the start and end of a decorated function.</p> <p>Returns:</p> Name Type Description <code>function</code> <code>Callable</code> <p>The decorated function.</p> Example <pre><code>@log_decorator()\ndef my_function():\n    print(\"Hello, World!\")\nmy_function()\n# Output:\n# my_function     --&gt; Start\n# Hello, World!\n# my_function     &lt;-- End\n</code></pre> Source code in <code>src/rdetoolkit/rdelogger.py</code> <pre><code>def log_decorator() -&gt; Callable:\n    \"\"\"A decorator function that logs the start and end of a decorated function.\n\n    Returns:\n        function: The decorated function.\n\n    Example:\n        ```python\n        @log_decorator()\n        def my_function():\n            print(\"Hello, World!\")\n        my_function()\n        # Output:\n        # my_function     --&gt; Start\n        # Hello, World!\n        # my_function     &lt;-- End\n        ```\n    \"\"\"\n\n    def _log_decorator(func: Callable) -&gt; Callable:\n        def wrapper(*args, **kargs) -&gt; Callable:\n            logger = CustomLog().get_logger()\n            logger.info(f\"{func.__name__:15} --&gt; Start\")\n            try:\n                return func(*args, **kargs)\n            except Exception as e:\n                logger.error(f\"{func.__name__:15} !!! Error has occurred\")\n                raise e\n            finally:\n                logger.info(f\"{func.__name__:15} &lt;-- End\")\n\n        return wrapper\n\n    return _log_decorator\n</code></pre>"},{"location":"rdetoolkit/validation/","title":"validation","text":"<p>The <code>validation.py</code> defines classes and functions for validating a group of template files.</p>"},{"location":"rdetoolkit/validation/#metadatavalidator","title":"MetadataValidator","text":"Source code in <code>src/rdetoolkit/validation.py</code> <pre><code>class MetadataValidator:\n    def __init__(self) -&gt; None:\n        self.schema = MetadataItem\n\n    def validate(self, *, path: str | Path | None = None, json_obj: dict[str, Any] | None = None) -&gt; dict[str, Any]:\n        \"\"\"Validates the provided JSON data against the MetadataItem schema.\n\n        Args:\n            path (Union[str, Path], optional): The path to the JSON file to be validated. Defaults to None.\n            json_obj (dict[str, Any], optional): The JSON object to be validated. Defaults to None.\n\n        Returns:\n            dict[str, Any]: The validated JSON data.\n\n        Raises:\n            ValueError: If neither 'path' nor 'json_obj' is provided.\n            ValueError: If both 'path' and 'json_obj' are provided.\n            ValueError: If an unexpected error occurs.\n\n        \"\"\"\n        if path is None and json_obj is None:\n            emsg = \"At least one of 'path' or 'json_obj' must be provided\"\n            raise ValueError(emsg)\n        if path is not None and json_obj is not None:\n            emsg = \"Both 'path' and 'json_obj' cannot be provided at the same time\"\n            raise ValueError(emsg)\n\n        if path is not None:\n            with open(path, encoding=\"utf-8\") as f:\n                __data = json.load(f)\n        elif json_obj is not None:\n            __data = json_obj\n        else:\n            emsg = \"Unexpected validation error\"\n            raise ValueError(emsg)\n\n        MetadataItem(**__data)\n        return __data\n</code></pre>"},{"location":"rdetoolkit/validation/#src.rdetoolkit.validation.MetadataValidator.validate","title":"<code>validate(*, path=None, json_obj=None)</code>","text":"<p>Validates the provided JSON data against the MetadataItem schema.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>The path to the JSON file to be validated. Defaults to None.</p> <code>None</code> <code>json_obj</code> <code>dict[str, Any]</code> <p>The JSON object to be validated. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The validated JSON data.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither 'path' nor 'json_obj' is provided.</p> <code>ValueError</code> <p>If both 'path' and 'json_obj' are provided.</p> <code>ValueError</code> <p>If an unexpected error occurs.</p> Source code in <code>src/rdetoolkit/validation.py</code> <pre><code>def validate(self, *, path: str | Path | None = None, json_obj: dict[str, Any] | None = None) -&gt; dict[str, Any]:\n    \"\"\"Validates the provided JSON data against the MetadataItem schema.\n\n    Args:\n        path (Union[str, Path], optional): The path to the JSON file to be validated. Defaults to None.\n        json_obj (dict[str, Any], optional): The JSON object to be validated. Defaults to None.\n\n    Returns:\n        dict[str, Any]: The validated JSON data.\n\n    Raises:\n        ValueError: If neither 'path' nor 'json_obj' is provided.\n        ValueError: If both 'path' and 'json_obj' are provided.\n        ValueError: If an unexpected error occurs.\n\n    \"\"\"\n    if path is None and json_obj is None:\n        emsg = \"At least one of 'path' or 'json_obj' must be provided\"\n        raise ValueError(emsg)\n    if path is not None and json_obj is not None:\n        emsg = \"Both 'path' and 'json_obj' cannot be provided at the same time\"\n        raise ValueError(emsg)\n\n    if path is not None:\n        with open(path, encoding=\"utf-8\") as f:\n            __data = json.load(f)\n    elif json_obj is not None:\n        __data = json_obj\n    else:\n        emsg = \"Unexpected validation error\"\n        raise ValueError(emsg)\n\n    MetadataItem(**__data)\n    return __data\n</code></pre>"},{"location":"rdetoolkit/validation/#metadata_validate","title":"metadata_validate","text":"<p>Validate metadata.json file.</p> <p>This function validates the metadata definition file specified by the given path. It checks if the file exists and then uses a validator to validate the file against a schema.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>The path to the metadata definition file.</p> required <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the schema and path do not exist.</p> <code>MetadataValidationError</code> <p>If there is an error in validating the metadata definition file.</p> Source code in <code>src/rdetoolkit/validation.py</code> <pre><code>def metadata_validate(path: str | Path) -&gt; None:\n    \"\"\"Validate metadata.json file.\n\n    This function validates the metadata definition file specified by the given path.\n    It checks if the file exists and then uses a validator to validate the file against a schema.\n\n    Args:\n        path (Union[str, Path]): The path to the metadata definition file.\n\n    Raises:\n        FileNotFoundError: If the schema and path do not exist.\n        MetadataValidationError: If there is an error in validating the metadata definition file.\n    \"\"\"\n    if isinstance(path, str):\n        path = Path(path)\n\n    if not path.exists():\n        emsg = f\"The schema and path do not exist: {path.name}\"\n        raise FileNotFoundError(emsg)\n\n    validator = MetadataValidator()\n    try:\n        validator.validate(path=path)\n    except ValidationError as validation_error:\n        emsg = \"Validation Errors in metadata.json. Please correct the following fields\\n\"\n        for idx, error in enumerate(validation_error.errors(), start=1):\n            emsg += f\"{idx}. Field: {'.'.join([str(e) for e in error['loc']])}\\n\"\n            emsg += f\"   Type: {error['type']}\\n\"\n            emsg += f\"   Context: {error['msg']}\\n\"\n        raise MetadataValidationError(emsg) from validation_error\n</code></pre>"},{"location":"rdetoolkit/validation/#invoicevalidator","title":"InvoiceValidator","text":"Source code in <code>src/rdetoolkit/validation.py</code> <pre><code>class InvoiceValidator:\n    pre_basic_info_schema = os.path.join(os.path.dirname(__file__), \"static\", \"invoice_basic_and_sample.schema_.json\")\n\n    def __init__(self, schema_path: str | Path):\n        self.schema_path = schema_path\n        self.schema = self.__pre_validate()\n        self.__temporarily_modify_json_schema()\n\n    def validate(self, *, path: str | Path | None = None, obj: dict[str, Any] | None = None) -&gt; dict[str, Any]:\n        \"\"\"Validate the provided JSON data against the schema.\n\n        Args:\n            path (Optional[Union[str, Path]]): The path to the JSON file to validate.\n            obj (Optional[dict[str, Any]]): The JSON object to validate.\n\n        Raises:\n            ValueError: If neither 'path' nor 'obj' is provided.\n            ValueError: If both 'path' and 'obj' are provided.\n\n        Returns:\n            None\n        \"\"\"\n        data = self.__get_data(path, obj)\n\n        # Remove None values from the data\n        # Although invoice.schema.json does not allow None, the invoice.json generated from the system is written in a format that allows None. Therefore, as a temporary measure, we remove the None values from invoice.json.\n        _data = self._remove_none_values(data)\n        if isinstance(data, dict):\n            data = cast(dict[str, Any], _data)\n        else:\n            # In RDE, the top of invoice.json never returns as an array.\n            emsg = \"Expected a dictionary, but got a different type.\"\n            raise ValueError(emsg)\n\n        with open(self.pre_basic_info_schema, encoding=\"utf-8\") as f:\n            basic_info = json.load(f)\n        try:\n            validate(instance=data, schema=basic_info)\n        except SchemaValidationError as schema_error:\n            emsg = \"Error in validating system standard field.\\nPlease correct the following fields in invoice.json\\n\"\n            emsg += f\"Field: {'.'.join(list(map(str, schema_error.path)))}\\n\"\n            emsg += f\"Type: {schema_error.validator}\\n\"\n            emsg += f\"Context: {schema_error.message}\\n\"\n            raise InvoiceSchemaValidationError(emsg) from schema_error\n\n        validator = Draft202012Validator(self.schema, format_checker=FormatChecker())\n        errors = sorted(validator.iter_errors(data), key=lambda e: e.path)\n        emsg = \"Error in validating invoice.json:\\n\"\n        for idx, error in enumerate(errors, start=1):\n            emsg += f\"{idx}. Field: {'.'.join(list(map(str, error.path)))}\\n\"\n            emsg += f\"   Type: {error.validator}\\n\"\n            emsg += f\"   Context: {error.message}\\n\"\n        if errors:\n            raise InvoiceSchemaValidationError(emsg)\n\n        return data\n\n    def __get_data(self, path: str | Path | None, obj: dict[str, Any] | None) -&gt; dict[str, Any]:\n        if path is None and obj is None:\n            emsg = \"At least one of 'path' or 'obj' must be provided\"\n            raise ValueError(emsg)\n        if path is not None and obj is not None:\n            emsg = \"Both 'path' and 'obj' cannot be provided at the same time\"\n            raise ValueError(emsg)\n\n        if path is not None:\n            return read_from_json_file(path)\n        if obj is not None:\n            return obj\n        emsg = \"Unexpected error\"\n        raise ValueError(emsg)\n\n    def __pre_validate(self) -&gt; dict[str, Any]:\n        __path = Path(self.schema_path) if isinstance(self.schema_path, str) else self.schema_path\n\n        if __path.suffix != \".json\":\n            emsg = \"The schema file must be a json file\"\n            raise ValueError(emsg)\n\n        data = read_from_json_file(__path)\n\n        if __path.name == \"invoice.schema.json\":\n            try:\n                # _data, line_map = load_json_with_line_numbers(data)\n                InvoiceSchemaJson(**data)\n            except ValidationError as validation_error:\n                emsg = \"Validation Errors in invoice.schema.json. Please correct the following fields\\n\"\n                for idx, error in enumerate(validation_error.errors(), start=1):\n                    emsg += f\"{idx}. Field: {'.'.join([str(e) for e in error['loc']])}\\n\"\n                    emsg += f\"   Type: {error['type']}\\n\"\n                    emsg += f\"   Context: {error['msg']}\\n\"\n                raise InvoiceSchemaValidationError(emsg) from validation_error\n            except ValueError as value_error:\n                emsg = \"Error in schema validation\"\n                raise InvoiceSchemaValidationError(emsg) from value_error\n            return data\n\n        return data\n\n    def __temporarily_modify_json_schema(self) -&gt; dict[str, Any] | None:\n        \"\"\"Temporarily modifies the structure of the schema to validate invoice.json using invoice.schema.json.\n\n        This method modifies the 'generalAttributes' and 'specificAttributes' sections of the schema by replacing\n        the 'items' with a new dictionary that has 'oneOf' as the key and the original 'items' as the value.\n        This allows the schema to validate invoice.json using invoice.schema.json.\n\n        Note:\n            - The modifications are temporary and only affect the current instance of the schema.\n            - If the 'sample' property does not exist in the schema, the method returns the original schema without any modifications.\n        \"\"\"\n        if not self.schema.get(\"properties\", {}).get(\"sample\", {}):\n            return self.schema\n\n        __generalattr_item = self.schema.get(\"properties\", {}).get(\"sample\", {}).get(\"properties\", {}).get(\"generalAttributes\")\n        if __generalattr_item:\n            __ref = self.schema[\"properties\"][\"sample\"][\"properties\"][\"generalAttributes\"]\n            __temp_generalattr_item = copy.deepcopy(__ref)\n            __ref[\"prefixItems\"] = __temp_generalattr_item[\"items\"]\n            del __ref[\"items\"]\n            # __ref[\"items\"][rule_keyword] = __temp_generalattr_item[\"items\"]\n\n        __specificattr_item = self.schema.get(\"properties\", {}).get(\"sample\", {}).get(\"properties\", {}).get(\"specificAttributes\")\n        if __specificattr_item:\n            __ref = self.schema[\"properties\"][\"sample\"][\"properties\"][\"specificAttributes\"]\n            __temp_specificattr_item = copy.deepcopy(__ref)\n            __ref[\"prefixItems\"] = __temp_specificattr_item[\"items\"]\n            del __ref[\"items\"]\n            # __ref[\"items\"][rule_keyword] = __temp_specificattr_item[\"items\"]\n\n        return None\n\n    def _remove_none_values(self, data: dict | list | Any) -&gt; dict | list | Any:\n        \"\"\"Recursively removes key/value pairs from dictionaries and elements from lists where the value is None.\n\n        Args:\n            data (Union[dict, list, Any]): The input data which can be a dictionary, list, or any other type.\n\n        Returns:\n            Union[dict, list, Any]: The cleaned data with None values removed.\n\n        Examples:\n            &gt;&gt;&gt; remove_none_values({\"a\": 1, \"b\": None, \"c\": 3})\n            {'a': 1, 'c': 3}\n\n            &gt;&gt;&gt; remove_none_values([1, None, 3, {\"a\": None, \"b\": 2}])\n            [1, 3, {'b': 2}]\n\n            &gt;&gt;&gt; remove_none_values({\"a\": [None, 2, None], \"b\": None, \"c\": [1, 2, 3]})\n            {'a': [2], 'c': [1, 2, 3]}\n        \"\"\"\n        if isinstance(data, dict):\n            return {k: self._remove_none_values(v) for k, v in data.items() if v is not None}\n        if isinstance(data, list):\n            return [self._remove_none_values(item) for item in data if item is not None]\n\n        return data\n</code></pre>"},{"location":"rdetoolkit/validation/#src.rdetoolkit.validation.InvoiceValidator.validate","title":"<code>validate(*, path=None, obj=None)</code>","text":"<p>Validate the provided JSON data against the schema.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Optional[Union[str, Path]]</code> <p>The path to the JSON file to validate.</p> <code>None</code> <code>obj</code> <code>Optional[dict[str, Any]]</code> <p>The JSON object to validate.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither 'path' nor 'obj' is provided.</p> <code>ValueError</code> <p>If both 'path' and 'obj' are provided.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>None</p> Source code in <code>src/rdetoolkit/validation.py</code> <pre><code>def validate(self, *, path: str | Path | None = None, obj: dict[str, Any] | None = None) -&gt; dict[str, Any]:\n    \"\"\"Validate the provided JSON data against the schema.\n\n    Args:\n        path (Optional[Union[str, Path]]): The path to the JSON file to validate.\n        obj (Optional[dict[str, Any]]): The JSON object to validate.\n\n    Raises:\n        ValueError: If neither 'path' nor 'obj' is provided.\n        ValueError: If both 'path' and 'obj' are provided.\n\n    Returns:\n        None\n    \"\"\"\n    data = self.__get_data(path, obj)\n\n    # Remove None values from the data\n    # Although invoice.schema.json does not allow None, the invoice.json generated from the system is written in a format that allows None. Therefore, as a temporary measure, we remove the None values from invoice.json.\n    _data = self._remove_none_values(data)\n    if isinstance(data, dict):\n        data = cast(dict[str, Any], _data)\n    else:\n        # In RDE, the top of invoice.json never returns as an array.\n        emsg = \"Expected a dictionary, but got a different type.\"\n        raise ValueError(emsg)\n\n    with open(self.pre_basic_info_schema, encoding=\"utf-8\") as f:\n        basic_info = json.load(f)\n    try:\n        validate(instance=data, schema=basic_info)\n    except SchemaValidationError as schema_error:\n        emsg = \"Error in validating system standard field.\\nPlease correct the following fields in invoice.json\\n\"\n        emsg += f\"Field: {'.'.join(list(map(str, schema_error.path)))}\\n\"\n        emsg += f\"Type: {schema_error.validator}\\n\"\n        emsg += f\"Context: {schema_error.message}\\n\"\n        raise InvoiceSchemaValidationError(emsg) from schema_error\n\n    validator = Draft202012Validator(self.schema, format_checker=FormatChecker())\n    errors = sorted(validator.iter_errors(data), key=lambda e: e.path)\n    emsg = \"Error in validating invoice.json:\\n\"\n    for idx, error in enumerate(errors, start=1):\n        emsg += f\"{idx}. Field: {'.'.join(list(map(str, error.path)))}\\n\"\n        emsg += f\"   Type: {error.validator}\\n\"\n        emsg += f\"   Context: {error.message}\\n\"\n    if errors:\n        raise InvoiceSchemaValidationError(emsg)\n\n    return data\n</code></pre>"},{"location":"rdetoolkit/validation/#invoice_validate","title":"invoice_validate","text":"<p>invoice.json validation function.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>invoice.json file path</p> required <code>schema</code> <code>Union[str, Path]</code> <p>invoice.schema.json file path</p> required <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the provided schema file does not exist.</p> <code>FileNotFoundError</code> <p>If the provided invoice.json file does not exist.</p> <code>InvoiceSchemaValidationError</code> <p>If the invoice.json file fails to validate against the schema.</p> Source code in <code>src/rdetoolkit/validation.py</code> <pre><code>def invoice_validate(path: str | Path, schema: str | Path) -&gt; None:\n    \"\"\"invoice.json validation function.\n\n    Args:\n        path (Union[str, Path]): invoice.json file path\n        schema (Union[str, Path]): invoice.schema.json file path\n\n    Raises:\n        FileNotFoundError: If the provided schema file does not exist.\n        FileNotFoundError: If the provided invoice.json file does not exist.\n        InvoiceSchemaValidationError: If the invoice.json file fails to validate against the schema.\n    \"\"\"\n    if isinstance(schema, str):\n        schema = Path(schema)\n    if isinstance(path, str):\n        path = Path(path)\n\n    if not schema.exists():\n        emsg = f\"The schema and path do not exist: {schema.name}\"\n        raise FileNotFoundError(emsg)\n    if not path.exists():\n        emsg = f\"The schema and path do not exist: {path.name}\"\n        raise FileNotFoundError(emsg)\n\n    validator = InvoiceValidator(schema)\n    try:\n        validator.validate(path=path)\n    except ValidationError as validation_error:\n        raise InvoiceSchemaValidationError from validation_error\n</code></pre>"},{"location":"rdetoolkit/workflows/","title":"workflows","text":"<p>In <code>workflows</code>, modules necessary for building the structuring process are defined.</p>"},{"location":"rdetoolkit/workflows/#check_files","title":"check_files","text":"<p>Classify input files to determine if the input pattern is appropriate.</p> <ol> <li>Invoice<ol> <li>File mode (e.g. sample.txt)</li> <li>Folder mode (e.g. sample1.txt, sample2.txt)</li> <li>Input file none</li> </ol> </li> <li>ExcelInvoice<ol> <li>File mode (e.g. sample.zip (compressed with only one file) + *_excel_invoice.xlsx)</li> <li>Folder mode (e.g. sample.zip (folder compressed) + _excel_invoice.xlsx) 2-3. None (e.g. _excel_invoice.xlsx)</li> </ol> </li> <li>Format (e.g. *.zip, tasksupport/rdeformat.txt)</li> <li>Multiple Files in a Flat Structure (e.g., sample1.txt, sample2.txt, sample3.txt)</li> </ol> <p>Returns:</p> Name Type Description <code>tuple</code> <code>list[tuple[Path, ...]]), Optional[Path]</code> <code>Path | None</code> <p>Registered data file path group, presence of Excel invoice file</p> Example <pre><code># MODE: Invoice / Mode: File / Input: single file\ncheck_files(srcpaths, fmt_flags=format_flags)\ntuple([(Path('data/inputdata/sample.txt'),)], None)\n\n# MODE: Invoice / Mode: Folder / Input: multi files\ncheck_files(srcpaths, fmt_flags=format_flags)\ntuple([(Path('data/inputdata/sample1.txt'), (Path('data/inputdata/sample2.txt'))], None)\n\n# MODE: Invoice / Mode: None / Input: no files\ncheck_files(srcpaths, fmt_flags=format_flags)\ntuple([()], None)\n\n# MODE: ExcelInvoice / Mode: File / Input: zip + *_excel_invoice.xlsx\ncheck_files(srcpaths, fmt_flags=format_flags)\ntuple([(Path('data/inputdata/sample.txt'),)], Path(\"data/inputdata/dataset_excel_invoice.xlsx\"))\n\n# MODE: ExcelInvoice / Mode: Folder / Input: zip + *_excel_invoice.xlsx\ncheckFiles(srcpaths, fmt_flags=format_flags)\ntuple([(Path('data/inputdata/sample1.txt'), (Path('data/inputdata/sample2.txt'))], Path(\"data/inputdata/dataset_excel_invoice.xlsx\"))\n\n# MODE: ExcelInvoice / Mode: None / Input: *_excel_invoice.xlsx\ncheck_files(srcpaths, fmt_flags=format_flags)\ntuple([], Path(\"data/inputdata/dataset_excel_invoice.xlsx\"))\n</code></pre> Note <p>The destination paths for reading input files are different for the shipping label and ExcelInvoice. invoice: /data/inputdata/ excelinvoice: /data/temp/ Source code in <code>src/rdetoolkit/workflows.py</code> <pre><code>def check_files(srcpaths: RdeInputDirPaths, *, mode: str | None) -&gt; tuple[RawFiles, Path | None]:\n    \"\"\"Classify input files to determine if the input pattern is appropriate.\n\n    1. Invoice\n        1. File mode (e.g. sample.txt)\n        2. Folder mode (e.g. sample1.txt, sample2.txt)\n        3. Input file none\n    2. ExcelInvoice\n        1. File mode (e.g. sample.zip (compressed with only one file) + *_excel_invoice.xlsx)\n        2. Folder mode (e.g. sample.zip (folder compressed) + *_excel_invoice.xlsx)\n        2-3. None (e.g. *_excel_invoice.xlsx)\n    3. Format (e.g. *.zip, tasksupport/rdeformat.txt)\n    4. Multiple Files in a Flat Structure (e.g., sample1.txt, sample2.txt, sample3.txt)\n\n    Returns:\n        tuple(list[tuple[Path, ...]]), Optional[Path]):\n        Registered data file path group, presence of Excel invoice file\n\n    Example:\n        ```python\n        # MODE: Invoice / Mode: File / Input: single file\n        check_files(srcpaths, fmt_flags=format_flags)\n        tuple([(Path('data/inputdata/sample.txt'),)], None)\n\n        # MODE: Invoice / Mode: Folder / Input: multi files\n        check_files(srcpaths, fmt_flags=format_flags)\n        tuple([(Path('data/inputdata/sample1.txt'), (Path('data/inputdata/sample2.txt'))], None)\n\n        # MODE: Invoice / Mode: None / Input: no files\n        check_files(srcpaths, fmt_flags=format_flags)\n        tuple([()], None)\n\n        # MODE: ExcelInvoice / Mode: File / Input: zip + *_excel_invoice.xlsx\n        check_files(srcpaths, fmt_flags=format_flags)\n        tuple([(Path('data/inputdata/sample.txt'),)], Path(\"data/inputdata/dataset_excel_invoice.xlsx\"))\n\n        # MODE: ExcelInvoice / Mode: Folder / Input: zip + *_excel_invoice.xlsx\n        checkFiles(srcpaths, fmt_flags=format_flags)\n        tuple([(Path('data/inputdata/sample1.txt'), (Path('data/inputdata/sample2.txt'))], Path(\"data/inputdata/dataset_excel_invoice.xlsx\"))\n\n        # MODE: ExcelInvoice / Mode: None / Input: *_excel_invoice.xlsx\n        check_files(srcpaths, fmt_flags=format_flags)\n        tuple([], Path(\"data/inputdata/dataset_excel_invoice.xlsx\"))\n        ```\n\n    Note:\n        The destination paths for reading input files are different for the shipping label and ExcelInvoice.\n        invoice: /data/inputdata/&lt;registered_files&gt;\n        excelinvoice: /data/temp/&lt;registered_files&gt;\n    \"\"\"\n    out_dir_temp = StorageDir.get_specific_outputdir(True, \"temp\")\n    if mode is None:\n        mode = \"\"\n    input_checker = selected_input_checker(srcpaths, out_dir_temp, mode)\n    rawfiles, excelinvoice = input_checker.parse(srcpaths.inputdata)\n\n    return rawfiles, excelinvoice\n</code></pre>"},{"location":"rdetoolkit/workflows/#generate_folder_paths_iterator","title":"generate_folder_paths_iterator","text":"<p>Generates iterator for RDE output folder paths.</p> <p>Create data folders for registration in the RDE system. Excel invoice: Create divided folders according to the number of registered data.</p> <p>Parameters:</p> Name Type Description Default <code>raw_files_group</code> <code>List[Tuple[Path, ...]]</code> <p>A list of tuples containing raw file paths.</p> required <code>invoice_org_filepath</code> <code>Path</code> <p>invoice_org.json file path</p> required <code>invoice_schema_filepath</code> <code>Path</code> <p>invoice.schema.json file path</p> required <p>Yields:</p> Name Type Description <code>RdeOutputResourcePath</code> <code>RdeOutputResourcePath</code> <p>A named tuple of output folder paths for RDE resources</p> <p>Raises:</p> Type Description <code>StructuredError</code> <p>Occurs when the structured process fails to process correctly.</p> Example <pre><code>rawfiles_tplList = [(Path('data/temp/samle1.txt'),), (Path('data/temp/sample2.txt'),), (Path('data/temp/sample3.txt'),)]\n\nexcel_invoice_files = Path(\"data/inputdata/sample_excel_invoice.xlsx\")\n\ncreate_folders(raw_files_group, excel_invoice_files)\n</code></pre> Source code in <code>src/rdetoolkit/workflows.py</code> <pre><code>def generate_folder_paths_iterator(\n    raw_files_group: RawFiles,\n    invoice_org_filepath: Path,\n    invoice_schema_filepath: Path,\n) -&gt; Generator[RdeOutputResourcePath, None, None]:\n    \"\"\"Generates iterator for RDE output folder paths.\n\n    Create data folders for registration in the RDE system.\n    Excel invoice: Create divided folders according to the number of registered data.\n\n    Args:\n        raw_files_group (List[Tuple[pathlib.Path, ...]]): A list of tuples containing raw file paths.\n        invoice_org_filepath (pathlib.Path): invoice_org.json file path\n        invoice_schema_filepath (Path): invoice.schema.json file path\n\n    Yields:\n        RdeOutputResourcePath: A named tuple of output folder paths for RDE resources\n\n    Raises:\n        StructuredError: Occurs when the structured process fails to process correctly.\n\n    Example:\n        ```python\n        rawfiles_tplList = [(Path('data/temp/samle1.txt'),), (Path('data/temp/sample2.txt'),), (Path('data/temp/sample3.txt'),)]\n\n        excel_invoice_files = Path(\"data/inputdata/sample_excel_invoice.xlsx\")\n\n        create_folders(raw_files_group, excel_invoice_files)\n        ```\n    \"\"\"\n    for idx, raw_files in enumerate(raw_files_group):\n        rdeoutput_resource_path = RdeOutputResourcePath(\n            raw=StorageDir.get_specific_outputdir(True, \"raw\", idx),\n            rawfiles=raw_files,\n            struct=StorageDir.get_specific_outputdir(True, \"structured\", idx),\n            main_image=StorageDir.get_specific_outputdir(True, \"main_image\", idx),\n            other_image=StorageDir.get_specific_outputdir(True, \"other_image\", idx),\n            thumbnail=StorageDir.get_specific_outputdir(True, \"thumbnail\", idx),\n            meta=StorageDir.get_specific_outputdir(True, \"meta\", idx),\n            logs=StorageDir.get_specific_outputdir(True, \"logs\", idx),\n            invoice=StorageDir.get_specific_outputdir(True, \"invoice\", idx),\n            invoice_schema_json=invoice_schema_filepath,\n            invoice_org=invoice_org_filepath,\n            temp=StorageDir.get_specific_outputdir(True, \"temp\", idx),\n            nonshared_raw=StorageDir.get_specific_outputdir(True, \"nonshared_raw\", idx),\n            invoice_patch=StorageDir.get_specific_outputdir(True, \"invoice_patch\", idx),\n            attachment=StorageDir.get_specific_outputdir(True, \"attachment\", idx),\n        )\n        yield rdeoutput_resource_path\n</code></pre>"},{"location":"rdetoolkit/workflows/#run","title":"run","text":"<p>RDE Structuring Processing Function.</p> <p>This function executes the structuring process for RDE data. If you want to implement custom processing for the input data, you can pass a user-defined function as an argument. The function should accept the data class <code>RdeInputDirPaths</code>, which is internally parsed by RDE, and the data class <code>RdeOutputResourcePath</code>, which stores the output directory paths used by RDE.</p> <p>Parameters:</p> Name Type Description Default <code>custom_dataset_function</code> <code>Optional[_CallbackType]</code> <p>User-defined structuring function. Defaults to None.</p> <code>None</code> <code>config</code> <code>Optional[Config]</code> <p>Configuration class for the structuring process. If not specified, default values are loaded automatically. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The JSON representation of the workflow execution results.</p> <p>Raises:</p> Type Description <code>StructuredError</code> <p>If a structured error occurs during the process.</p> <code>Exception</code> <p>If a generic error occurs during the process.</p> Note <p>If <code>extended_mode</code> is specified, the evaluation of the execution mode is performed in the order of <code>extended_mode -&gt; excelinvoice -&gt; invoice</code>, and the structuring process is executed.</p> Example <pre><code>### custom.py\ndef custom_dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath) -&gt; None:\n    ...(original process)...\n\n### main.py\nfrom rdetoolkit import workflow\nfrom custom import custom_dataset # User-defined structuring processing function\n\ncfg = Config(save_raw=True, save_main_image=False, save_thumbnail_image=False, magic_variable=False)\nworkflow.run(custom_dataset_function=custom_dataset, config=cfg) # Execute structuring process\n</code></pre> <p>If options are specified (setting the mode to \"RDEformat\"):</p> <pre><code>### main.py\nfrom rdetoolkit.config import Config\nfrom rdetoolkit import workflow\nfrom custom import custom_dataset # User-defined structuring processing function\n\ncfg = Config(extended_mode=\"rdeformat\", save_raw=True, save_main_image=False, save_thumbnail_image=False, magic_variable=False)\nworkflow.run(custom_dataset_function=custom_dataset, config=cfg) # Execute structuring process\n</code></pre> Source code in <code>src/rdetoolkit/workflows.py</code> <pre><code>def run(*, custom_dataset_function: _CallbackType | None = None, config: Config | None = None) -&gt; str:  # pragma: no cover\n    \"\"\"RDE Structuring Processing Function.\n\n    This function executes the structuring process for RDE data. If you want to implement custom processing for the input data,\n    you can pass a user-defined function as an argument. The function should accept the data class `RdeInputDirPaths`, which is\n    internally parsed by RDE, and the data class `RdeOutputResourcePath`, which stores the output directory paths used by RDE.\n\n    Args:\n        custom_dataset_function (Optional[_CallbackType], optional): User-defined structuring function. Defaults to None.\n        config (Optional[Config], optional): Configuration class for the structuring process. If not specified, default values are loaded automatically. Defaults to None.\n\n    Returns:\n        str: The JSON representation of the workflow execution results.\n\n    Raises:\n        StructuredError: If a structured error occurs during the process.\n        Exception: If a generic error occurs during the process.\n\n    Note:\n        If `extended_mode` is specified, the evaluation of the execution mode is performed in the order of `extended_mode -&gt; excelinvoice -&gt; invoice`,\n        and the structuring process is executed.\n\n    Example:\n        ```python\n        ### custom.py\n        def custom_dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath) -&gt; None:\n            ...(original process)...\n\n        ### main.py\n        from rdetoolkit import workflow\n        from custom import custom_dataset # User-defined structuring processing function\n\n        cfg = Config(save_raw=True, save_main_image=False, save_thumbnail_image=False, magic_variable=False)\n        workflow.run(custom_dataset_function=custom_dataset, config=cfg) # Execute structuring process\n        ```\n\n        If options are specified (setting the mode to \"RDEformat\"):\n\n        ```python\n        ### main.py\n        from rdetoolkit.config import Config\n        from rdetoolkit import workflow\n        from custom import custom_dataset # User-defined structuring processing function\n\n        cfg = Config(extended_mode=\"rdeformat\", save_raw=True, save_main_image=False, save_thumbnail_image=False, magic_variable=False)\n        workflow.run(custom_dataset_function=custom_dataset, config=cfg) # Execute structuring process\n        ```\n    \"\"\"\n    logger = get_logger(__name__, file_path=StorageDir.get_specific_outputdir(True, \"logs\").joinpath(\"rdesys.log\"))\n    wf_manager = WorkflowResultManager()\n    error_info = None\n\n    try:\n        # Enabling mode flag and validating input file\n        srcpaths = RdeInputDirPaths(\n            inputdata=StorageDir.get_specific_outputdir(False, \"inputdata\"),\n            invoice=StorageDir.get_specific_outputdir(False, \"invoice\"),\n            tasksupport=StorageDir.get_specific_outputdir(False, \"tasksupport\"),\n        )\n\n        # Loading configuration file\n        __config = load_config(str(srcpaths.tasksupport), config=config)\n        srcpaths.config = __config\n\n        raw_files_group, excel_invoice_files = check_files(srcpaths, mode=__config.system.extended_mode)\n\n        # Backup of invoice.json\n        invoice_org_filepath = backup_invoice_json_files(excel_invoice_files, __config.system.extended_mode)\n        invoice_schema_filepath = srcpaths.tasksupport.joinpath(\"invoice.schema.json\")\n\n        # Execution of data set structuring process based on various modes\n        for idx, rdeoutput_resource in enumerate(generate_folder_paths_iterator(raw_files_group, invoice_org_filepath, invoice_schema_filepath)):\n            if __config.system.extended_mode is not None and __config.system.extended_mode.lower() == \"rdeformat\":\n                mode = \"rdeformat\"\n                status = rdeformat_mode_process(str(idx), srcpaths, rdeoutput_resource, custom_dataset_function)\n            elif __config.system.extended_mode is not None and __config.system.extended_mode.lower() == \"multidatatile\":\n                mode = \"MultiDataTile\"\n                ignore_error = __config.multidata_tile.ignore_errors if __config.multidata_tile else False\n                with skip_exception_context(Exception, logger=logger, enabled=ignore_error) as error_info:\n                    status = multifile_mode_process(str(idx), srcpaths, rdeoutput_resource, custom_dataset_function)\n            elif excel_invoice_files is not None:\n                mode = \"Excelinvoice\"\n                status = excel_invoice_mode_process(srcpaths, rdeoutput_resource, excel_invoice_files, idx, custom_dataset_function)\n            else:\n                mode = \"Invoice\"\n                status = invoice_mode_process(str(idx), srcpaths, rdeoutput_resource, custom_dataset_function)\n\n            if error_info and any(value is not None for value in error_info.values()):\n                _code = error_info.get(\"code\")\n                code = 999\n                if isinstance(_code, int):\n                    code = _code\n                elif isinstance(_code, str):\n                    with contextlib.suppress(ValueError):\n                        code = int(_code)\n                status = WorkflowExecutionStatus(\n                    run_id=str(idx),\n                    title=f\"Structured Process Faild: {mode}\",\n                    status=\"failed\",\n                    mode=mode,\n                    error_code=code,\n                    error_message=error_info.get(\"message\"),\n                    stacktrace=error_info.get(\"stacktrace\"),\n                    target=\",\".join(str(file) for file in rdeoutput_resource.rawfiles),\n                )\n            wf_manager.add_status(status)\n\n    except StructuredError as e:\n        handle_and_exit_on_structured_error(e, logger)\n    except Exception as e:\n        handle_generic_error(e, logger)\n\n    return wf_manager.to_json()\n</code></pre>"},{"location":"rdetoolkit/cmd/command/","title":"command","text":""},{"location":"rdetoolkit/cmd/command/#command_1","title":"Command","text":"<p>               Bases: <code>Command</code></p> Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>class Command(click.Command):\n    def __init__(self, name: str, **attrs: Any) -&gt; None:\n        super().__init__(name, **attrs)\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#initcommand","title":"InitCommand","text":"Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>class InitCommand:\n    default_dirs = [\n        Path(\"container/modules\"),\n        Path(\"container/data/inputdata\"),\n        Path(\"container/data/invoice\"),\n        Path(\"container/data/tasksupport\"),\n        Path(\"input/invoice\"),\n        Path(\"input/inputdata\"),\n        Path(\"templates/tasksupport\"),\n    ]\n\n    def invoke(self) -&gt; None:\n        \"\"\"Invokes the command and performs the necessary actions.\n\n        Args:\n            ctx (click.Context): The Click context object.\n\n        Returns:\n            None\n        \"\"\"\n        try:\n            self._info_msg(\"Ready to develop a structured program for RDE.\")\n            current_dir = Path.cwd()\n            self.__make_dirs()\n            self.__make_main_script(current_dir / \"container\" / \"main.py\")\n            self.__make_requirements_txt(current_dir / \"container\" / \"requirements.txt\")\n            self.__make_dockerfile(current_dir / \"container\" / \"Dockerfile\")\n            # container\n            self.__make_invoice_json(current_dir / \"container\" / \"data\" / \"invoice\" / \"invoice.json\")\n            self.__make_template_json(current_dir / \"container\" / \"data\" / \"tasksupport\" / \"invoice.schema.json\")\n            self.__make_metadata_def_json(current_dir / \"container\" / \"data\" / \"tasksupport\" / \"metadata-def.json\")\n            # templates\n            self.__make_template_json(current_dir / \"templates\" / \"tasksupport\" / \"invoice.schema.json\")\n            self.__make_metadata_def_json(current_dir / \"templates\" / \"tasksupport\" / \"metadata-def.json\")\n            # input\n            self.__make_invoice_json(current_dir / \"input\" / \"invoice\" / \"invoice.json\")\n            self._info_msg(f\"\\nCheck the folder: {current_dir}\")\n            self._success_msg(\"Done!\")\n        except Exception as e:\n            logger.exception(e)\n            self._error_msg(\"Failed to create files required for structured RDE programs.\")\n            raise click.Abort from e\n\n    def __make_template_json(self, path: Path) -&gt; None:\n        if Path(path).exists():\n            self._info_msg(f\"Skip: {path} already exists.\")\n            return\n\n        generator = InvoiceSchemaJsonGenerator(path)\n        generator.generate()\n        self._info_msg(f\"Created: {path}\")\n\n    def __make_metadata_def_json(self, path: Path) -&gt; None:\n        if Path(path).exists():\n            self._info_msg(f\"Skip: {path} already exists.\")\n            return\n\n        generator = MetadataDefJsonGenerator(path)\n        generator.generate()\n        self._info_msg(f\"Created: {path}\")\n\n    def __make_invoice_json(self, path: Path) -&gt; None:\n        if Path(path).exists():\n            self._info_msg(f\"Skip: {path} already exists.\")\n            return\n\n        generator = InvoiceJsonGenerator(path)\n        generator.generate()\n        self._info_msg(f\"Created: {path}\")\n\n    def __make_dirs(self) -&gt; None:\n        for d in self.default_dirs:\n            try:\n                d.mkdir(parents=True, exist_ok=True)\n            except Exception as e:\n                logger.exception(e)\n                self._error_msg(f\"Failed to create directory: {d}\")\n                raise click.Abort from e\n\n    def __make_requirements_txt(self, path: Path) -&gt; None:\n        if Path(path).exists():\n            self._info_msg(f\"Skip: {path} already exists.\")\n            return\n\n        generator = RequirementsTxtGenerator(path)\n        generator.generate()\n        self._info_msg(f\"Created: {path}\")\n\n    def __make_main_script(self, path: Path) -&gt; None:\n        if Path(path).exists():\n            self._info_msg(f\"Skip: {path} already exists.\")\n            return\n        generator = MainScriptGenerator(path)\n        generator.generate()\n\n    def __make_dockerfile(self, path: Path) -&gt; None:\n        if Path(path).exists():\n            self._info_msg(f\"Skip: {path} already exists.\")\n            return\n        generator = DockerfileGenerator(path)\n        generator.generate()\n        self._info_msg(f\"Created: {path}\")\n\n    def __delete_dirs(self) -&gt; None:\n        for d in self.default_dirs:\n            if d.exists():\n                shutil.rmtree(d)\n\n    def _info_msg(self, msg: str) -&gt; None:\n        click.echo(msg)\n\n    def _success_msg(self, msg: str) -&gt; None:\n        click.echo(click.style(msg, fg=\"green\"))\n\n    def _error_msg(self, msg: str) -&gt; None:\n        click.echo(click.style(f\"Error! {msg}\", fg=\"red\"))\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InitCommand.invoke","title":"<code>invoke()</code>","text":"<p>Invokes the command and performs the necessary actions.</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The Click context object.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>def invoke(self) -&gt; None:\n    \"\"\"Invokes the command and performs the necessary actions.\n\n    Args:\n        ctx (click.Context): The Click context object.\n\n    Returns:\n        None\n    \"\"\"\n    try:\n        self._info_msg(\"Ready to develop a structured program for RDE.\")\n        current_dir = Path.cwd()\n        self.__make_dirs()\n        self.__make_main_script(current_dir / \"container\" / \"main.py\")\n        self.__make_requirements_txt(current_dir / \"container\" / \"requirements.txt\")\n        self.__make_dockerfile(current_dir / \"container\" / \"Dockerfile\")\n        # container\n        self.__make_invoice_json(current_dir / \"container\" / \"data\" / \"invoice\" / \"invoice.json\")\n        self.__make_template_json(current_dir / \"container\" / \"data\" / \"tasksupport\" / \"invoice.schema.json\")\n        self.__make_metadata_def_json(current_dir / \"container\" / \"data\" / \"tasksupport\" / \"metadata-def.json\")\n        # templates\n        self.__make_template_json(current_dir / \"templates\" / \"tasksupport\" / \"invoice.schema.json\")\n        self.__make_metadata_def_json(current_dir / \"templates\" / \"tasksupport\" / \"metadata-def.json\")\n        # input\n        self.__make_invoice_json(current_dir / \"input\" / \"invoice\" / \"invoice.json\")\n        self._info_msg(f\"\\nCheck the folder: {current_dir}\")\n        self._success_msg(\"Done!\")\n    except Exception as e:\n        logger.exception(e)\n        self._error_msg(\"Failed to create files required for structured RDE programs.\")\n        raise click.Abort from e\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InitCommand._info_msg","title":"<code>_info_msg(msg)</code>","text":"Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>def _info_msg(self, msg: str) -&gt; None:\n    click.echo(msg)\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InitCommand._success_msg","title":"<code>_success_msg(msg)</code>","text":"Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>def _success_msg(self, msg: str) -&gt; None:\n    click.echo(click.style(msg, fg=\"green\"))\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InitCommand._error_msg","title":"<code>_error_msg(msg)</code>","text":"Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>def _error_msg(self, msg: str) -&gt; None:\n    click.echo(click.style(f\"Error! {msg}\", fg=\"red\"))\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#versioncommand","title":"VersionCommand","text":"Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>class VersionCommand:\n    def invoke(self) -&gt; None:\n        \"\"\"Invokes the command and prints the version number.\n\n        Args:\n            ctx (click.Context): The Click context object.\n\n        Returns:\n            None\n        \"\"\"\n        click.echo(__version__)\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.VersionCommand.invoke","title":"<code>invoke()</code>","text":"<p>Invokes the command and prints the version number.</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The Click context object.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>def invoke(self) -&gt; None:\n    \"\"\"Invokes the command and prints the version number.\n\n    Args:\n        ctx (click.Context): The Click context object.\n\n    Returns:\n        None\n    \"\"\"\n    click.echo(__version__)\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#dockerfilegenerator","title":"DockerfileGenerator","text":"Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>class DockerfileGenerator:\n    def __init__(self, path: str | Path = \"Dockerfile\"):\n        self.path = path\n\n    def generate(self) -&gt; list[str]:\n        \"\"\"Generate a Dockerfile based on the specified path.\n\n        Returns:\n            list[str]: The content of the generated Dockerfile.\n        \"\"\"\n        dockerfile_path = Path(self.path) if isinstance(self.path, str) else self.path\n\n        contents = [\n            \"FROM python:3.11.9\\n\",\n            \"WORKDIR /app\\n\",\n            \"COPY requirements.txt .\\n\",\n            \"RUN pip install -r requirements.txt\\n\",\n            \"COPY main.py /app\",\n            \"COPY modules/ /app/modules/\\n\",\n        ]\n\n        with open(dockerfile_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(\"\\n\".join(contents))\n\n        return contents\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.DockerfileGenerator.generate","title":"<code>generate()</code>","text":"<p>Generate a Dockerfile based on the specified path.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: The content of the generated Dockerfile.</p> Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>def generate(self) -&gt; list[str]:\n    \"\"\"Generate a Dockerfile based on the specified path.\n\n    Returns:\n        list[str]: The content of the generated Dockerfile.\n    \"\"\"\n    dockerfile_path = Path(self.path) if isinstance(self.path, str) else self.path\n\n    contents = [\n        \"FROM python:3.11.9\\n\",\n        \"WORKDIR /app\\n\",\n        \"COPY requirements.txt .\\n\",\n        \"RUN pip install -r requirements.txt\\n\",\n        \"COPY main.py /app\",\n        \"COPY modules/ /app/modules/\\n\",\n    ]\n\n    with open(dockerfile_path, \"w\", encoding=\"utf-8\") as f:\n        f.write(\"\\n\".join(contents))\n\n    return contents\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#requirementstxtgenerator","title":"RequirementsTxtGenerator","text":"Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>class RequirementsTxtGenerator:\n    def __init__(self, path: str | Path = \"requirements.txt\"):\n        self.path = path\n\n    def generate(self) -&gt; list[str]:\n        \"\"\"Generate a requirements.txt file based on the specified path.\n\n        Returns:\n            list[str]: The content of the generated requirements.txt file.\n        \"\"\"\n        requirements_path = Path(self.path) if isinstance(self.path, str) else self.path\n\n        contents = [\n            \"# ----------------------------------------------------\",\n            \"# Please add the desired packages and install the libraries after that.\",\n            \"# Then, run\",\n            \"#\",\n            \"# pip install -r requirements.txt\",\n            \"#\",\n            \"# on the terminal to install the required packages.\",\n            \"# ----------------------------------------------------\",\n            \"# ex.\",\n            \"# pandas==2.0.3\",\n            \"# numpy\",\n            f\"rdetoolkit=={__version__}\\n\",\n        ]\n\n        with open(requirements_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(\"\\n\".join(contents))\n\n        return contents\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.RequirementsTxtGenerator.generate","title":"<code>generate()</code>","text":"<p>Generate a requirements.txt file based on the specified path.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: The content of the generated requirements.txt file.</p> Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>def generate(self) -&gt; list[str]:\n    \"\"\"Generate a requirements.txt file based on the specified path.\n\n    Returns:\n        list[str]: The content of the generated requirements.txt file.\n    \"\"\"\n    requirements_path = Path(self.path) if isinstance(self.path, str) else self.path\n\n    contents = [\n        \"# ----------------------------------------------------\",\n        \"# Please add the desired packages and install the libraries after that.\",\n        \"# Then, run\",\n        \"#\",\n        \"# pip install -r requirements.txt\",\n        \"#\",\n        \"# on the terminal to install the required packages.\",\n        \"# ----------------------------------------------------\",\n        \"# ex.\",\n        \"# pandas==2.0.3\",\n        \"# numpy\",\n        f\"rdetoolkit=={__version__}\\n\",\n    ]\n\n    with open(requirements_path, \"w\", encoding=\"utf-8\") as f:\n        f.write(\"\\n\".join(contents))\n\n    return contents\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#invoiceschemajsongenerator","title":"InvoiceSchemaJsonGenerator","text":"Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>class InvoiceSchemaJsonGenerator:\n    def __init__(self, path: str | Path = \"invoice.schema.json\"):\n        self.path = path\n\n    def generate(self) -&gt; dict[str, Any]:\n        \"\"\"Generate a invoice.schema.json file based on the specified path.\n\n        Returns:\n            dict[str, Any]: The content of the generated invoice.schema.json file.\n        \"\"\"\n        invoice_schema_path = Path(self.path) if isinstance(self.path, str) else self.path\n\n        obj = InvoiceSchemaJson(\n            version=\"https://json-schema.org/draft/2020-12/schema\",\n            schema_id=\"https://rde.nims.go.jp/rde/dataset-templates/dataset_template_custom_sample/invoice.schema.json\",\n            description=\"RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30c6\u30b9\u30c8\u7528\u30d5\u30a1\u30a4\u30eb\",\n            type=\"object\",\n            properties=Properties(),\n        )\n        cvt_obj = obj.model_dump()\n        cvt_obj[\"required\"] = [\"custom\", \"sample\"]\n        cvt_obj[\"properties\"] = PROPATIES\n\n        with open(invoice_schema_path, mode=\"w\", encoding=\"utf-8\") as f:\n            json.dump(cvt_obj, f, indent=4, ensure_ascii=False)\n\n        return cvt_obj\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InvoiceSchemaJsonGenerator.generate","title":"<code>generate()</code>","text":"<p>Generate a invoice.schema.json file based on the specified path.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The content of the generated invoice.schema.json file.</p> Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>def generate(self) -&gt; dict[str, Any]:\n    \"\"\"Generate a invoice.schema.json file based on the specified path.\n\n    Returns:\n        dict[str, Any]: The content of the generated invoice.schema.json file.\n    \"\"\"\n    invoice_schema_path = Path(self.path) if isinstance(self.path, str) else self.path\n\n    obj = InvoiceSchemaJson(\n        version=\"https://json-schema.org/draft/2020-12/schema\",\n        schema_id=\"https://rde.nims.go.jp/rde/dataset-templates/dataset_template_custom_sample/invoice.schema.json\",\n        description=\"RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30c6\u30b9\u30c8\u7528\u30d5\u30a1\u30a4\u30eb\",\n        type=\"object\",\n        properties=Properties(),\n    )\n    cvt_obj = obj.model_dump()\n    cvt_obj[\"required\"] = [\"custom\", \"sample\"]\n    cvt_obj[\"properties\"] = PROPATIES\n\n    with open(invoice_schema_path, mode=\"w\", encoding=\"utf-8\") as f:\n        json.dump(cvt_obj, f, indent=4, ensure_ascii=False)\n\n    return cvt_obj\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#metadatadefjsongenerator","title":"MetadataDefJsonGenerator","text":"Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>class MetadataDefJsonGenerator:\n    def __init__(self, path: str | Path = \"metadata-def.json\"):\n        self.path = path\n\n    def generate(self) -&gt; dict[str, Any]:\n        \"\"\"Generate a metadata-def.json file based on the specified path.\n\n        Returns:\n            dict[str, Any]: The content of the metadata-def.json file.\n        \"\"\"\n        matadata_def_path = Path(self.path) if isinstance(self.path, str) else self.path\n\n        obj: dict[str, Any] = {\"constant\": {}, \"variable\": []}\n\n        with open(matadata_def_path, mode=\"w\", encoding=\"utf-8\") as f:\n            json.dump(obj, f, indent=4, ensure_ascii=False)\n\n        return obj\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.MetadataDefJsonGenerator.generate","title":"<code>generate()</code>","text":"<p>Generate a metadata-def.json file based on the specified path.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The content of the metadata-def.json file.</p> Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>def generate(self) -&gt; dict[str, Any]:\n    \"\"\"Generate a metadata-def.json file based on the specified path.\n\n    Returns:\n        dict[str, Any]: The content of the metadata-def.json file.\n    \"\"\"\n    matadata_def_path = Path(self.path) if isinstance(self.path, str) else self.path\n\n    obj: dict[str, Any] = {\"constant\": {}, \"variable\": []}\n\n    with open(matadata_def_path, mode=\"w\", encoding=\"utf-8\") as f:\n        json.dump(obj, f, indent=4, ensure_ascii=False)\n\n    return obj\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#invoicejsongenerator","title":"InvoiceJsonGenerator","text":"Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>class InvoiceJsonGenerator:\n    def __init__(self, path: str | Path = \"invoice.json\"):\n        self.path = path\n\n    def generate(self) -&gt; dict[str, Any]:\n        \"\"\"Generate a invoice.json file based on the specified path.\n\n        Returns:\n            dict[str, Any]: The content of the invoice.json file.\n        \"\"\"\n        invoice_path = Path(self.path) if isinstance(self.path, str) else self.path\n\n        with open(invoice_path, mode=\"w\", encoding=\"utf-8\") as f:\n            json.dump(INVOICE_JSON, f, indent=4, ensure_ascii=False)\n\n        return INVOICE_JSON\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InvoiceJsonGenerator.generate","title":"<code>generate()</code>","text":"<p>Generate a invoice.json file based on the specified path.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The content of the invoice.json file.</p> Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>def generate(self) -&gt; dict[str, Any]:\n    \"\"\"Generate a invoice.json file based on the specified path.\n\n    Returns:\n        dict[str, Any]: The content of the invoice.json file.\n    \"\"\"\n    invoice_path = Path(self.path) if isinstance(self.path, str) else self.path\n\n    with open(invoice_path, mode=\"w\", encoding=\"utf-8\") as f:\n        json.dump(INVOICE_JSON, f, indent=4, ensure_ascii=False)\n\n    return INVOICE_JSON\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#mainscriptgenerator","title":"MainScriptGenerator","text":"Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>class MainScriptGenerator:\n    def __init__(self, path: str | Path):\n        self.path = path\n\n    def generate(self) -&gt; list[str]:\n        \"\"\"Generates a script template for the source code.\n\n        Returns:\n            list[str]: A list of strings representing the contents of the generated script.\n        \"\"\"\n        main_path = Path(self.path) if isinstance(self.path, str) else self.path\n\n        contents = [\n            \"# The following script is a template for the source code.\\n\",\n            \"import rdetoolkit\\n\",\n            \"rdetoolkit.workflows.run()\\n\",\n        ]\n\n        with open(main_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(\"\\n\".join(contents))\n\n        return contents\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.MainScriptGenerator.generate","title":"<code>generate()</code>","text":"<p>Generates a script template for the source code.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of strings representing the contents of the generated script.</p> Source code in <code>src/rdetoolkit/cmd/command.py</code> <pre><code>def generate(self) -&gt; list[str]:\n    \"\"\"Generates a script template for the source code.\n\n    Returns:\n        list[str]: A list of strings representing the contents of the generated script.\n    \"\"\"\n    main_path = Path(self.path) if isinstance(self.path, str) else self.path\n\n    contents = [\n        \"# The following script is a template for the source code.\\n\",\n        \"import rdetoolkit\\n\",\n        \"rdetoolkit.workflows.run()\\n\",\n    ]\n\n    with open(main_path, \"w\", encoding=\"utf-8\") as f:\n        f.write(\"\\n\".join(contents))\n\n    return contents\n</code></pre>"},{"location":"rdetoolkit/impl/compressed_controller/","title":"compressed_controller","text":"<p>In <code>compressed_controller</code>, processes are defined for handling compressed files input from RDE.</p>"},{"location":"rdetoolkit/impl/compressed_controller/#compressedflatfileparser","title":"CompressedFlatFileParser","text":"<p>               Bases: <code>ICompressedFileStructParser</code></p> <p>Parser for compressed flat files, providing functionality to read and extract the contents.</p> <p>This parser specifically deals with flat files that are compressed. It extracts the files and ensures they match the expected structure described in an excelinvoice.</p> <p>Attributes:</p> Name Type Description <code>xlsx_invoice</code> <code>DataFrame</code> <p>DataFrame representing the expected structure or content description of the compressed files.</p> Source code in <code>src/rdetoolkit/impl/compressed_controller.py</code> <pre><code>class CompressedFlatFileParser(ICompressedFileStructParser):\n    \"\"\"Parser for compressed flat files, providing functionality to read and extract the contents.\n\n    This parser specifically deals with flat files that are compressed. It extracts the files\n    and ensures they match the expected structure described in an excelinvoice.\n\n    Attributes:\n        xlsx_invoice (pd.DataFrame): DataFrame representing the expected structure or content description\n            of the compressed files.\n    \"\"\"\n\n    def __init__(self, xlsx_invoice: pd.DataFrame):\n        self.xlsx_invoice = xlsx_invoice\n\n    def read(self, zipfile: Path, target_path: Path) -&gt; list[tuple[Path, ...]]:\n        \"\"\"Extracts the contents of the zipfile to the target path and checks their existence against the Excelinvoice.\n\n        Args:\n            zipfile (Path): Path to the compressed flat file to be read.\n            target_path (Path): Destination directory where the zipfile will be extracted to.\n\n        Returns:\n            List[Tuple[Path, ...]]: A list of tuples containing file paths. Each tuple\n            represents files from the compressed archive that matched the xlsx_invoice structure.\n        \"\"\"\n        _extracted_files = self._unpacked(zipfile, target_path)\n        return [(f,) for f in check_exist_rawfiles(self.xlsx_invoice, _extracted_files)]\n\n    def _unpacked(self, zipfile: Path | str, target_dir: Path | str) -&gt; list[Path]:\n        if isinstance(target_dir, str):\n            target_dir = Path(target_dir)\n        self._extract_zip_with_encoding(zipfile, target_dir)\n        return [f for f in target_dir.glob(\"**/*\") if f.is_file() and not self._is_excluded(f)]\n\n    def _extract_zip_with_encoding(self, zip_path: Path | str, extract_path: Path | str) -&gt; None:\n        \"\"\"Extracts a ZIP file, handling filenames with a specified encoding to prevent garbled text.\n\n        This function attempts to detect and correct the encoding of filenames within the ZIP file to ensure they are extracted with the correct filenames, avoiding issues with garbled text due to encoding mismatches.\n\n        Args:\n            zip_path (Path | str): The path to the ZIP file to be extracted.\n            extract_path (Path | str): The directory where the contents of the ZIP file will be extracted.\n\n        Raises:\n            ValueError: If encoding detection fails for any filename within the ZIP archive.\n            UnicodeDecodeError: If a filename cannot be decoded with the detected or specified encoding.\n\n        Example:\n            &gt;&gt;&gt; zip_path = 'path/to/your/archive.zip'\n            &gt;&gt;&gt; extract_path = 'path/to/extract/directory'\n            &gt;&gt;&gt; encoding = 'utf-8'  # or 'cp932' for Japanese text, for example\n            &gt;&gt;&gt; self._extract_zip_with_encoding(zip_path, extract_path)\n        \"\"\"\n        lang_enc_flag: Final = 0x800\n        with zipfile.ZipFile(zip_path, \"r\") as zip_ref:\n            for zip_info in zip_ref.infolist():\n                old_filename = zip_info.filename\n                encoding = \"utf-8\" if zip_info.flag_bits &amp; lang_enc_flag else \"cp437\"\n                enc = charset_normalizer.detect(zip_info.filename.encode(encoding))\n                if not enc.get(\"encoding\"):\n                    enc[\"encoding\"] = encoding\n\n                zip_info.filename = zip_info.filename.encode(encoding).decode(str(enc[\"encoding\"]))\n                zip_ref.NameToInfo[zip_info.filename] = zip_info\n                del zip_ref.NameToInfo[old_filename]\n\n                zip_ref.extract(zip_info, extract_path)\n\n    def _is_excluded(self, file: Path) -&gt; bool:\n        \"\"\"Checks a specific file pattern to determine whether it should be excluded.\n\n        This method checks if the file matches any of the predefined excluded patterns or regex.\n        The excluded patterns are `__MACOSX` and `.DS_Store`.\n        The excluded regex matches any file that starts with `~$` and ends with `.docx`, `.xlsx`, or `.pptx`.\n\n        Args:\n            file (Path): The file to check.\n\n        Returns:\n            bool: True if the file should be excluded, False otherwise.\n\n        Rules:\n            Specifically, the files to be excluded are:\n\n            - Files containing \"__MACOSX\" or \".DS_Store\" in their paths.\n            - Files starting with \"~$\" and ending with \".docx\", \".xlsx\", or \".pptx\".\n        \"\"\"\n        excluded_patterns = [\"__MACOSX\", \".DS_Store\"]\n        excluded_regex = re.compile(r\"~\\$.*\\.(docx|xlsx|pptx)\")\n        return any(pattern in file.parts for pattern in excluded_patterns) or bool(excluded_regex.search(str(file)))\n</code></pre>"},{"location":"rdetoolkit/impl/compressed_controller/#src.rdetoolkit.impl.compressed_controller.CompressedFlatFileParser.read","title":"<code>read(zipfile, target_path)</code>","text":"<p>Extracts the contents of the zipfile to the target path and checks their existence against the Excelinvoice.</p> <p>Parameters:</p> Name Type Description Default <code>zipfile</code> <code>Path</code> <p>Path to the compressed flat file to be read.</p> required <code>target_path</code> <code>Path</code> <p>Destination directory where the zipfile will be extracted to.</p> required <p>Returns:</p> Type Description <code>list[tuple[Path, ...]]</code> <p>List[Tuple[Path, ...]]: A list of tuples containing file paths. Each tuple</p> <code>list[tuple[Path, ...]]</code> <p>represents files from the compressed archive that matched the xlsx_invoice structure.</p> Source code in <code>src/rdetoolkit/impl/compressed_controller.py</code> <pre><code>def read(self, zipfile: Path, target_path: Path) -&gt; list[tuple[Path, ...]]:\n    \"\"\"Extracts the contents of the zipfile to the target path and checks their existence against the Excelinvoice.\n\n    Args:\n        zipfile (Path): Path to the compressed flat file to be read.\n        target_path (Path): Destination directory where the zipfile will be extracted to.\n\n    Returns:\n        List[Tuple[Path, ...]]: A list of tuples containing file paths. Each tuple\n        represents files from the compressed archive that matched the xlsx_invoice structure.\n    \"\"\"\n    _extracted_files = self._unpacked(zipfile, target_path)\n    return [(f,) for f in check_exist_rawfiles(self.xlsx_invoice, _extracted_files)]\n</code></pre>"},{"location":"rdetoolkit/impl/compressed_controller/#src.rdetoolkit.impl.compressed_controller.CompressedFlatFileParser._extract_zip_with_encoding","title":"<code>_extract_zip_with_encoding(zip_path, extract_path)</code>","text":"<p>Extracts a ZIP file, handling filenames with a specified encoding to prevent garbled text.</p> <p>This function attempts to detect and correct the encoding of filenames within the ZIP file to ensure they are extracted with the correct filenames, avoiding issues with garbled text due to encoding mismatches.</p> <p>Parameters:</p> Name Type Description Default <code>zip_path</code> <code>Path | str</code> <p>The path to the ZIP file to be extracted.</p> required <code>extract_path</code> <code>Path | str</code> <p>The directory where the contents of the ZIP file will be extracted.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If encoding detection fails for any filename within the ZIP archive.</p> <code>UnicodeDecodeError</code> <p>If a filename cannot be decoded with the detected or specified encoding.</p> Example <p>zip_path = 'path/to/your/archive.zip' extract_path = 'path/to/extract/directory' encoding = 'utf-8'  # or 'cp932' for Japanese text, for example self._extract_zip_with_encoding(zip_path, extract_path)</p> Source code in <code>src/rdetoolkit/impl/compressed_controller.py</code> <pre><code>def _extract_zip_with_encoding(self, zip_path: Path | str, extract_path: Path | str) -&gt; None:\n    \"\"\"Extracts a ZIP file, handling filenames with a specified encoding to prevent garbled text.\n\n    This function attempts to detect and correct the encoding of filenames within the ZIP file to ensure they are extracted with the correct filenames, avoiding issues with garbled text due to encoding mismatches.\n\n    Args:\n        zip_path (Path | str): The path to the ZIP file to be extracted.\n        extract_path (Path | str): The directory where the contents of the ZIP file will be extracted.\n\n    Raises:\n        ValueError: If encoding detection fails for any filename within the ZIP archive.\n        UnicodeDecodeError: If a filename cannot be decoded with the detected or specified encoding.\n\n    Example:\n        &gt;&gt;&gt; zip_path = 'path/to/your/archive.zip'\n        &gt;&gt;&gt; extract_path = 'path/to/extract/directory'\n        &gt;&gt;&gt; encoding = 'utf-8'  # or 'cp932' for Japanese text, for example\n        &gt;&gt;&gt; self._extract_zip_with_encoding(zip_path, extract_path)\n    \"\"\"\n    lang_enc_flag: Final = 0x800\n    with zipfile.ZipFile(zip_path, \"r\") as zip_ref:\n        for zip_info in zip_ref.infolist():\n            old_filename = zip_info.filename\n            encoding = \"utf-8\" if zip_info.flag_bits &amp; lang_enc_flag else \"cp437\"\n            enc = charset_normalizer.detect(zip_info.filename.encode(encoding))\n            if not enc.get(\"encoding\"):\n                enc[\"encoding\"] = encoding\n\n            zip_info.filename = zip_info.filename.encode(encoding).decode(str(enc[\"encoding\"]))\n            zip_ref.NameToInfo[zip_info.filename] = zip_info\n            del zip_ref.NameToInfo[old_filename]\n\n            zip_ref.extract(zip_info, extract_path)\n</code></pre>"},{"location":"rdetoolkit/impl/compressed_controller/#src.rdetoolkit.impl.compressed_controller.CompressedFlatFileParser._unpacked","title":"<code>_unpacked(zipfile, target_dir)</code>","text":"Source code in <code>src/rdetoolkit/impl/compressed_controller.py</code> <pre><code>def _unpacked(self, zipfile: Path | str, target_dir: Path | str) -&gt; list[Path]:\n    if isinstance(target_dir, str):\n        target_dir = Path(target_dir)\n    self._extract_zip_with_encoding(zipfile, target_dir)\n    return [f for f in target_dir.glob(\"**/*\") if f.is_file() and not self._is_excluded(f)]\n</code></pre>"},{"location":"rdetoolkit/impl/compressed_controller/#src.rdetoolkit.impl.compressed_controller.CompressedFlatFileParser._is_excluded","title":"<code>_is_excluded(file)</code>","text":"<p>Checks a specific file pattern to determine whether it should be excluded.</p> <p>This method checks if the file matches any of the predefined excluded patterns or regex. The excluded patterns are <code>__MACOSX</code> and <code>.DS_Store</code>. The excluded regex matches any file that starts with <code>~$</code> and ends with <code>.docx</code>, <code>.xlsx</code>, or <code>.pptx</code>.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>Path</code> <p>The file to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the file should be excluded, False otherwise.</p> Rules <p>Specifically, the files to be excluded are:</p> <ul> <li>Files containing \"__MACOSX\" or \".DS_Store\" in their paths.</li> <li>Files starting with \"~$\" and ending with \".docx\", \".xlsx\", or \".pptx\".</li> </ul> Source code in <code>src/rdetoolkit/impl/compressed_controller.py</code> <pre><code>def _is_excluded(self, file: Path) -&gt; bool:\n    \"\"\"Checks a specific file pattern to determine whether it should be excluded.\n\n    This method checks if the file matches any of the predefined excluded patterns or regex.\n    The excluded patterns are `__MACOSX` and `.DS_Store`.\n    The excluded regex matches any file that starts with `~$` and ends with `.docx`, `.xlsx`, or `.pptx`.\n\n    Args:\n        file (Path): The file to check.\n\n    Returns:\n        bool: True if the file should be excluded, False otherwise.\n\n    Rules:\n        Specifically, the files to be excluded are:\n\n        - Files containing \"__MACOSX\" or \".DS_Store\" in their paths.\n        - Files starting with \"~$\" and ending with \".docx\", \".xlsx\", or \".pptx\".\n    \"\"\"\n    excluded_patterns = [\"__MACOSX\", \".DS_Store\"]\n    excluded_regex = re.compile(r\"~\\$.*\\.(docx|xlsx|pptx)\")\n    return any(pattern in file.parts for pattern in excluded_patterns) or bool(excluded_regex.search(str(file)))\n</code></pre>"},{"location":"rdetoolkit/impl/compressed_controller/#compressedfolderparser","title":"CompressedFolderParser","text":"<p>               Bases: <code>ICompressedFileStructParser</code></p> <p>Parser for compressed folders, extracting contents and ensuring they match an expected structure.</p> <p>This parser is specifically designed for compressed folders. It extracts the content and verifies against a provided xlsx invoice structure.</p> <p>Attributes:</p> Name Type Description <code>xlsx_invoice</code> <code>DataFrame</code> <p>DataFrame representing the expected structure or content description of the compressed folder contents.</p> Source code in <code>src/rdetoolkit/impl/compressed_controller.py</code> <pre><code>class CompressedFolderParser(ICompressedFileStructParser):\n    \"\"\"Parser for compressed folders, extracting contents and ensuring they match an expected structure.\n\n    This parser is specifically designed for compressed folders. It extracts the content\n    and verifies against a provided xlsx invoice structure.\n\n    Attributes:\n        xlsx_invoice (pd.DataFrame): DataFrame representing the expected structure or content description\n            of the compressed folder contents.\n    \"\"\"\n\n    def __init__(self, xlsx_invoice: pd.DataFrame):\n        self.xlsx_invoice = xlsx_invoice\n\n    def read(self, zipfile: Path, target_path: Path) -&gt; list[tuple[Path, ...]]:\n        \"\"\"Extracts the contents of the zipfile and returns validated file paths.\n\n        Args:\n            zipfile (Path): Path to the compressed folder to be read.\n            target_path (Path): Destination directory where the zipfile will be extracted.\n\n        Returns:\n            List[Tuple[Path, ...]]: A list of tuples containing file paths that have been\n            validated based on unique directory names.\n        \"\"\"\n        _ = self._unpacked(zipfile, target_path)\n        safe_verification_files = self.validation_uniq_fspath(target_path, exclude_names=[\"invoice_org.json\"])\n        return [tuple(f) for f in safe_verification_files.values()]\n\n    def _unpacked(self, zipfile: Path | str, target_dir: Path | str) -&gt; list[Path]:\n        if isinstance(target_dir, str):\n            target_dir = Path(target_dir)\n        self._extract_zip_with_encoding(zipfile, target_dir)\n        return [f for f in target_dir.glob(\"**/*\") if f.is_file() and not self._is_excluded(f)]\n\n    def _extract_zip_with_encoding(self, zip_path: Path | str, extract_path: Path | str) -&gt; None:\n        \"\"\"Extracts a ZIP file, handling filenames with a specified encoding to prevent garbled text.\n\n        This function attempts to detect and correct the encoding of filenames within the ZIP file to ensure they are extracted with the correct filenames, avoiding issues with garbled text due to encoding mismatches.\n\n        Args:\n            zip_path (Path | str): The path to the ZIP file to be extracted.\n            extract_path (Path | str): The directory where the contents of the ZIP file will be extracted.\n\n        Raises:\n            ValueError: If encoding detection fails for any filename within the ZIP archive.\n            UnicodeDecodeError: If a filename cannot be decoded with the detected or specified encoding.\n\n        Example:\n            &gt;&gt;&gt; zip_path = 'path/to/your/archive.zip'\n            &gt;&gt;&gt; extract_path = 'path/to/extract/directory'\n            &gt;&gt;&gt; encoding = 'utf-8'  # or 'cp932' for Japanese text, for example\n            &gt;&gt;&gt; self._extract_zip_with_encoding(zip_path, extract_path)\n        \"\"\"\n        lang_enc_flag: Final = 0x800\n        with zipfile.ZipFile(zip_path, \"r\") as zip_ref:\n            for zip_info in zip_ref.infolist():\n                old_filename = zip_info.filename\n                encoding = \"utf-8\" if zip_info.flag_bits &amp; lang_enc_flag else \"cp437\"\n                enc = charset_normalizer.detect(zip_info.filename.encode(encoding))\n                if not enc.get(\"encoding\"):\n                    enc[\"encoding\"] = encoding\n\n                zip_info.filename = zip_info.filename.encode(encoding).decode(str(enc[\"encoding\"]))\n                zip_ref.NameToInfo[zip_info.filename] = zip_info\n                del zip_ref.NameToInfo[old_filename]\n\n                zip_ref.extract(zip_info, extract_path)\n\n    def _is_excluded(self, file: Path) -&gt; bool:\n        \"\"\"Checks a specific file pattern to determine whether it should be excluded.\n\n        This method checks if the file matches any of the predefined excluded patterns or regex.\n        The excluded patterns are `__MACOSX` and `.DS_Store`.\n        The excluded regex matches any file that starts with `~$` and ends with `.docx`, `.xlsx`, or `.pptx`.\n\n        Args:\n            file (Path): The file to check.\n\n        Returns:\n            bool: True if the file should be excluded, False otherwise.\n\n        Rules:\n            Specifically, the files to be excluded are:\n\n            - Files containing \"__MACOSX\" or \".DS_Store\" in their paths.\n            - Files starting with \"~$\" and ending with \".docx\", \".xlsx\", or \".pptx\".\n        \"\"\"\n        excluded_patterns = [\"__MACOSX\", \".DS_Store\"]\n        excluded_regex = re.compile(r\"~\\$.*\\.(docx|xlsx|pptx)\")\n        return any(pattern in file.parts for pattern in excluded_patterns) or bool(excluded_regex.search(str(file)))\n\n    def validation_uniq_fspath(self, target_path: str | Path, exclude_names: list[str]) -&gt; dict[str, list[Path]]:\n        \"\"\"Check if there are any non-unique directory names under the target directory.\n\n        Args:\n            target_path (Union[str, Path]): The directory path to scan\n            exclude_names (list[str]): Excluded files\n\n        Raises:\n            StructuredError: An exception is raised when duplicate directory names are detected\n\n        Returns:\n            dict[str, Path]: Returns the unique directory names and a list of files under each directory\n\n        Note:\n            This function checks for the existence of folders with the same name,\n            differing only in case (e.g., 'folder1' and 'Folder1'). In a Unix-based filesystem,\n            such folders can coexist when creating a zip file. However, Windows does not allow\n            for this coexistence when downloading and unzipping the file, leading to an unzip\n            failure in my environment. Therefore, it's necessary to check for folders whose names\n            differ only in case.\n        \"\"\"\n        verification_files: dict[str, list[Path]] = {}\n        unique_dirname_set = set()\n        for d, _, fnames in os.walk(target_path):\n            if not fnames:\n                continue\n            # check file\n            _filered_paths = [Path(d) / Path(f) for f in fnames if f not in exclude_names]\n            for f in _filered_paths:\n                if str(f).lower() in unique_dirname_set:\n                    emsg = \"ERROR: folder paths and file paths stored in a zip file must always have unique names.\"\n                    raise StructuredError(emsg)\n                unique_dirname_set.add(str(f).lower())\n\n            # check folder\n            lower_dir = str(d).lower()\n            if lower_dir in unique_dirname_set:\n                emsg = \"ERROR: folder paths and file paths stored in a zip file must always have unique names.\"\n                raise StructuredError(emsg)\n            unique_dirname_set.add(lower_dir)\n            verification_files[lower_dir] = _filered_paths\n\n        return verification_files\n</code></pre>"},{"location":"rdetoolkit/impl/compressed_controller/#src.rdetoolkit.impl.compressed_controller.CompressedFolderParser.read","title":"<code>read(zipfile, target_path)</code>","text":"<p>Extracts the contents of the zipfile and returns validated file paths.</p> <p>Parameters:</p> Name Type Description Default <code>zipfile</code> <code>Path</code> <p>Path to the compressed folder to be read.</p> required <code>target_path</code> <code>Path</code> <p>Destination directory where the zipfile will be extracted.</p> required <p>Returns:</p> Type Description <code>list[tuple[Path, ...]]</code> <p>List[Tuple[Path, ...]]: A list of tuples containing file paths that have been</p> <code>list[tuple[Path, ...]]</code> <p>validated based on unique directory names.</p> Source code in <code>src/rdetoolkit/impl/compressed_controller.py</code> <pre><code>def read(self, zipfile: Path, target_path: Path) -&gt; list[tuple[Path, ...]]:\n    \"\"\"Extracts the contents of the zipfile and returns validated file paths.\n\n    Args:\n        zipfile (Path): Path to the compressed folder to be read.\n        target_path (Path): Destination directory where the zipfile will be extracted.\n\n    Returns:\n        List[Tuple[Path, ...]]: A list of tuples containing file paths that have been\n        validated based on unique directory names.\n    \"\"\"\n    _ = self._unpacked(zipfile, target_path)\n    safe_verification_files = self.validation_uniq_fspath(target_path, exclude_names=[\"invoice_org.json\"])\n    return [tuple(f) for f in safe_verification_files.values()]\n</code></pre>"},{"location":"rdetoolkit/impl/compressed_controller/#src.rdetoolkit.impl.compressed_controller.CompressedFolderParser._unpacked","title":"<code>_unpacked(zipfile, target_dir)</code>","text":"Source code in <code>src/rdetoolkit/impl/compressed_controller.py</code> <pre><code>def _unpacked(self, zipfile: Path | str, target_dir: Path | str) -&gt; list[Path]:\n    if isinstance(target_dir, str):\n        target_dir = Path(target_dir)\n    self._extract_zip_with_encoding(zipfile, target_dir)\n    return [f for f in target_dir.glob(\"**/*\") if f.is_file() and not self._is_excluded(f)]\n</code></pre>"},{"location":"rdetoolkit/impl/compressed_controller/#src.rdetoolkit.impl.compressed_controller.CompressedFolderParser._extract_zip_with_encoding","title":"<code>_extract_zip_with_encoding(zip_path, extract_path)</code>","text":"<p>Extracts a ZIP file, handling filenames with a specified encoding to prevent garbled text.</p> <p>This function attempts to detect and correct the encoding of filenames within the ZIP file to ensure they are extracted with the correct filenames, avoiding issues with garbled text due to encoding mismatches.</p> <p>Parameters:</p> Name Type Description Default <code>zip_path</code> <code>Path | str</code> <p>The path to the ZIP file to be extracted.</p> required <code>extract_path</code> <code>Path | str</code> <p>The directory where the contents of the ZIP file will be extracted.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If encoding detection fails for any filename within the ZIP archive.</p> <code>UnicodeDecodeError</code> <p>If a filename cannot be decoded with the detected or specified encoding.</p> Example <p>zip_path = 'path/to/your/archive.zip' extract_path = 'path/to/extract/directory' encoding = 'utf-8'  # or 'cp932' for Japanese text, for example self._extract_zip_with_encoding(zip_path, extract_path)</p> Source code in <code>src/rdetoolkit/impl/compressed_controller.py</code> <pre><code>def _extract_zip_with_encoding(self, zip_path: Path | str, extract_path: Path | str) -&gt; None:\n    \"\"\"Extracts a ZIP file, handling filenames with a specified encoding to prevent garbled text.\n\n    This function attempts to detect and correct the encoding of filenames within the ZIP file to ensure they are extracted with the correct filenames, avoiding issues with garbled text due to encoding mismatches.\n\n    Args:\n        zip_path (Path | str): The path to the ZIP file to be extracted.\n        extract_path (Path | str): The directory where the contents of the ZIP file will be extracted.\n\n    Raises:\n        ValueError: If encoding detection fails for any filename within the ZIP archive.\n        UnicodeDecodeError: If a filename cannot be decoded with the detected or specified encoding.\n\n    Example:\n        &gt;&gt;&gt; zip_path = 'path/to/your/archive.zip'\n        &gt;&gt;&gt; extract_path = 'path/to/extract/directory'\n        &gt;&gt;&gt; encoding = 'utf-8'  # or 'cp932' for Japanese text, for example\n        &gt;&gt;&gt; self._extract_zip_with_encoding(zip_path, extract_path)\n    \"\"\"\n    lang_enc_flag: Final = 0x800\n    with zipfile.ZipFile(zip_path, \"r\") as zip_ref:\n        for zip_info in zip_ref.infolist():\n            old_filename = zip_info.filename\n            encoding = \"utf-8\" if zip_info.flag_bits &amp; lang_enc_flag else \"cp437\"\n            enc = charset_normalizer.detect(zip_info.filename.encode(encoding))\n            if not enc.get(\"encoding\"):\n                enc[\"encoding\"] = encoding\n\n            zip_info.filename = zip_info.filename.encode(encoding).decode(str(enc[\"encoding\"]))\n            zip_ref.NameToInfo[zip_info.filename] = zip_info\n            del zip_ref.NameToInfo[old_filename]\n\n            zip_ref.extract(zip_info, extract_path)\n</code></pre>"},{"location":"rdetoolkit/impl/compressed_controller/#src.rdetoolkit.impl.compressed_controller.CompressedFolderParser.validation_uniq_fspath","title":"<code>validation_uniq_fspath(target_path, exclude_names)</code>","text":"<p>Check if there are any non-unique directory names under the target directory.</p> <p>Parameters:</p> Name Type Description Default <code>target_path</code> <code>Union[str, Path]</code> <p>The directory path to scan</p> required <code>exclude_names</code> <code>list[str]</code> <p>Excluded files</p> required <p>Raises:</p> Type Description <code>StructuredError</code> <p>An exception is raised when duplicate directory names are detected</p> <p>Returns:</p> Type Description <code>dict[str, list[Path]]</code> <p>dict[str, Path]: Returns the unique directory names and a list of files under each directory</p> Note <p>This function checks for the existence of folders with the same name, differing only in case (e.g., 'folder1' and 'Folder1'). In a Unix-based filesystem, such folders can coexist when creating a zip file. However, Windows does not allow for this coexistence when downloading and unzipping the file, leading to an unzip failure in my environment. Therefore, it's necessary to check for folders whose names differ only in case.</p> Source code in <code>src/rdetoolkit/impl/compressed_controller.py</code> <pre><code>def validation_uniq_fspath(self, target_path: str | Path, exclude_names: list[str]) -&gt; dict[str, list[Path]]:\n    \"\"\"Check if there are any non-unique directory names under the target directory.\n\n    Args:\n        target_path (Union[str, Path]): The directory path to scan\n        exclude_names (list[str]): Excluded files\n\n    Raises:\n        StructuredError: An exception is raised when duplicate directory names are detected\n\n    Returns:\n        dict[str, Path]: Returns the unique directory names and a list of files under each directory\n\n    Note:\n        This function checks for the existence of folders with the same name,\n        differing only in case (e.g., 'folder1' and 'Folder1'). In a Unix-based filesystem,\n        such folders can coexist when creating a zip file. However, Windows does not allow\n        for this coexistence when downloading and unzipping the file, leading to an unzip\n        failure in my environment. Therefore, it's necessary to check for folders whose names\n        differ only in case.\n    \"\"\"\n    verification_files: dict[str, list[Path]] = {}\n    unique_dirname_set = set()\n    for d, _, fnames in os.walk(target_path):\n        if not fnames:\n            continue\n        # check file\n        _filered_paths = [Path(d) / Path(f) for f in fnames if f not in exclude_names]\n        for f in _filered_paths:\n            if str(f).lower() in unique_dirname_set:\n                emsg = \"ERROR: folder paths and file paths stored in a zip file must always have unique names.\"\n                raise StructuredError(emsg)\n            unique_dirname_set.add(str(f).lower())\n\n        # check folder\n        lower_dir = str(d).lower()\n        if lower_dir in unique_dirname_set:\n            emsg = \"ERROR: folder paths and file paths stored in a zip file must always have unique names.\"\n            raise StructuredError(emsg)\n        unique_dirname_set.add(lower_dir)\n        verification_files[lower_dir] = _filered_paths\n\n    return verification_files\n</code></pre>"},{"location":"rdetoolkit/impl/compressed_controller/#src.rdetoolkit.impl.compressed_controller.CompressedFolderParser._is_excluded","title":"<code>_is_excluded(file)</code>","text":"<p>Checks a specific file pattern to determine whether it should be excluded.</p> <p>This method checks if the file matches any of the predefined excluded patterns or regex. The excluded patterns are <code>__MACOSX</code> and <code>.DS_Store</code>. The excluded regex matches any file that starts with <code>~$</code> and ends with <code>.docx</code>, <code>.xlsx</code>, or <code>.pptx</code>.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>Path</code> <p>The file to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the file should be excluded, False otherwise.</p> Rules <p>Specifically, the files to be excluded are:</p> <ul> <li>Files containing \"__MACOSX\" or \".DS_Store\" in their paths.</li> <li>Files starting with \"~$\" and ending with \".docx\", \".xlsx\", or \".pptx\".</li> </ul> Source code in <code>src/rdetoolkit/impl/compressed_controller.py</code> <pre><code>def _is_excluded(self, file: Path) -&gt; bool:\n    \"\"\"Checks a specific file pattern to determine whether it should be excluded.\n\n    This method checks if the file matches any of the predefined excluded patterns or regex.\n    The excluded patterns are `__MACOSX` and `.DS_Store`.\n    The excluded regex matches any file that starts with `~$` and ends with `.docx`, `.xlsx`, or `.pptx`.\n\n    Args:\n        file (Path): The file to check.\n\n    Returns:\n        bool: True if the file should be excluded, False otherwise.\n\n    Rules:\n        Specifically, the files to be excluded are:\n\n        - Files containing \"__MACOSX\" or \".DS_Store\" in their paths.\n        - Files starting with \"~$\" and ending with \".docx\", \".xlsx\", or \".pptx\".\n    \"\"\"\n    excluded_patterns = [\"__MACOSX\", \".DS_Store\"]\n    excluded_regex = re.compile(r\"~\\$.*\\.(docx|xlsx|pptx)\")\n    return any(pattern in file.parts for pattern in excluded_patterns) or bool(excluded_regex.search(str(file)))\n</code></pre>"},{"location":"rdetoolkit/impl/compressed_controller/#parse_compressedfile_mode","title":"parse_compressedfile_mode","text":"<p>Parses the mode of a compressed file and returns the corresponding parser object.</p> <p>Parameters:</p> Name Type Description Default <code>xlsx_invoice</code> <code>DataFrame</code> <p>The invoice data in Excel format.</p> required <p>Returns:</p> Name Type Description <code>ICompressedFileStructParser</code> <code>ICompressedFileStructParser</code> <p>An instance of the compressed file structure parser.</p> Source code in <code>src/rdetoolkit/impl/compressed_controller.py</code> <pre><code>def parse_compressedfile_mode(\n    xlsx_invoice: pd.DataFrame,\n) -&gt; ICompressedFileStructParser:\n    \"\"\"Parses the mode of a compressed file and returns the corresponding parser object.\n\n    Args:\n        xlsx_invoice (pandas.DataFrame): The invoice data in Excel format.\n\n    Returns:\n        ICompressedFileStructParser: An instance of the compressed file structure parser.\n    \"\"\"\n    if \"data_file_names/name\" in xlsx_invoice.columns:\n        # File Mode\n        return CompressedFlatFileParser(xlsx_invoice)\n    return CompressedFolderParser(xlsx_invoice)\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/","title":"input_controller","text":"<p>In <code>input_controller</code>, processes for file operations according to various input modes of RDE are defined.</p> <p>Depending on the input file, RDE has the following four modes:</p> <ul> <li>Invoice mode</li> <li>ExcelInvoice mode</li> <li>RDEformat mode</li> <li>Multifile mode</li> </ul>"},{"location":"rdetoolkit/impl/input_controller/#invoicechecke","title":"InvoiceChecke","text":"<p>               Bases: <code>IInputFileChecker</code></p> <p>A checker class to determine and parse the invoice mode.</p> <p>This class groups and checks invoice files, specifically identifying zip files, Excel invoice files, and other types of files.</p> <p>Attributes:</p> Name Type Description <code>out_dir_temp</code> <code>Path</code> <p>Temporary directory for the unpacked content.</p> Note <p>For the purpose of this checker, notable files are primarily Excel invoices with a specific naming convention.</p> Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>class InvoiceChecker(IInputFileChecker):\n    \"\"\"A checker class to determine and parse the invoice mode.\n\n    This class groups and checks invoice files, specifically identifying zip files, Excel invoice files,\n    and other types of files.\n\n    Attributes:\n        out_dir_temp (Path): Temporary directory for the unpacked content.\n\n    Note:\n        For the purpose of this checker, notable files are primarily Excel invoices with a specific naming convention.\n    \"\"\"\n\n    def __init__(self, unpacked_dir_basename: Path):\n        self.out_dir_temp = unpacked_dir_basename\n\n    def parse(self, src_dir_input: Path) -&gt; tuple[RawFiles, Path | None]:\n        \"\"\"Parses the source input directory, grouping files based on their type.\n\n        Args:\n            src_dir_input (Path): Source directory containing the input files.\n\n        Returns:\n            tuple[RawFiles, Optional[Path]]:\n\n                - RawFiles: A list of tuples where each tuple contains file paths grouped as 'other files'.\n                - Optional[Path]: This is always None for this implementation.\n        \"\"\"\n        input_files = list(src_dir_input.glob(\"*\"))\n        zipfiles, _, other_files = self._get_group_by_files(input_files)\n        if not isinstance(other_files, list):\n            other_files = list(other_files)\n        if zipfiles:\n            other_files.extend(zipfiles)\n        rawfiles = [tuple(other_files)]\n        return rawfiles, None\n\n    def _get_group_by_files(self, input_files: list[Path]) -&gt; InputFilesGroup:\n        zipfiles = [f for f in input_files if f.suffix.lower() == \".zip\"]\n        excel_invoice_files = [f for f in input_files if f.suffix.lower() in [\".xls\", \"xlsx\"] and f.stem.endswith(\"_excel_invoice\")]\n        other_files = [f for f in input_files if f not in zipfiles and f not in excel_invoice_files]\n        return zipfiles, excel_invoice_files, other_files\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.InvoiceChecker.parse","title":"<code>parse(src_dir_input)</code>","text":"<p>Parses the source input directory, grouping files based on their type.</p> <p>Parameters:</p> Name Type Description Default <code>src_dir_input</code> <code>Path</code> <p>Source directory containing the input files.</p> required <p>Returns:</p> Type Description <code>tuple[RawFiles, Path | None]</code> <p>tuple[RawFiles, Optional[Path]]:</p> <ul> <li>RawFiles: A list of tuples where each tuple contains file paths grouped as 'other files'.</li> <li>Optional[Path]: This is always None for this implementation.</li> </ul> Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>def parse(self, src_dir_input: Path) -&gt; tuple[RawFiles, Path | None]:\n    \"\"\"Parses the source input directory, grouping files based on their type.\n\n    Args:\n        src_dir_input (Path): Source directory containing the input files.\n\n    Returns:\n        tuple[RawFiles, Optional[Path]]:\n\n            - RawFiles: A list of tuples where each tuple contains file paths grouped as 'other files'.\n            - Optional[Path]: This is always None for this implementation.\n    \"\"\"\n    input_files = list(src_dir_input.glob(\"*\"))\n    zipfiles, _, other_files = self._get_group_by_files(input_files)\n    if not isinstance(other_files, list):\n        other_files = list(other_files)\n    if zipfiles:\n        other_files.extend(zipfiles)\n    rawfiles = [tuple(other_files)]\n    return rawfiles, None\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.InvoiceChecker._get_group_by_files","title":"<code>_get_group_by_files(input_files)</code>","text":"Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>def _get_group_by_files(self, input_files: list[Path]) -&gt; InputFilesGroup:\n    zipfiles = [f for f in input_files if f.suffix.lower() == \".zip\"]\n    excel_invoice_files = [f for f in input_files if f.suffix.lower() in [\".xls\", \"xlsx\"] and f.stem.endswith(\"_excel_invoice\")]\n    other_files = [f for f in input_files if f not in zipfiles and f not in excel_invoice_files]\n    return zipfiles, excel_invoice_files, other_files\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#excelinvoicechecker","title":"ExcelInvoiceChecker","text":"<p>               Bases: <code>IInputFileChecker</code></p> <p>A checker class to determine and parse the ExcelInvoice mode.</p> <p>This class is used to identify, group, and validate the files in ExcelInvoice mode. The primary focus is on determining the presence and validity of ZIP files, Excel Invoice files, and other file types.</p> <p>Attributes:</p> Name Type Description <code>out_dir_temp</code> <code>Path</code> <p>Temporary directory for unpacked content.</p> <p>Methods:</p> Name Description <code>parse</code> <p>Path) -&gt; tuple[RawFiles, Optional[Path]]: Parse the source input directory, validate the file groups, and return the raw files and the Excel Invoice file.</p> Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>class ExcelInvoiceChecker(IInputFileChecker):\n    \"\"\"A checker class to determine and parse the ExcelInvoice mode.\n\n    This class is used to identify, group, and validate the files in ExcelInvoice mode. The primary focus is on\n    determining the presence and validity of ZIP files, Excel Invoice files, and other file types.\n\n    Attributes:\n        out_dir_temp (Path): Temporary directory for unpacked content.\n\n    Methods:\n        parse(src_dir_input: Path) -&gt; tuple[RawFiles, Optional[Path]]:\n            Parse the source input directory, validate the file groups, and return the raw files and the Excel Invoice file.\n    \"\"\"\n\n    def __init__(self, unpacked_dir_basename: Path):\n        self.out_dir_temp = unpacked_dir_basename\n\n    def parse(self, src_dir_input: Path) -&gt; tuple[RawFiles, Path | None]:\n        \"\"\"Parse the source input directory, group files by their type, validate the groups, and return the raw files and Excel Invoice file.\n\n        Args:\n            src_dir_input (Path): Source directory containing the input files.\n\n        Returns:\n            tuple[RawFiles, Optional[Path]]:\n\n                - RawFiles: List of tuples containing paths of raw files.\n                - Optional[Path]: Path to the Excel Invoice file.\n        \"\"\"\n        input_files = list(src_dir_input.glob(\"*\"))\n        zipfiles, excel_invoice_files, other_files = self._get_group_by_files(input_files)\n        self._validate_files(zipfiles, excel_invoice_files, other_files)\n\n        rawfiles = self._get_rawfiles(zipfiles[0], excel_invoice_files[0]) if zipfiles else self._get_rawfiles(None, excel_invoice_files[0])\n\n        return rawfiles, excel_invoice_files[0]\n\n    def _get_group_by_files(self, input_files: list[Path]) -&gt; InputFilesGroup:\n        zipfiles = [f for f in input_files if f.suffix.lower() == \".zip\"]\n        excel_invoice_files = [f for f in input_files if f.suffix.lower() in [\".xls\", \".xlsx\"] and f.stem.endswith(\"_excel_invoice\")]\n        other_files = [f for f in input_files if f not in zipfiles and f not in excel_invoice_files]\n        return zipfiles, excel_invoice_files, other_files\n\n    def _get_rawfiles(self, zipfile: Path | None, excel_invoice_file: Path) -&gt; list[tuple[Path, ...]]:\n        df_excel_invoice, _, _ = read_excelinvoice(excel_invoice_file)\n        original_sort_items = df_excel_invoice.iloc[:, 0].to_list()\n        if zipfile is None:\n            return [() for _ in range(len(df_excel_invoice[\"basic/dataName\"]))]\n\n        archive_parser = compressed_controller.parse_compressedfile_mode(df_excel_invoice)\n        _parse = archive_parser.read(zipfile, self.out_dir_temp)\n\n        # When storing the same filename in all tiles, fill the values with\n        # the same file so that the number of decompressed files matches\n        # the number of \"filename\" columns in the data frame.\n        if len(_parse) == 1 and len(_parse) != len(df_excel_invoice[df_excel_invoice.columns[0]]):\n            return sorted(\n                [_parse[0] for _ in df_excel_invoice[df_excel_invoice.columns[0]]],\n                key=lambda paths: self.get_index(paths[0], original_sort_items),\n            )\n        if len(_parse) == len(df_excel_invoice[df_excel_invoice.columns[0]]):\n            return sorted(_parse, key=lambda paths: self.get_index(paths[0], original_sort_items))\n        emsg = \"Error! The input file and the description in the ExcelInvoice are not consistent.\"\n        raise StructuredError(emsg)\n\n    def get_index(self, paths: Path, sort_items: Sequence) -&gt; int:\n        \"\"\"Retrieves the index of the `divided` folder.\n\n        Args:\n            paths (pathlib.Path): Directory path of the raw files.\n            sort_items (Sequence): A list of files sorted in the order described in the Excel invoice.\n\n        Returns:\n            int: The index number.\n        \"\"\"\n        for idx, item in enumerate(sort_items):\n            if item in paths.parts:\n                return idx\n        return len(sort_items)\n\n    def _validate_files(self, zipfiles: ZipFilesPathList, excel_invoice_files: ExcelInvoicePathList, other_files: OtherFilesPathList) -&gt; None:\n        self._detect_invalid_zipfiles(zipfiles)\n        self._detect_invalid_excel_invoice_files(excel_invoice_files)\n        self._detect_invalid_other_files(other_files)\n\n    def _detect_invalid_zipfiles(self, zipfiles: ZipFilesPathList) -&gt; None:\n        if len(zipfiles) &gt; 1:\n            emsg = \"ERROR: more than 1 zipped input files\"\n            raise StructuredError(emsg)\n\n    def _detect_invalid_excel_invoice_files(self, excel_invoice_files: ExcelInvoicePathList) -&gt; None:\n        if len(excel_invoice_files) &gt; 1:\n            emsg = f\"ERROR: more than 1 excelinvoice file list. file num: {len(excel_invoice_files)}\"\n            raise StructuredError(emsg)\n\n    def _detect_invalid_other_files(self, other_files: OtherFilesPathList) -&gt; None:\n        if len(other_files) &gt; 0:\n            emsg = \"ERROR: input file should be EXCEL or ZIP file\"\n            raise StructuredError(emsg)\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.ExcelInvoiceChecker.get_index","title":"<code>get_index(paths, sort_items)</code>","text":"<p>Retrieves the index of the <code>divided</code> folder.</p> <p>Parameters:</p> Name Type Description Default <code>paths</code> <code>Path</code> <p>Directory path of the raw files.</p> required <code>sort_items</code> <code>Sequence</code> <p>A list of files sorted in the order described in the Excel invoice.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The index number.</p> Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>def get_index(self, paths: Path, sort_items: Sequence) -&gt; int:\n    \"\"\"Retrieves the index of the `divided` folder.\n\n    Args:\n        paths (pathlib.Path): Directory path of the raw files.\n        sort_items (Sequence): A list of files sorted in the order described in the Excel invoice.\n\n    Returns:\n        int: The index number.\n    \"\"\"\n    for idx, item in enumerate(sort_items):\n        if item in paths.parts:\n            return idx\n    return len(sort_items)\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.ExcelInvoiceChecker._get_group_by_files","title":"<code>_get_group_by_files(input_files)</code>","text":"Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>def _get_group_by_files(self, input_files: list[Path]) -&gt; InputFilesGroup:\n    zipfiles = [f for f in input_files if f.suffix.lower() == \".zip\"]\n    excel_invoice_files = [f for f in input_files if f.suffix.lower() in [\".xls\", \".xlsx\"] and f.stem.endswith(\"_excel_invoice\")]\n    other_files = [f for f in input_files if f not in zipfiles and f not in excel_invoice_files]\n    return zipfiles, excel_invoice_files, other_files\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.ExcelInvoiceChecker._get_rawfiles","title":"<code>_get_rawfiles(zipfile, excel_invoice_file)</code>","text":"Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>def _get_rawfiles(self, zipfile: Path | None, excel_invoice_file: Path) -&gt; list[tuple[Path, ...]]:\n    df_excel_invoice, _, _ = read_excelinvoice(excel_invoice_file)\n    original_sort_items = df_excel_invoice.iloc[:, 0].to_list()\n    if zipfile is None:\n        return [() for _ in range(len(df_excel_invoice[\"basic/dataName\"]))]\n\n    archive_parser = compressed_controller.parse_compressedfile_mode(df_excel_invoice)\n    _parse = archive_parser.read(zipfile, self.out_dir_temp)\n\n    # When storing the same filename in all tiles, fill the values with\n    # the same file so that the number of decompressed files matches\n    # the number of \"filename\" columns in the data frame.\n    if len(_parse) == 1 and len(_parse) != len(df_excel_invoice[df_excel_invoice.columns[0]]):\n        return sorted(\n            [_parse[0] for _ in df_excel_invoice[df_excel_invoice.columns[0]]],\n            key=lambda paths: self.get_index(paths[0], original_sort_items),\n        )\n    if len(_parse) == len(df_excel_invoice[df_excel_invoice.columns[0]]):\n        return sorted(_parse, key=lambda paths: self.get_index(paths[0], original_sort_items))\n    emsg = \"Error! The input file and the description in the ExcelInvoice are not consistent.\"\n    raise StructuredError(emsg)\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.ExcelInvoiceChecker._validate_files","title":"<code>_validate_files(zipfiles, excel_invoice_files, other_files)</code>","text":"Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>def _validate_files(self, zipfiles: ZipFilesPathList, excel_invoice_files: ExcelInvoicePathList, other_files: OtherFilesPathList) -&gt; None:\n    self._detect_invalid_zipfiles(zipfiles)\n    self._detect_invalid_excel_invoice_files(excel_invoice_files)\n    self._detect_invalid_other_files(other_files)\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.ExcelInvoiceChecker._detect_invalid_zipfiles","title":"<code>_detect_invalid_zipfiles(zipfiles)</code>","text":"Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>def _detect_invalid_zipfiles(self, zipfiles: ZipFilesPathList) -&gt; None:\n    if len(zipfiles) &gt; 1:\n        emsg = \"ERROR: more than 1 zipped input files\"\n        raise StructuredError(emsg)\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.ExcelInvoiceChecker._detect_invalid_excel_invoice_files","title":"<code>_detect_invalid_excel_invoice_files(excel_invoice_files)</code>","text":"Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>def _detect_invalid_excel_invoice_files(self, excel_invoice_files: ExcelInvoicePathList) -&gt; None:\n    if len(excel_invoice_files) &gt; 1:\n        emsg = f\"ERROR: more than 1 excelinvoice file list. file num: {len(excel_invoice_files)}\"\n        raise StructuredError(emsg)\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.ExcelInvoiceChecker._detect_invalid_other_files","title":"<code>_detect_invalid_other_files(other_files)</code>","text":"Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>def _detect_invalid_other_files(self, other_files: OtherFilesPathList) -&gt; None:\n    if len(other_files) &gt; 0:\n        emsg = \"ERROR: input file should be EXCEL or ZIP file\"\n        raise StructuredError(emsg)\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#rdeformatchecker","title":"RDEFormatChecker","text":"<p>               Bases: <code>IInputFileChecker</code></p> <p>A checker class to identify and parse the RDE Format.</p> <p>This class is designed to handle files in the RDE Format. It checks the presence of ZIP files, unpacks them, and retrieves raw files from the unpacked content.</p> <p>Attributes:</p> Name Type Description <code>out_dir_temp</code> <code>Path</code> <p>Temporary directory for unpacked content.</p> Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>class RDEFormatChecker(IInputFileChecker):\n    \"\"\"A checker class to identify and parse the RDE Format.\n\n    This class is designed to handle files in the RDE Format. It checks the presence of ZIP files,\n    unpacks them, and retrieves raw files from the unpacked content.\n\n    Attributes:\n        out_dir_temp (Path): Temporary directory for unpacked content.\n    \"\"\"\n\n    def __init__(self, unpacked_dir_basename: Path):\n        self.out_dir_temp = unpacked_dir_basename\n\n    def parse(self, src_dir_input: Path) -&gt; tuple[RawFiles, Path | None]:\n        \"\"\"Parse the source input directory, identify ZIP files, unpack the ZIP file, and return the raw files.\n\n        Args:\n            src_dir_input (Path): Source directory containing the input files.\n\n        Returns:\n            tuple[RawFiles, Optional[Path]]:\n\n                - RawFiles: List of tuples containing paths of raw files.\n                - Optional[Path]: This will always return None for this implementation.\n        \"\"\"\n        input_files = list(src_dir_input.glob(\"*\"))\n        zipfiles = self._get_zipfiles(input_files)\n        if len(zipfiles) != 1:\n            emsg = \"ERROR: no zipped input files\"\n            raise StructuredError(emsg)\n        unpacked_files = self._unpacked(zipfiles[0], self.out_dir_temp)\n        _rawfiles = self._get_rawfiles(unpacked_files)\n        return _rawfiles, None\n\n    def _get_zipfiles(self, input_files: list[Path]) -&gt; ZipFilesPathList:\n        return [f for f in input_files if f.suffix.lower() == \".zip\"]\n\n    def _unpacked(self, zipfile: Path, target_dir: Path) -&gt; list[Path]:\n        shutil.unpack_archive(zipfile, self.out_dir_temp)\n        return [f for f in target_dir.glob(\"**/*\") if f.is_file()]\n\n    def _get_rawfiles(self, unpacked_files: list[Path]) -&gt; RawFiles:\n        _rdefmt_file_groups = defaultdict(list)\n        for f in unpacked_files:\n            match = re.search(r\"/(\\d{4})/\", str(f))\n            if match:\n                idx_folder_num = int(match.group(1))\n                _rdefmt_file_groups[idx_folder_num].append(f)\n            else:\n                _rdefmt_file_groups[0].append(f)\n\n        if _rdefmt_file_groups:\n            return [tuple(_rdefmt_file_groups[key]) for key in sorted(_rdefmt_file_groups.keys())]\n        return [()]\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.RDEFormatChecker.parse","title":"<code>parse(src_dir_input)</code>","text":"<p>Parse the source input directory, identify ZIP files, unpack the ZIP file, and return the raw files.</p> <p>Parameters:</p> Name Type Description Default <code>src_dir_input</code> <code>Path</code> <p>Source directory containing the input files.</p> required <p>Returns:</p> Type Description <code>tuple[RawFiles, Path | None]</code> <p>tuple[RawFiles, Optional[Path]]:</p> <ul> <li>RawFiles: List of tuples containing paths of raw files.</li> <li>Optional[Path]: This will always return None for this implementation.</li> </ul> Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>def parse(self, src_dir_input: Path) -&gt; tuple[RawFiles, Path | None]:\n    \"\"\"Parse the source input directory, identify ZIP files, unpack the ZIP file, and return the raw files.\n\n    Args:\n        src_dir_input (Path): Source directory containing the input files.\n\n    Returns:\n        tuple[RawFiles, Optional[Path]]:\n\n            - RawFiles: List of tuples containing paths of raw files.\n            - Optional[Path]: This will always return None for this implementation.\n    \"\"\"\n    input_files = list(src_dir_input.glob(\"*\"))\n    zipfiles = self._get_zipfiles(input_files)\n    if len(zipfiles) != 1:\n        emsg = \"ERROR: no zipped input files\"\n        raise StructuredError(emsg)\n    unpacked_files = self._unpacked(zipfiles[0], self.out_dir_temp)\n    _rawfiles = self._get_rawfiles(unpacked_files)\n    return _rawfiles, None\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.RDEFormatChecker._get_zipfiles","title":"<code>_get_zipfiles(input_files)</code>","text":"Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>def _get_zipfiles(self, input_files: list[Path]) -&gt; ZipFilesPathList:\n    return [f for f in input_files if f.suffix.lower() == \".zip\"]\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.RDEFormatChecker._unpacked","title":"<code>_unpacked(zipfile, target_dir)</code>","text":"Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>def _unpacked(self, zipfile: Path, target_dir: Path) -&gt; list[Path]:\n    shutil.unpack_archive(zipfile, self.out_dir_temp)\n    return [f for f in target_dir.glob(\"**/*\") if f.is_file()]\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.RDEFormatChecker._get_rawfiles","title":"<code>_get_rawfiles(unpacked_files)</code>","text":"Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>def _get_rawfiles(self, unpacked_files: list[Path]) -&gt; RawFiles:\n    _rdefmt_file_groups = defaultdict(list)\n    for f in unpacked_files:\n        match = re.search(r\"/(\\d{4})/\", str(f))\n        if match:\n            idx_folder_num = int(match.group(1))\n            _rdefmt_file_groups[idx_folder_num].append(f)\n        else:\n            _rdefmt_file_groups[0].append(f)\n\n    if _rdefmt_file_groups:\n        return [tuple(_rdefmt_file_groups[key]) for key in sorted(_rdefmt_file_groups.keys())]\n    return [()]\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#multifilechecker","title":"MultiFileChecker","text":"<p>               Bases: <code>IInputFileChecker</code></p> <p>A checker class to identify and parse the MultiFile mode.</p> <p>This class is designed to handle multiple file modes. It checks the files in the source input directory, groups them, and retrieves the raw files.</p> <p>Attributes:</p> Name Type Description <code>out_dir_temp</code> <code>Path</code> <p>Temporary directory used for certain operations.</p> Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>class MultiFileChecker(IInputFileChecker):\n    \"\"\"A checker class to identify and parse the MultiFile mode.\n\n    This class is designed to handle multiple file modes. It checks the files in the source input\n    directory, groups them, and retrieves the raw files.\n\n    Attributes:\n        out_dir_temp (Path): Temporary directory used for certain operations.\n    \"\"\"\n\n    def __init__(self, unpacked_dir_basename: Path):\n        self.out_dir_temp = unpacked_dir_basename\n\n    def parse(self, src_dir_input: Path) -&gt; tuple[RawFiles, Path | None]:\n        \"\"\"Parse the source input directory, group ZIP files and other files, and return the raw files.\n\n        Args:\n            src_dir_input (Path): Source directory containing the input files.\n\n        Returns:\n            tuple[RawFiles, Optional[Path]]:\n\n                - RawFiles: List of tuples containing paths of raw files.\n                - Optional[Path]: This will always return None for this implementation.\n        \"\"\"\n        input_files = list(src_dir_input.glob(\"*\"))\n        other_files = self._get_group_by_files(input_files)\n        _rawfiles: list[tuple[Path, ...]] = [(f,) for f in other_files]\n        return sorted(_rawfiles, key=lambda path: str(path)), None\n\n    def _get_group_by_files(self, input_files: list[Path]) -&gt; OtherFilesPathList:\n        excel_invoice_files = [f for f in input_files if f.suffix.lower() in [\".xls\", \"xlsx\"] and f.stem.endswith(\"_excel_invoice\")]\n        return [f for f in input_files if f not in excel_invoice_files]\n\n    def _unpacked(self, zipfile: Path, target_dir: Path) -&gt; list[Path]:\n        shutil.unpack_archive(zipfile, self.out_dir_temp)\n        return [f for f in target_dir.glob(\"**/*\") if f.is_file()]\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.MultiFileChecker.parse","title":"<code>parse(src_dir_input)</code>","text":"<p>Parse the source input directory, group ZIP files and other files, and return the raw files.</p> <p>Parameters:</p> Name Type Description Default <code>src_dir_input</code> <code>Path</code> <p>Source directory containing the input files.</p> required <p>Returns:</p> Type Description <code>tuple[RawFiles, Path | None]</code> <p>tuple[RawFiles, Optional[Path]]:</p> <ul> <li>RawFiles: List of tuples containing paths of raw files.</li> <li>Optional[Path]: This will always return None for this implementation.</li> </ul> Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>def parse(self, src_dir_input: Path) -&gt; tuple[RawFiles, Path | None]:\n    \"\"\"Parse the source input directory, group ZIP files and other files, and return the raw files.\n\n    Args:\n        src_dir_input (Path): Source directory containing the input files.\n\n    Returns:\n        tuple[RawFiles, Optional[Path]]:\n\n            - RawFiles: List of tuples containing paths of raw files.\n            - Optional[Path]: This will always return None for this implementation.\n    \"\"\"\n    input_files = list(src_dir_input.glob(\"*\"))\n    other_files = self._get_group_by_files(input_files)\n    _rawfiles: list[tuple[Path, ...]] = [(f,) for f in other_files]\n    return sorted(_rawfiles, key=lambda path: str(path)), None\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.MultiFileChecker._get_group_by_files","title":"<code>_get_group_by_files(input_files)</code>","text":"Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>def _get_group_by_files(self, input_files: list[Path]) -&gt; OtherFilesPathList:\n    excel_invoice_files = [f for f in input_files if f.suffix.lower() in [\".xls\", \"xlsx\"] and f.stem.endswith(\"_excel_invoice\")]\n    return [f for f in input_files if f not in excel_invoice_files]\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.MultiFileChecker._unpacked","title":"<code>_unpacked(zipfile, target_dir)</code>","text":"Source code in <code>src/rdetoolkit/impl/input_controller.py</code> <pre><code>def _unpacked(self, zipfile: Path, target_dir: Path) -&gt; list[Path]:\n    shutil.unpack_archive(zipfile, self.out_dir_temp)\n    return [f for f in target_dir.glob(\"**/*\") if f.is_file()]\n</code></pre>"},{"location":"rdetoolkit/interface/filechecker/","title":"filechecker","text":"<p>In <code>filechecker</code>, interfaces for handling input file operations are defined.</p>"},{"location":"rdetoolkit/interface/filechecker/#iinputfilehelper","title":"IInputFileHelper","text":"<p>The abstract interface <code>IInputFileHelper</code> is defined. This interface represents a helper for handling input file operations.</p> <p>               Bases: <code>ABC</code></p> <p>An abstract interface representing a helper for input file operations.</p> <p>This interface defines the expected operations to handle and process zip files among a list of input files.</p> <p>Methods:</p> Name Description <code>get_zipfiles</code> <p>list[Path]) -&gt; ZipFilesPathList:</p> <code>unpacked</code> <p>Path, target_dir: Path) -&gt; UnZipFilesPathList:</p> Source code in <code>src/rdetoolkit/interfaces/filechecker.py</code> <pre><code>class IInputFileHelper(ABC):\n    \"\"\"An abstract interface representing a helper for input file operations.\n\n    This interface defines the expected operations to handle and process zip files\n    among a list of input files.\n\n    Methods:\n        get_zipfiles(input_files: list[Path]) -&gt; ZipFilesPathList:\n        unpacked(zipfile: Path, target_dir: Path) -&gt; UnZipFilesPathList:\n    \"\"\"\n\n    @abstractmethod\n    def get_zipfiles(self, input_files: list[Path]) -&gt; ZipFilesPathList:\n        \"\"\"Retrieves a list of paths to zip files from a list of input file paths.\n\n        Args:\n            input_files (list[Path]): A list of file paths to search for zip files.\n\n        Returns:\n            ZipFilesPathList: A list of paths pointing to the found zip files.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def unpacked(self, zipfile: Path, target_dir: Path) -&gt; UnZipFilesPathList:\n        \"\"\"Unpacks a specified zip file into a target directory and returns a list of paths to the unpacked files.\n\n        Args:\n            zipfile (Path): The path to the zip file to be unpacked.\n            target_dir (Path): The directory where the zip file contents will be unpacked.\n\n        Returns:\n            UnZipFilesPathList: A list of paths to the unpacked files.\n        \"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"rdetoolkit/interface/filechecker/#src.rdetoolkit.interfaces.filechecker.IInputFileHelper.get_zipfiles","title":"<code>get_zipfiles(input_files)</code>  <code>abstractmethod</code>","text":"<p>Retrieves a list of paths to zip files from a list of input file paths.</p> <p>Parameters:</p> Name Type Description Default <code>input_files</code> <code>list[Path]</code> <p>A list of file paths to search for zip files.</p> required <p>Returns:</p> Name Type Description <code>ZipFilesPathList</code> <code>ZipFilesPathList</code> <p>A list of paths pointing to the found zip files.</p> Source code in <code>src/rdetoolkit/interfaces/filechecker.py</code> <pre><code>@abstractmethod\ndef get_zipfiles(self, input_files: list[Path]) -&gt; ZipFilesPathList:\n    \"\"\"Retrieves a list of paths to zip files from a list of input file paths.\n\n    Args:\n        input_files (list[Path]): A list of file paths to search for zip files.\n\n    Returns:\n        ZipFilesPathList: A list of paths pointing to the found zip files.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"rdetoolkit/interface/filechecker/#src.rdetoolkit.interfaces.filechecker.IInputFileHelper.unpacked","title":"<code>unpacked(zipfile, target_dir)</code>  <code>abstractmethod</code>","text":"<p>Unpacks a specified zip file into a target directory and returns a list of paths to the unpacked files.</p> <p>Parameters:</p> Name Type Description Default <code>zipfile</code> <code>Path</code> <p>The path to the zip file to be unpacked.</p> required <code>target_dir</code> <code>Path</code> <p>The directory where the zip file contents will be unpacked.</p> required <p>Returns:</p> Name Type Description <code>UnZipFilesPathList</code> <code>UnZipFilesPathList</code> <p>A list of paths to the unpacked files.</p> Source code in <code>src/rdetoolkit/interfaces/filechecker.py</code> <pre><code>@abstractmethod\ndef unpacked(self, zipfile: Path, target_dir: Path) -&gt; UnZipFilesPathList:\n    \"\"\"Unpacks a specified zip file into a target directory and returns a list of paths to the unpacked files.\n\n    Args:\n        zipfile (Path): The path to the zip file to be unpacked.\n        target_dir (Path): The directory where the zip file contents will be unpacked.\n\n    Returns:\n        UnZipFilesPathList: A list of paths to the unpacked files.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"rdetoolkit/interface/filechecker/#iinputfilechecker","title":"IInputFileChecker","text":"<p>The abstract interface <code>IInputFileChecker</code> is defined. This interface represents a helper for checking input files.</p> <p>               Bases: <code>ABC</code></p> <p>An abstract interface for checking and parsing input files.</p> <p>This interface is designed to define the structure for classes that handle the parsing of source input files. It's responsible for validating and extracting necessary information from these files.</p> Source code in <code>src/rdetoolkit/interfaces/filechecker.py</code> <pre><code>class IInputFileChecker(ABC):\n    \"\"\"An abstract interface for checking and parsing input files.\n\n    This interface is designed to define the structure for classes that handle the parsing of source input files. It's responsible for validating and extracting necessary information from these files.\n    \"\"\"\n\n    @abstractmethod\n    def parse(self, src_input_path: Path) -&gt; tuple[RawFiles, Path | None]:\n        \"\"\"Parses the given source input path and extracts relevant information.\n\n        This method should analyze the file or files located at the specified path and extract\n        essential data needed for further processing.\n\n        Args:\n            src_input_path (Path): The path to the source input file(s).\n\n        Returns:\n            tuple[RawFiles, Optional[Path]]: A tuple where the first element is the extracted raw file data,\n                                            and the second element is an optional path to additional relevant data.\n        \"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"rdetoolkit/interface/filechecker/#src.rdetoolkit.interfaces.filechecker.IInputFileChecker.parse","title":"<code>parse(src_input_path)</code>  <code>abstractmethod</code>","text":"<p>Parses the given source input path and extracts relevant information.</p> <p>This method should analyze the file or files located at the specified path and extract essential data needed for further processing.</p> <p>Parameters:</p> Name Type Description Default <code>src_input_path</code> <code>Path</code> <p>The path to the source input file(s).</p> required <p>Returns:</p> Type Description <code>tuple[RawFiles, Path | None]</code> <p>tuple[RawFiles, Optional[Path]]: A tuple where the first element is the extracted raw file data,                             and the second element is an optional path to additional relevant data.</p> Source code in <code>src/rdetoolkit/interfaces/filechecker.py</code> <pre><code>@abstractmethod\ndef parse(self, src_input_path: Path) -&gt; tuple[RawFiles, Path | None]:\n    \"\"\"Parses the given source input path and extracts relevant information.\n\n    This method should analyze the file or files located at the specified path and extract\n    essential data needed for further processing.\n\n    Args:\n        src_input_path (Path): The path to the source input file(s).\n\n    Returns:\n        tuple[RawFiles, Optional[Path]]: A tuple where the first element is the extracted raw file data,\n                                        and the second element is an optional path to additional relevant data.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"rdetoolkit/interface/filechecker/#icompressedfilestructparser","title":"ICompressedFileStructParser","text":"<p>The abstract interface <code>ICompressedFileStructParser</code> is defined. This interface represents a helper for parsing the structure of compressed files.</p> <p>               Bases: <code>ABC</code></p> <p>An abstract interface for parsing the structure of compressed files.</p> <p>This interface defines the expected operations for classes that are responsible for reading and understanding the structure of compressed files (like zip files), especially focusing on how these files are organized internally.</p> Source code in <code>src/rdetoolkit/interfaces/filechecker.py</code> <pre><code>class ICompressedFileStructParser(ABC):\n    \"\"\"An abstract interface for parsing the structure of compressed files.\n\n    This interface defines the expected operations for classes that are responsible for\n    reading and understanding the structure of compressed files (like zip files), especially focusing on how these files are organized internally.\n    \"\"\"\n\n    @abstractmethod\n    def read(self, zipfile: Path, target_path: Path) -&gt; list[tuple[Path, ...]]:\n        \"\"\"Reads and parses the structure of the compressed file.\n\n        This method should open and inspect the contents of a compressed file, extracting information about its internal structure, such as file paths and organization.\n\n        Args:\n            zipfile (Path): The path to the compressed file to be read.\n            target_path (Path): The path where the contents of the compressed file might be extracted or analyzed.\n\n        Returns:\n            List[Tuple[Path, ...]]: A list of tuples, each containing paths or other relevant data extracted from the compressed file.\n        \"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"rdetoolkit/interface/filechecker/#src.rdetoolkit.interfaces.filechecker.ICompressedFileStructParser.read","title":"<code>read(zipfile, target_path)</code>  <code>abstractmethod</code>","text":"<p>Reads and parses the structure of the compressed file.</p> <p>This method should open and inspect the contents of a compressed file, extracting information about its internal structure, such as file paths and organization.</p> <p>Parameters:</p> Name Type Description Default <code>zipfile</code> <code>Path</code> <p>The path to the compressed file to be read.</p> required <code>target_path</code> <code>Path</code> <p>The path where the contents of the compressed file might be extracted or analyzed.</p> required <p>Returns:</p> Type Description <code>list[tuple[Path, ...]]</code> <p>List[Tuple[Path, ...]]: A list of tuples, each containing paths or other relevant data extracted from the compressed file.</p> Source code in <code>src/rdetoolkit/interfaces/filechecker.py</code> <pre><code>@abstractmethod\ndef read(self, zipfile: Path, target_path: Path) -&gt; list[tuple[Path, ...]]:\n    \"\"\"Reads and parses the structure of the compressed file.\n\n    This method should open and inspect the contents of a compressed file, extracting information about its internal structure, such as file paths and organization.\n\n    Args:\n        zipfile (Path): The path to the compressed file to be read.\n        target_path (Path): The path where the contents of the compressed file might be extracted or analyzed.\n\n    Returns:\n        List[Tuple[Path, ...]]: A list of tuples, each containing paths or other relevant data extracted from the compressed file.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"rdetoolkit/models/config/","title":"config","text":""},{"location":"rdetoolkit/models/config/#config_1","title":"Config","text":"<p>               Bases: <code>BaseModel</code></p> <p>The configuration class used in RDEToolKit.</p> <p>Attributes:</p> Name Type Description <code>system</code> <code>SystemSettings</code> <p>System related settings.</p> <code>multidata_tile</code> <code>MultiDataTileSettings | None</code> <p>MultiDataTile related settings.</p> Source code in <code>src/rdetoolkit/models/config.py</code> <pre><code>class Config(BaseModel, extra=\"allow\"):\n    \"\"\"The configuration class used in RDEToolKit.\n\n    Attributes:\n        system (SystemSettings): System related settings.\n        multidata_tile (MultiDataTileSettings | None): MultiDataTile related settings.\n    \"\"\"\n    system: SystemSettings = Field(default_factory=SystemSettings, description=\"System related settings\")\n    multidata_tile: MultiDataTileSettings | None = Field(default_factory=MultiDataTileSettings, description=\"MultiDataTile related settings\")\n</code></pre>"},{"location":"rdetoolkit/models/config/#systemsettings","title":"SystemSettings","text":"<p>               Bases: <code>BaseModel</code></p> <p>SystemSettings is a configuration model for the RDEtoolkit system settings.</p> <p>Attributes:</p> Name Type Description <code>extended_mode</code> <code>str | None</code> <p>The mode to run the RDEtoolkit in. Options include 'rdeformat' and 'MultiDataTile'. Default is None.</p> <code>save_raw</code> <code>bool</code> <p>Indicates whether to automatically save raw data to the raw directory. Default is False.</p> <code>save_nonshared_raw</code> <code>bool</code> <p>Indicates whether to save nonshared raw data. If True, non-shared raw data will be saved. Default is True.</p> <code>save_thumbnail_image</code> <code>bool</code> <p>Indicates whether to automatically save the main image to the thumbnail directory. Default is False.</p> <code>magic_variable</code> <code>bool</code> <p>A feature where specifying '${filename}' as the data name results in the filename being transcribed as the data name. Default is False.</p> Source code in <code>src/rdetoolkit/models/config.py</code> <pre><code>class SystemSettings(BaseModel):\n    \"\"\"SystemSettings is a configuration model for the RDEtoolkit system settings.\n\n    Attributes:\n        extended_mode (str | None): The mode to run the RDEtoolkit in. Options include 'rdeformat' and 'MultiDataTile'. Default is None.\n        save_raw (bool): Indicates whether to automatically save raw data to the raw directory. Default is False.\n        save_nonshared_raw (bool): Indicates whether to save nonshared raw data. If True, non-shared raw data will be saved. Default is True.\n        save_thumbnail_image (bool): Indicates whether to automatically save the main image to the thumbnail directory. Default is False.\n        magic_variable (bool): A feature where specifying '${filename}' as the data name results in the filename being transcribed as the data name. Default is False.\n    \"\"\"\n\n    extended_mode: str | None = Field(default=None, description=\"The mode to run the RDEtoolkit in. select: rdeformat, MultiDataTile\")\n    save_raw: bool = Field(default=False, description=\"Auto Save raw data to the raw directory\")\n    save_nonshared_raw: bool = Field(default=True, description=\"Specifies whether to save nonshared raw data. If True, non-shared raw data will be saved.\")\n    save_thumbnail_image: bool = Field(default=False, description=\"Auto Save main image to the thumbnail directory\")\n    magic_variable: bool = Field(\n        default=False,\n        description=\"The feature where specifying '${filename}' as the data name results in the filename being transcribed as the data name.\",\n    )\n</code></pre>"},{"location":"rdetoolkit/models/config/#multidatatilesettings","title":"MultiDataTileSettings","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>src/rdetoolkit/models/config.py</code> <pre><code>class MultiDataTileSettings(BaseModel):\n    ignore_errors: bool = Field(default=False, description=\"If true, errors encountered during processing will be ignored, and the process will continue without stopping.\")\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/","title":"invoice_schema","text":"<p>In <code>invoice_schema</code>, models for validators used in RDE's invoice.schema.json are defined.</p>"},{"location":"rdetoolkit/models/invoice_schema/#invoiceschemajson","title":"InvoiceSchemaJson","text":"<p>               Bases: <code>BaseModel</code></p> <p>Invoice schema class.</p> Example <p>To generate invoice.schema.json from the model, do as follows: <pre><code>obj = InvoiceSchemaJson(\n    version=\"https://json-schema.org/draft/2020-12/schema\",\n    schema_id=\"https://rde.nims.go.jp/rde/dataset-templates/dataset_template_custom_sample/invoice.schema.json\",\n    description=\"RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30c6\u30b9\u30c8\u7528\u30d5\u30a1\u30a4\u30eb\",\n    type=\"object\",\n    properties=Properties()\n)\nprint(obj.model_dump_json())\n</code></pre></p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class InvoiceSchemaJson(BaseModel):\n    \"\"\"Invoice schema class.\n\n    Example:\n        To generate invoice.schema.json from the model, do as follows:\n        ```python\n        obj = InvoiceSchemaJson(\n            version=\"https://json-schema.org/draft/2020-12/schema\",\n            schema_id=\"https://rde.nims.go.jp/rde/dataset-templates/dataset_template_custom_sample/invoice.schema.json\",\n            description=\"RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30c6\u30b9\u30c8\u7528\u30d5\u30a1\u30a4\u30eb\",\n            type=\"object\",\n            properties=Properties()\n        )\n        print(obj.model_dump_json())\n        ```\n    \"\"\"\n\n    model_config = ConfigDict(populate_by_name=True)\n\n    version: str = Field(default=\"https://json-schema.org/draft/2020-12/schema\", validation_alias=\"$schema\")\n    schema_id: str = Field(default=\"https://rde.nims.go.jp/rde/dataset-templates/\", validation_alias=\"$id\")\n    description: Optional[str] = Field(default=None)\n    value_type: Literal[\"object\"] = Field(default=\"object\", alias=\"type\")\n    required: Optional[list[Literal[\"custom\", \"sample\"]]] = Field(default=None)\n    properties: Properties\n\n    @model_validator(mode=\"after\")\n    def __check_required_fields(self):\n        if self.required is None:\n            return self\n        if \"custom\" in self.required and self.properties.custom is None:\n            raise ValueError(\"custom is required but is None\")\n        elif \"sample\" in self.required and self.properties.sample is None:\n            raise ValueError(\"sample is required but is None\")\n        return self\n\n    @model_validator(mode=\"after\")\n    def __check_custom_fields(self):\n        if not self.properties.custom:\n            return self\n        if \"custom\" not in self.required:\n            raise ValueError(\"custom is required but is None\")\n        return self\n\n    @model_validator(mode=\"after\")\n    def __check_smaple_field(self):\n        if not self.properties.sample:\n            return self\n        if \"sample\" not in self.required:\n            raise ValueError(\"sample is required but is None\")\n        return self\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#properties","title":"Properties","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the properties of an invoice.</p> <p><code>properties</code> is an instance of this class.</p> <p>Attributes:</p> Name Type Description <code>custom</code> <code>Optional[CustomField]</code> <p>The custom field of the invoice.</p> <code>sample</code> <code>Optional[str]</code> <p>A sample field of the invoice.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class Properties(BaseModel):\n    \"\"\"Represents the properties of an invoice.\n\n    `properties` is an instance of this class.\n\n    Attributes:\n        custom (Optional[CustomField]): The custom field of the invoice.\n        sample (Optional[str]): A sample field of the invoice.\n    \"\"\"\n\n    custom: Optional[CustomField] = Field(default=None)\n    sample: Optional[SampleField] = Field(default=None)\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#datasetid","title":"DatasetId","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the dataset ID for an invoice.</p> <p><code>properties.datasetId</code> is an instance of this class.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class DatasetId(BaseModel):\n    \"\"\"Represents the dataset ID for an invoice.\n\n    `properties.datasetId` is an instance of this class.\n    \"\"\"\n\n    value_type: str = Field(default=\"string\", alias=\"type\")\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#basicitems","title":"BasicItems","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the basic items of an invoice.</p> <p><code>properties.basic</code> is an instance of this class.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class BasicItems(BaseModel):\n    \"\"\"Represents the basic items of an invoice.\n\n    `properties.basic` is an instance of this class.\n    \"\"\"\n\n    dateSubmitted: BasicItemsValue = Field(default=BasicItemsValue(type=\"string\", format=\"date\"))\n    dataOwnerId: BasicItemsValue = Field(default=BasicItemsValue(type=\"string\", pattern=\"^([0-9a-zA-Z]{56})$\"))\n    dateName: BasicItemsValue = Field(default=BasicItemsValue(type=\"string\", pattern=\"^([0-9a-zA-Z]{56})$\"))\n    instrumentId: Optional[BasicItemsValue] = Field(\n        default=BasicItemsValue(type=\"string\", pattern=\"^$|^([0-9a-zA-Z]{8}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{12})$\")\n    )\n    experimentId: Optional[BasicItemsValue] = Field(default=None)\n    description: Optional[BasicItemsValue] = Field(default=None)\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#basicitemsvalue","title":"BasicItemsValue","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class BasicItemsValue(BaseModel):\n    value_type: Union[str, list, None] = Field(default=None, alias=\"type\")\n    format: Optional[Literal[\"date\"]] = Field(default=None)\n    pattern: Optional[str] = Field(default=None)\n    description: Optional[str] = Field(default=None)\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#samplefield","title":"SampleField","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a sample field in the invoice schema.</p> <p><code>properties.sample</code> is an instance of this class.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class SampleField(BaseModel):\n    \"\"\"Represents a sample field in the invoice schema.\n\n    `properties.sample` is an instance of this class.\n    \"\"\"\n\n    obj_type: Literal[\"object\"] = Field(..., alias=\"type\")\n    label: LangLabels\n    required: list[Literal[\"names\", \"sampleId\"]] = Field(default=[\"names\", \"sampleId\"])\n    properties: SampleProperties\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#sampleproperties","title":"SampleProperties","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the properties of a sample.</p> <p><code>properties.sample.properties</code> is an instance of this class.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class SampleProperties(BaseModel):\n    \"\"\"Represents the properties of a sample.\n\n    `properties.sample.properties` is an instance of this class.\n    \"\"\"\n\n    generalAttributes: Optional[GeneralAttribute] = Field(default=None, alias=\"generalAttributes\")\n    specificAttributes: Optional[SpecificAttribute] = Field(default=None, alias=\"specificAttributes\")\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#samplepropertieswhenadding","title":"SamplePropertiesWhenAdding","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the properties of a sample.</p> <p><code>properties.sample.properties</code> is an instance of this class.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class SamplePropertiesWhenAdding(BaseModel):\n    \"\"\"Represents the properties of a sample.\n\n    `properties.sample.properties` is an instance of this class.\n    \"\"\"\n\n    sample_id: Optional[str] = Field(default=None, alias=\"sampleId\")\n    ownerId: str = Field(pattern=\"^([0-9a-zA-Z]{56})$\", description=\"sample ownere id\", alias=\"ownerId\")\n    composition: Optional[str] = Field(default=None, alias=\"composition\")\n    referenceUrl: Optional[str] = Field(default=None, alias=\"referenceUrl\")\n    description: Optional[str] = Field(default=None, alias=\"description\")\n    generalAttributes: Optional[GeneralAttribute] = Field(default=None, alias=\"generalAttributes\")\n    specificAttributes: Optional[SpecificAttribute] = Field(default=None, alias=\"specificAttributes\")\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#specificattribute","title":"SpecificAttribute","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a specific attribute in the invoice schema.</p> <p><code>properties.sample.properties.specificAttribute</code> is an instance of this class.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class SpecificAttribute(BaseModel):\n    \"\"\"Represents a specific attribute in the invoice schema.\n\n    `properties.sample.properties.specificAttribute` is an instance of this class.\n    \"\"\"\n\n    obj_type: Literal[\"array\"] = Field(..., alias=\"type\")\n    items: SampleSpecificItems\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#samplespecificitems","title":"SampleSpecificItems","text":"<p>               Bases: <code>RootModel</code></p> <p>Represents a specificAttirbutes child property.</p> <p><code>properties.sample.properties.specificAttributes.itemss</code> is an instance of this class.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class SampleSpecificItems(RootModel):\n    \"\"\"Represents a specificAttirbutes child property.\n\n    `properties.sample.properties.specificAttributes.itemss` is an instance of this class.\n    \"\"\"\n\n    root: list[SpecificProperty]\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#specificproperty","title":"SpecificProperty","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a specificAttirbutes child property.</p> <p><code>properties.sample.properties.specificAttributes.itemss</code> is an instance of this class.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class SpecificProperty(BaseModel):\n    \"\"\"Represents a specificAttirbutes child property.\n\n    `properties.sample.properties.specificAttributes.itemss` is an instance of this class.\n    \"\"\"\n\n    object_type: Literal[\"object\"] = Field(..., alias=\"type\")\n    required: list[Literal[\"classId\", \"termId\", \"value\"]]\n    properties: SpecificChildProperty\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#specificchildproperty","title":"SpecificChildProperty","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a specificAttirbutes child property.</p> <p><code>properties.sample.properties.specificAttributes.items.properties</code> is an instance of this class.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class SpecificChildProperty(BaseModel):\n    \"\"\"Represents a specificAttirbutes child property.\n\n    `properties.sample.properties.specificAttributes.items.properties` is an instance of this class.\n    \"\"\"\n\n    term_id: TermId = Field(..., alias=\"termId\")\n    class_id: ClassId = Field(..., alias=\"classId\")\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#generalattribute","title":"GeneralAttribute","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a general attribute in the invoice schema.</p> <p><code>properties.sample.properties.generalAttribute</code> is an instance of this class.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class GeneralAttribute(BaseModel):\n    \"\"\"Represents a general attribute in the invoice schema.\n\n    `properties.sample.properties.generalAttribute` is an instance of this class.\n    \"\"\"\n\n    obj_type: Literal[\"array\"] = Field(..., alias=\"type\")\n    items: SampleGeneralItems\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#samplegeneralitems","title":"SampleGeneralItems","text":"<p>               Bases: <code>RootModel</code></p> <p>Represents a sample general item.</p> <p>This class is used as the instance for <code>properties.sample.properties.generalAtttirbutes.items</code>.</p> <p>Attributes:</p> Name Type Description <code>root</code> <code>Optional[list[GeneralProperty]]</code> <p>The list of general properties. Defaults to None.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class SampleGeneralItems(RootModel):\n    \"\"\"Represents a sample general item.\n\n    This class is used as the instance for `properties.sample.properties.generalAtttirbutes.items`.\n\n    Attributes:\n        root (Optional[list[GeneralProperty]]): The list of general properties. Defaults to None.\n    \"\"\"\n\n    root: Optional[list[GeneralProperty]] = Field(default=None)\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#generalproperty","title":"GeneralProperty","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a general property in the invoice schema.</p> <p><code>properties.sample.properties.generalAtttirbutes.items</code> is an instance of this class.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class GeneralProperty(BaseModel):\n    \"\"\"Represents a general property in the invoice schema.\n\n    `properties.sample.properties.generalAtttirbutes.items` is an instance of this class.\n    \"\"\"\n\n    object_type: Literal[\"object\"] = Field(..., alias=\"type\")\n    required: list[Literal[\"termId\", \"value\"]]\n    properties: GeneralChildProperty\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#generalchildproperty","title":"GeneralChildProperty","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a general child property.</p> <p><code>properties.sample.properties.generalAtttirbutes.items.properties</code> is an instance of this class.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class GeneralChildProperty(BaseModel):\n    \"\"\"Represents a general child property.\n\n    `properties.sample.properties.generalAtttirbutes.items.properties` is an instance of this class.\n    \"\"\"\n\n    term_id: TermId = Field(..., alias=\"termId\")\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#classid","title":"ClassId","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the ClassId for an invoice.</p> <p><code>properties.sample.properties.specificAttributes.items.properties.classId</code> is an instance of this class.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class ClassId(BaseModel):\n    \"\"\"Represents the ClassId for an invoice.\n\n    `properties.sample.properties.specificAttributes.items.properties.classId` is an instance of this class.\n    \"\"\"\n\n    const: str\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#termid","title":"TermId","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a term identifier.</p> <p><code>properties.sample.properties.generalAtttirbutes.items.properties.termId</code> is an instance of this class.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class TermId(BaseModel):\n    \"\"\"Represents a term identifier.\n\n    `properties.sample.properties.generalAtttirbutes.items.properties.termId` is an instance of this class.\n    \"\"\"\n\n    const: str\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#customfield","title":"CustomField","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a custom field in an invoice schema.</p> <p><code>properties.custom.</code> is an instance of this class.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class CustomField(BaseModel):\n    \"\"\"Represents a custom field in an invoice schema.\n\n    `properties.custom.` is an instance of this class.\n    \"\"\"\n\n    obj_type: Literal[\"object\"] = Field(..., alias=\"type\")\n    label: LangLabels\n    required: list[str]\n    properties: CustomItems\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#customitems","title":"CustomItems","text":"<p>               Bases: <code>RootModel</code></p> <p>A class representing custom items in an invoice schema.</p> <p><code>properties.custom.properties.&lt;custom key&gt;</code> is an instance of this class.</p> <p>Attributes:</p> Name Type Description <code>root</code> <code>dict[str, MetaProperty]</code> <p>A dictionary containing the custom items.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class CustomItems(RootModel):\n    \"\"\"A class representing custom items in an invoice schema.\n\n    `properties.custom.properties.&lt;custom key&gt;` is an instance of this class.\n\n    Attributes:\n        root (dict[str, MetaProperty]): A dictionary containing the custom items.\n    \"\"\"\n\n    root: dict[str, MetaProperty]\n\n    def __iter__(self):\n        return iter(self.root)\n\n    def __getitem__(self, item):\n        return self.root[item]\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#metaproperty","title":"MetaProperty","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a meta property in the invoice schema.</p> <p>Attributes:</p> Name Type Description <code>label</code> <code>LangLabels</code> <p>The label of the meta property.</p> <code>value_type</code> <code>Literal['boolean', 'integer', 'number', 'string']</code> <p>The type of the value for the meta property.</p> <code>description</code> <code>Optional[str]</code> <p>The description of the meta property.</p> <code>examples</code> <code>Optional[str]</code> <p>Examples of the meta property.</p> <code>default</code> <code>Optional[Union[bool, int, float, str]]</code> <p>The default value for the meta property.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class MetaProperty(BaseModel):\n    \"\"\"Represents a meta property in the invoice schema.\n\n    Attributes:\n        label (LangLabels): The label of the meta property.\n        value_type (Literal[\"boolean\", \"integer\", \"number\", \"string\"]): The type of the value for the meta property.\n        description (Optional[str]): The description of the meta property.\n        examples (Optional[str]): Examples of the meta property.\n        default (Optional[Union[bool, int, float, str]]): The default value for the meta property.\n    \"\"\"\n\n    model_config = ConfigDict(extra=\"allow\")\n\n    label: LangLabels\n    value_type: Literal[\"boolean\", \"integer\", \"number\", \"string\"] = Field(..., alias=\"type\")\n    description: Optional[str] = Field(default=None)\n    examples: Optional[list[Union[bool, int, float, str]]] = Field(default=None)\n    default: Optional[Union[bool, int, float, str]] = Field(default=None)\n    const: Optional[Union[bool, int, float, str]] = Field(default=None)\n    enum: Optional[list[Union[bool, int, float, str]]] = Field(default=None)\n    maximum: Optional[int] = Field(\n        default=None,\n        description=\"Declare that the number is less than or equal to the specified value. Only applicable when the type is a numeric type (integer, number).\",\n    )\n    exclusiveMaximum: Optional[int] = Field(\n        default=None,\n        description=\"Declare that the number is less than the specified value. Only applicable when the type is a numeric type (integer, number).\",\n    )\n    minimum: Optional[int] = Field(\n        default=None,\n        description=\"Declare that the number is greater than or equal to the specified value. Only applicable when the type is a numeric type (integer, number).\",\n    )\n    exclusiveMinimum: Optional[int] = Field(\n        default=None,\n        description=\"Declare that the number is greater than the specified value. Only applicable when the type is a numeric type (integer, number).\",\n    )\n    maxLength: Optional[int] = Field(default=None, description=\"Specify the maximum length of the string.\")\n    minLength: Optional[int] = Field(default=None, description=\"Specify the minimum length of the string. Must be 0 or more.\")\n    pattern: Optional[str] = Field(default=None, description=\"Declare that it has a pattern specified by a regular expression.\")\n    format: Optional[Literal[\"date\", \"time\", \"uri\", \"uuid\", \"markdown\"]] = Field(\n        default=None, description=\"Specify the format of the string. Refer to date, time, uri, uuid, markdown for possible values.\"\n    )\n\n    @model_validator(mode=\"after\")\n    def __check_numeric_type(self):\n        # If any of the maximum, exclusiveMaximum, minimum, or exclusiveMinimum fields are set, the value_type must be either integer or number.\n        if (self.maximum or self.exclusiveMaximum or self.minimum or self.exclusiveMinimum) and self.value_type not in [\"integer\", \"number\"]:\n            raise ValueError(\"Custom Validation: The field must be of type integer or number.\")\n        return self\n\n    @model_validator(mode=\"after\")\n    def __check_string_type(self):\n        if (self.maxLength or self.minLength) and self.value_type != \"string\":\n            raise ValueError(\"Custom Validation: The field must be of type string.\")\n        return self\n\n    @model_validator(mode=\"after\")\n    def __check_const_type(self):\n        if self.const is not None:\n            # If the value of 'const' is different from 'value_type', raise an error.\n            if not isinstance(self.value_type, type(self.const)):\n                raise ValueError(\"Custom Validation: The two objects are of different types.\")\n        return self\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#options","title":"Options","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the options for a widget in the invoice schema.</p> <p><code>properties.custom.properties.&lt;custom key&gt;.options</code> is an instance of this class.</p> <p>Attributes:</p> Name Type Description <code>widget</code> <code>Optional[Literal['textarea']]</code> <p>The type of widget. Defaults to None.</p> <code>rows</code> <code>Optional[int]</code> <p>The number of rows for a textarea widget. Defaults to None.</p> <code>unit</code> <code>Optional[str]</code> <p>The unit of measurement for the widget. Defaults to None.</p> <code>placeholder</code> <code>Optional[Placeholder]</code> <p>The placeholder text for the widget. Defaults to None.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class Options(BaseModel):\n    \"\"\"Represents the options for a widget in the invoice schema.\n\n    `properties.custom.properties.&lt;custom key&gt;.options` is an instance of this class.\n\n    Attributes:\n        widget (Optional[Literal[\"textarea\"]]): The type of widget. Defaults to None.\n        rows (Optional[int]): The number of rows for a textarea widget. Defaults to None.\n        unit (Optional[str]): The unit of measurement for the widget. Defaults to None.\n        placeholder (Optional[Placeholder]): The placeholder text for the widget. Defaults to None.\n    \"\"\"\n\n    widget: Optional[Literal[\"textarea\"]] = Field(default=None)\n    rows: Optional[int] = Field(default=None)\n    unit: Optional[str] = Field(default=None)\n    placeholder: Optional[Placeholder] = Field(default=None)\n\n    @model_validator(mode=\"after\")\n    def __check_row_for_widget_textarea(self) -&gt; \"Options\":\n        \"\"\"Validates that the 'row' field is set when the 'widget' field is set to 'textarea'.\n\n        Raises:\n            ValueError: If the widget is set to 'textarea' and the 'row' is not set (None or not provided).\n\n        Returns:\n            Options: The validated value of the 'row' field. Returns the input value (v) if there are no issues.\n        \"\"\"\n        if self.rows is None and self.widget is not None:\n            raise ValueError('rows must be set when widget is \"textarea\"')\n        return self\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.Options.__check_row_for_widget_textarea","title":"<code>__check_row_for_widget_textarea()</code>","text":"<p>Validates that the 'row' field is set when the 'widget' field is set to 'textarea'.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the widget is set to 'textarea' and the 'row' is not set (None or not provided).</p> <p>Returns:</p> Name Type Description <code>Options</code> <code>Options</code> <p>The validated value of the 'row' field. Returns the input value (v) if there are no issues.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>@model_validator(mode=\"after\")\ndef __check_row_for_widget_textarea(self) -&gt; \"Options\":\n    \"\"\"Validates that the 'row' field is set when the 'widget' field is set to 'textarea'.\n\n    Raises:\n        ValueError: If the widget is set to 'textarea' and the 'row' is not set (None or not provided).\n\n    Returns:\n        Options: The validated value of the 'row' field. Returns the input value (v) if there are no issues.\n    \"\"\"\n    if self.rows is None and self.widget is not None:\n        raise ValueError('rows must be set when widget is \"textarea\"')\n    return self\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#placeholder","title":"Placeholder","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class representing placeholders in different languages.</p> <p>This class inherits from <code>BaseModel</code>, and the <code>ja</code> and <code>en</code> attributes hold the placeholders in Japanese and English, respectively.</p> <p><code>properties.custom.properties.&lt;custom key&gt;.options.placeholder</code> is an instance of this class.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class Placeholder(BaseModel):\n    \"\"\"A class representing placeholders in different languages.\n\n    This class inherits from `BaseModel`, and the `ja` and `en` attributes hold the placeholders in Japanese and English, respectively.\n\n    `properties.custom.properties.&lt;custom key&gt;.options.placeholder` is an instance of this class.\n    \"\"\"\n\n    ja: str\n    en: str\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#langlabels","title":"LangLabels","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class representing labels in different languages.</p> Source code in <code>src/rdetoolkit/models/invoice_schema.py</code> <pre><code>class LangLabels(BaseModel):\n    \"\"\"A class representing labels in different languages.\"\"\"\n\n    ja: str\n    en: str\n</code></pre>"},{"location":"rdetoolkit/models/metadata/","title":"metadata","text":"<p>In <code>metadata</code>, models for validating metadata.json used in RDE are defined.</p>"},{"location":"rdetoolkit/models/metadata/#metadataitem","title":"MetadataItem","text":"<p>               Bases: <code>BaseModel</code></p> <p>metadata-def.json class.</p> <p>Stores metadata extracted by the data structuring process.</p> <p>Attributes:</p> Name Type Description <code>constant</code> <code>dict[str, MetaValue]</code> <p>A set of metadata common to all measurements.</p> <code>variable</code> <code>ValidableItems</code> <p>An array of metadata sets that vary with each measurement.</p> Source code in <code>src/rdetoolkit/models/metadata.py</code> <pre><code>class MetadataItem(BaseModel):\n    \"\"\"metadata-def.json class.\n\n    Stores metadata extracted by the data structuring process.\n\n    Attributes:\n        constant (dict[str, MetaValue]): A set of metadata common to all measurements.\n        variable (ValidableItems): An array of metadata sets that vary with each measurement.\n    \"\"\"\n\n    constant: dict[str, MetaValue]\n    variable: ValidableItems\n</code></pre>"},{"location":"rdetoolkit/models/metadata/#validableitems","title":"ValidableItems","text":"<p>               Bases: <code>RootModel</code></p> <p>A class representing validatable items of metadata.</p> <p>This class inherits from <code>RootModel</code>, and the <code>root</code> attribute holds a list of dictionaries, where each dictionary has a string as a key and a <code>MetaValue</code> as a value.</p> <p>Attributes:</p> Name Type Description <code>root</code> <code>list[dict[str, MetaValue]]</code> <p>A list of validatable items of metadata.</p> Source code in <code>src/rdetoolkit/models/metadata.py</code> <pre><code>class ValidableItems(RootModel):\n    \"\"\"A class representing validatable items of metadata.\n\n    This class inherits from `RootModel`, and the `root` attribute holds a list of dictionaries,\n    where each dictionary has a string as a key and a `MetaValue` as a value.\n\n    Attributes:\n        root (list[dict[str, MetaValue]]): A list of validatable items of metadata.\n    \"\"\"\n\n    root: list[dict[str, MetaValue]]\n</code></pre>"},{"location":"rdetoolkit/models/metadata/#metavalue","title":"MetaValue","text":"<p>               Bases: <code>BaseModel</code></p> <p>Metadata class for the 'value' and 'unit' attributes.</p> Source code in <code>src/rdetoolkit/models/metadata.py</code> <pre><code>class MetaValue(BaseModel):\n    \"\"\"Metadata class for the 'value' and 'unit' attributes.\"\"\"\n\n    value: Any\n    unit: str | None = None\n\n    @field_validator(\"value\")\n    @classmethod\n    def check_value_size(cls, v: Any) -&gt; Any:\n        \"\"\"Validator that verifies that the size of the 'value' does not exceed 1024 bytes if it is a string.\n\n        Args:\n            v (dict[str, Any]): Value of the metadata\n\n        Raises:\n            ValueError: Exception error if the value of the metadata is more than 1024 bytes\n        \"\"\"\n        if not isinstance(v, str):\n            return v\n        if len(str(v).encode(\"utf-8\")) &gt; MAX_VALUE_SIZE:\n            emsg = f\"Value size exceeds {MAX_VALUE_SIZE} bytes\"\n            raise ValueError(emsg)\n        return v\n</code></pre>"},{"location":"rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.MetaValue.check_value_size","title":"<code>check_value_size(v)</code>  <code>classmethod</code>","text":"<p>Validator that verifies that the size of the 'value' does not exceed 1024 bytes if it is a string.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>dict[str, Any]</code> <p>Value of the metadata</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>Exception error if the value of the metadata is more than 1024 bytes</p> Source code in <code>src/rdetoolkit/models/metadata.py</code> <pre><code>@field_validator(\"value\")\n@classmethod\ndef check_value_size(cls, v: Any) -&gt; Any:\n    \"\"\"Validator that verifies that the size of the 'value' does not exceed 1024 bytes if it is a string.\n\n    Args:\n        v (dict[str, Any]): Value of the metadata\n\n    Raises:\n        ValueError: Exception error if the value of the metadata is more than 1024 bytes\n    \"\"\"\n    if not isinstance(v, str):\n        return v\n    if len(str(v).encode(\"utf-8\")) &gt; MAX_VALUE_SIZE:\n        emsg = f\"Value size exceeds {MAX_VALUE_SIZE} bytes\"\n        raise ValueError(emsg)\n    return v\n</code></pre>"},{"location":"rdetoolkit/models/metadata/#variable","title":"Variable","text":"<p>               Bases: <code>BaseModel</code></p> <p>Metadata class for the 'variable' attribute.</p> Source code in <code>src/rdetoolkit/models/metadata.py</code> <pre><code>class Variable(BaseModel):\n    \"\"\"Metadata class for the 'variable' attribute.\"\"\"\n\n    variable: dict[str, Any]\n\n    @field_validator(\"variable\")\n    @classmethod\n    def check_value_size(cls, v: dict[str, Any]) -&gt; dict[str, Any]:\n        \"\"\"Validator that verifies that the size of the 'variable' type metadata value does not exceed 1024 bytes.\n\n        Args:\n            v (dict[str, Any]): Metadata of 'variable'\n\n        Raises:\n            ValueError: Exception error if the value of the metadata is more than 1024 bytes\n        \"\"\"\n        for value in v.values():\n            if not isinstance(v, str):\n                continue\n            if len(str(value).encode(\"utf-8\")) &gt; MAX_VALUE_SIZE:\n                emsg = f\"Value size exceeds {MAX_VALUE_SIZE} bytes: {v}\"\n                raise ValueError(emsg)\n        return v\n</code></pre>"},{"location":"rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.Variable.check_value_size","title":"<code>check_value_size(v)</code>  <code>classmethod</code>","text":"<p>Validator that verifies that the size of the 'variable' type metadata value does not exceed 1024 bytes.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>dict[str, Any]</code> <p>Metadata of 'variable'</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>Exception error if the value of the metadata is more than 1024 bytes</p> Source code in <code>src/rdetoolkit/models/metadata.py</code> <pre><code>@field_validator(\"variable\")\n@classmethod\ndef check_value_size(cls, v: dict[str, Any]) -&gt; dict[str, Any]:\n    \"\"\"Validator that verifies that the size of the 'variable' type metadata value does not exceed 1024 bytes.\n\n    Args:\n        v (dict[str, Any]): Metadata of 'variable'\n\n    Raises:\n        ValueError: Exception error if the value of the metadata is more than 1024 bytes\n    \"\"\"\n    for value in v.values():\n        if not isinstance(v, str):\n            continue\n        if len(str(value).encode(\"utf-8\")) &gt; MAX_VALUE_SIZE:\n            emsg = f\"Value size exceeds {MAX_VALUE_SIZE} bytes: {v}\"\n            raise ValueError(emsg)\n    return v\n</code></pre>"},{"location":"rdetoolkit/models/rde2types/","title":"rde2types","text":"<p>In <code>rde2types</code>, various data classes and custom types used in RDE are defined.</p>"},{"location":"rdetoolkit/models/rde2types/#rdeformatflags","title":"RdeFormatFlags","text":"<p>Class for managing flags used in RDE.</p> <p>This class has two private attributes: _is_rdeformat_enabled and _is_multifile_enabled. These attributes are set in the post_init method, depending on the existence of certain files. Additionally, properties and setters are used to get and modify the values of these attributes. However, it is not allowed for both attributes to be True simultaneously.</p> Warning <p>Currently, this class is not used because the <code>data/tasksupport/rdeformat.txt</code> and <code>data/tasksupport/multifile.txt</code> files are not used. It is scheduled to be deleted in the next update.</p> <p>Attributes:</p> Name Type Description <code>_is_rdeformat_enabled</code> <code>bool</code> <p>Flag indicating whether RDE format is enabled</p> <code>_is_multifile_enabled</code> <code>bool</code> <p>Flag indicating whether multi-file support is enabled</p> Source code in <code>src/rdetoolkit/models/rde2types.py</code> <pre><code>@dataclass\nclass RdeFormatFlags:  # pragma: no cover\n    \"\"\"Class for managing flags used in RDE.\n\n    This class has two private attributes: _is_rdeformat_enabled and _is_multifile_enabled.\n    These attributes are set in the __post_init__ method, depending on the existence of certain files.\n    Additionally, properties and setters are used to get and modify the values of these attributes.\n    However, it is not allowed for both attributes to be True simultaneously.\n\n    Warning:\n        Currently, this class is not used because the `data/tasksupport/rdeformat.txt` and `data/tasksupport/multifile.txt` files are not used. It is scheduled to be deleted in the next update.\n\n    Attributes:\n        _is_rdeformat_enabled (bool): Flag indicating whether RDE format is enabled\n        _is_multifile_enabled (bool): Flag indicating whether multi-file support is enabled\n    \"\"\"\n\n    _is_rdeformat_enabled: bool = False\n    _is_multifile_enabled: bool = False\n\n    def __init__(self) -&gt; None:\n        warnings.warn(\"The RdeFormatFlags class is scheduled to be deleted in the next update.\", FutureWarning, stacklevel=2)\n\n    def __post_init__(self) -&gt; None:\n        \"\"\"Method called after object initialization.\n\n        This method checks for the existence of files named rdeformat.txt and multifile.txt in the data/tasksupport directory,\n        and sets the values of _is_rdeformat_enabled and _is_multifile_enabled accordingly.\n        \"\"\"\n        self.is_rdeformat_enabled = os.path.exists(\"data/tasksupport/rdeformat.txt\")\n        self.is_multifile_enabled = os.path.exists(\"data/tasksupport/multifile.txt\")\n\n    @property\n    def is_rdeformat_enabled(self) -&gt; bool:\n        \"\"\"Property returning whether the RDE format is enabled.\n\n        Returns:\n            bool: Whether the RDE format is enabled\n        \"\"\"\n        return self._is_rdeformat_enabled\n\n    @is_rdeformat_enabled.setter\n    def is_rdeformat_enabled(self, value: bool) -&gt; None:\n        \"\"\"Setter to change the enabled state of the RDE format.\n\n        Args:\n            value (bool): Whether to enable the RDE format\n\n        Raises:\n            ValueError: If both flags are set to True\n        \"\"\"\n        if value and self.is_multifile_enabled:\n            emsg = \"both flags cannot be True\"\n            raise ValueError(emsg)\n        self._is_rdeformat_enabled = value\n\n    @property\n    def is_multifile_enabled(self) -&gt; bool:\n        \"\"\"Property returning whether multi-file support is enabled.\n\n        Returns:\n            bool: Whether multi-file support is enabled\n        \"\"\"\n        return self._is_multifile_enabled\n\n    @is_multifile_enabled.setter\n    def is_multifile_enabled(self, value: bool) -&gt; None:\n        \"\"\"Setter to change the enabled state of multi-file support.\n\n        Args:\n            value (bool): Whether to enable multi-file support\n\n        Raises:\n            ValueError: If both flags are set to True\n        \"\"\"\n        if value and self.is_rdeformat_enabled:\n            emsg = \"both flags cannot be True\"\n            raise ValueError(emsg)\n        self._is_multifile_enabled = value\n</code></pre>"},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeFormatFlags.is_multifile_enabled","title":"<code>is_multifile_enabled: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Property returning whether multi-file support is enabled.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Whether multi-file support is enabled</p>"},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeFormatFlags.is_rdeformat_enabled","title":"<code>is_rdeformat_enabled: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Property returning whether the RDE format is enabled.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Whether the RDE format is enabled</p>"},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeFormatFlags.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Method called after object initialization.</p> <p>This method checks for the existence of files named rdeformat.txt and multifile.txt in the data/tasksupport directory, and sets the values of _is_rdeformat_enabled and _is_multifile_enabled accordingly.</p> Source code in <code>src/rdetoolkit/models/rde2types.py</code> <pre><code>def __post_init__(self) -&gt; None:\n    \"\"\"Method called after object initialization.\n\n    This method checks for the existence of files named rdeformat.txt and multifile.txt in the data/tasksupport directory,\n    and sets the values of _is_rdeformat_enabled and _is_multifile_enabled accordingly.\n    \"\"\"\n    self.is_rdeformat_enabled = os.path.exists(\"data/tasksupport/rdeformat.txt\")\n    self.is_multifile_enabled = os.path.exists(\"data/tasksupport/multifile.txt\")\n</code></pre>"},{"location":"rdetoolkit/models/rde2types/#rdeinputdirpaths","title":"RdeInputDirPaths","text":"<p>A data class that holds folder paths used for input in the RDE.</p> <p>It manages the folder paths for input data necessary for the RDE.</p> <p>Attributes:</p> Name Type Description <code>inputdata</code> <code>Path</code> <p>Path to the folder where input data is stored.</p> <code>invoice</code> <code>Path</code> <p>Path to the folder where invoice.json is stored.</p> <code>tasksupport</code> <code>Path</code> <p>Path to the folder where task support data is stored.</p> <code>config</code> <code>Config</code> <p>The configuration object.</p> Properties <p>default_csv (Path): Provides the path to the <code>default_value.csv</code> file. If <code>tasksupport</code> is specified, it uses the path under it; otherwise, it uses the default path under <code>data/tasksupport</code>.</p> Source code in <code>src/rdetoolkit/models/rde2types.py</code> <pre><code>@dataclass\nclass RdeInputDirPaths:\n    \"\"\"A data class that holds folder paths used for input in the RDE.\n\n    It manages the folder paths for input data necessary for the RDE.\n\n    Attributes:\n        inputdata (Path): Path to the folder where input data is stored.\n        invoice (Path): Path to the folder where invoice.json is stored.\n        tasksupport (Path): Path to the folder where task support data is stored.\n        config (Config): The configuration object.\n\n    Properties:\n        default_csv (Path): Provides the path to the `default_value.csv` file. If `tasksupport` is specified, it uses the path under it; otherwise,\n        it uses the default path under `data/tasksupport`.\n    \"\"\"\n\n    inputdata: Path\n    invoice: Path\n    tasksupport: Path\n    config: Config = field(default_factory=create_default_config)\n\n    @property\n    def default_csv(self) -&gt; Path:\n        \"\"\"Returns the path to the 'default_value.csv' file.\n\n        If `tasksupport` is set, this path is used.\n        If not set, the default path under 'data/tasksupport' is used.\n\n        Returns:\n            Path: Path to the 'default_value.csv' file.\n        \"\"\"\n        tasksupport = self.tasksupport if self.tasksupport else Path(\"data\", \"tasksupport\")\n        return tasksupport.joinpath(\"default_value.csv\")\n</code></pre>"},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeInputDirPaths.default_csv","title":"<code>default_csv: Path</code>  <code>property</code>","text":"<p>Returns the path to the 'default_value.csv' file.</p> <p>If <code>tasksupport</code> is set, this path is used. If not set, the default path under 'data/tasksupport' is used.</p> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>Path to the 'default_value.csv' file.</p>"},{"location":"rdetoolkit/models/rde2types/#rdeoutputresourcepath","title":"RdeOutputResourcePath","text":"<p>A data class that holds folder paths used as output destinations for RDE.</p> <p>It maintains the paths for various files used in the structuring process.</p> <p>Attributes:</p> Name Type Description <code>raw</code> <code>Path</code> <p>Path where raw data is stored.</p> <code>nonshared_raw</code> <code>Path</code> <p>Path where nonshared raw data is stored.</p> <code>rawfiles</code> <code>tuple[Path, ...]</code> <p>Holds a tuple of input file paths, such as those unzipped, for a single tile of data.</p> <code>struct</code> <code>Path</code> <p>Path for storing structured data.</p> <code>main_image</code> <code>Path</code> <p>Path for storing the main image file.</p> <code>other_image</code> <code>Path</code> <p>Path for storing other image files.</p> <code>meta</code> <code>Path</code> <p>Path for storing metadata files.</p> <code>thumbnail</code> <code>Path</code> <p>Path for storing thumbnail image files.</p> <code>logs</code> <code>Path</code> <p>Path for storing log files.</p> <code>invoice</code> <code>Path</code> <p>Path for storing invoice files.</p> <code>invoice_schema_json</code> <code>Path</code> <p>Path for the invoice.schema.json file.</p> <code>invoice_org</code> <code>Path</code> <p>Path for storing the backup of invoice.json.</p> <code>temp</code> <code>Optional[Path]</code> <p>Path for storing temporary files.</p> <code>invoice_patch</code> <code>Optional[Path]</code> <p>Path for storing modified invoice files.</p> <code>attachment</code> <code>Optional[Path]</code> <p>Path for storing attachment files.</p> Source code in <code>src/rdetoolkit/models/rde2types.py</code> <pre><code>@dataclass\nclass RdeOutputResourcePath:\n    \"\"\"A data class that holds folder paths used as output destinations for RDE.\n\n    It maintains the paths for various files used in the structuring process.\n\n    Attributes:\n        raw (Path): Path where raw data is stored.\n        nonshared_raw (Path): Path where nonshared raw data is stored.\n        rawfiles (tuple[Path, ...]): Holds a tuple of input file paths, such as those unzipped, for a single tile of data.\n        struct (Path): Path for storing structured data.\n        main_image (Path): Path for storing the main image file.\n        other_image (Path): Path for storing other image files.\n        meta (Path): Path for storing metadata files.\n        thumbnail (Path): Path for storing thumbnail image files.\n        logs (Path): Path for storing log files.\n        invoice (Path): Path for storing invoice files.\n        invoice_schema_json (Path): Path for the invoice.schema.json file.\n        invoice_org (Path): Path for storing the backup of invoice.json.\n        temp (Optional[Path]): Path for storing temporary files.\n        invoice_patch (Optional[Path]): Path for storing modified invoice files.\n        attachment (Optional[Path]): Path for storing attachment files.\n    \"\"\"\n\n    raw: Path\n    nonshared_raw: Path\n    rawfiles: tuple[Path, ...]\n    struct: Path\n    main_image: Path\n    other_image: Path\n    meta: Path\n    thumbnail: Path\n    logs: Path\n    invoice: Path\n    invoice_schema_json: Path\n    invoice_org: Path\n    temp: Path | None = None\n    invoice_patch: Path | None = None\n    attachment: Path | None = None\n</code></pre>"},{"location":"rdetoolkit/models/rde2types/#name","title":"Name","text":"<p>               Bases: <code>TypedDict</code></p> <p>Represents a name structure as a Typed Dictionary.</p> <p>This class is designed to hold names in different languages, specifically Japanese and English.</p> <p>Attributes:</p> Name Type Description <code>ja</code> <code>str</code> <p>The name in Japanese.</p> <code>en</code> <code>str</code> <p>The name in English.</p> Source code in <code>src/rdetoolkit/models/rde2types.py</code> <pre><code>class Name(TypedDict):\n    \"\"\"Represents a name structure as a Typed Dictionary.\n\n    This class is designed to hold names in different languages, specifically Japanese and English.\n\n    Attributes:\n        ja (str): The name in Japanese.\n        en (str): The name in English.\n    \"\"\"\n\n    ja: str\n    en: str\n</code></pre>"},{"location":"rdetoolkit/models/rde2types/#schema","title":"Schema","text":"<p>               Bases: <code>TypedDict</code></p> <p>Represents a schema definition as a Typed Dictionary.</p> <p>This class is used to define the structure of a schema with optional keys. It extends TypedDict with <code>total=False</code> to allow partial dictionaries.</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>str</code> <p>The type of the schema.</p> <code>format</code> <code>str</code> <p>The format of the schema.</p> Source code in <code>src/rdetoolkit/models/rde2types.py</code> <pre><code>class Schema(TypedDict, total=False):\n    \"\"\"Represents a schema definition as a Typed Dictionary.\n\n    This class is used to define the structure of a schema with optional keys.\n    It extends TypedDict with `total=False` to allow partial dictionaries.\n\n    Attributes:\n        type (str): The type of the schema.\n        format (str): The format of the schema.\n    \"\"\"\n\n    type: str\n    format: str\n</code></pre>"},{"location":"rdetoolkit/models/rde2types/#metadatadefjson","title":"MetadataDefJson","text":"<p>               Bases: <code>TypedDict</code></p> <p>Defines the metadata structure for a JSON object as a Typed Dictionary.</p> <p>This class specifies the required structure of metadata, including various fields that describe characteristics and properties of the data.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>Name</code> <p>The name associated with the metadata.</p> <code>schema</code> <code>Schema</code> <p>The schema of the metadata.</p> <code>unit</code> <code>str</code> <p>The unit of measurement.</p> <code>description</code> <code>str</code> <p>A description of the metadata.</p> <code>uri</code> <code>str</code> <p>The URI associated with the metadata.</p> <code>originalName</code> <code>str</code> <p>The original name of the metadata.</p> <code>originalType</code> <code>str</code> <p>The original type of the metadata.</p> <code>mode</code> <code>str</code> <p>The mode associated with the metadata.</p> <code>order</code> <code>str</code> <p>The order of the metadata.</p> <code>valiable</code> <code>int</code> <p>A variable associated with the metadata.</p> <code>_feature</code> <code>bool</code> <p>A private attribute indicating a feature.</p> <code>action</code> <code>str</code> <p>An action associated with the metadata.</p> Source code in <code>src/rdetoolkit/models/rde2types.py</code> <pre><code>class MetadataDefJson(TypedDict):\n    \"\"\"Defines the metadata structure for a JSON object as a Typed Dictionary.\n\n    This class specifies the required structure of metadata, including various fields\n    that describe characteristics and properties of the data.\n\n    Attributes:\n        name (Name): The name associated with the metadata.\n        schema (Schema): The schema of the metadata.\n        unit (str): The unit of measurement.\n        description (str): A description of the metadata.\n        uri (str): The URI associated with the metadata.\n        originalName (str): The original name of the metadata.\n        originalType (str): The original type of the metadata.\n        mode (str): The mode associated with the metadata.\n        order (str): The order of the metadata.\n        valiable (int): A variable associated with the metadata.\n        _feature (bool): A private attribute indicating a feature.\n        action (str): An action associated with the metadata.\n    \"\"\"\n\n    name: Name\n    schema: Schema\n    unit: str\n    description: str\n    uri: str\n    originalName: str\n    originalType: str\n    mode: str\n    order: str\n    valiable: int\n    _feature: bool\n    action: str\n</code></pre>"},{"location":"rdetoolkit/models/rde2types/#valueunitpair","title":"ValueUnitPair","text":"<p>Dataclass representing a pair of value and unit.</p> <p>This class is used to store and manage a value along with its associated unit. It uses the features of dataclass for simplified data handling.</p> <p>Attributes:</p> Name Type Description <code>value</code> <code>str</code> <p>The value part of the pair.</p> <code>unit</code> <code>str</code> <p>The unit associated with the value.</p> Source code in <code>src/rdetoolkit/models/rde2types.py</code> <pre><code>@dataclass\nclass ValueUnitPair:\n    \"\"\"Dataclass representing a pair of value and unit.\n\n    This class is used to store and manage a value along with its associated unit.\n    It uses the features of dataclass for simplified data handling.\n\n    Attributes:\n        value (str): The value part of the pair.\n        unit (str): The unit associated with the value.\n    \"\"\"\n\n    value: str\n    unit: str\n</code></pre>"},{"location":"rdetoolkit/models/result/","title":"result","text":""},{"location":"rdetoolkit/models/result/#workflowexecutionstatus","title":"WorkflowExecutionStatus","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>src/rdetoolkit/models/result.py</code> <pre><code>class WorkflowExecutionStatus(BaseModel):\n    run_id: str\n    title: str\n    status: str\n    mode: str\n    error_code: int | None = Field(default=None)\n    error_message: str | None = Field(default=None)\n    target: str | None\n    stacktrace: str | None = Field(default=None)\n\n    @field_validator(\"run_id\")\n    @classmethod\n    def format_run_id(cls, v: str) -&gt; str:  # noqa: D102\n        return f\"{int(v):04d}\"\n</code></pre>"},{"location":"rdetoolkit/models/result/#workflowexecutionresults","title":"WorkflowExecutionResults","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>src/rdetoolkit/models/result.py</code> <pre><code>class WorkflowExecutionResults(BaseModel):\n    statuses: list[WorkflowExecutionStatus]\n</code></pre>"},{"location":"rdetoolkit/models/result/#workflowresultmanager","title":"WorkflowResultManager","text":"Source code in <code>src/rdetoolkit/models/result.py</code> <pre><code>class WorkflowResultManager:\n\n    def __init__(self) -&gt; None:\n        self.statuses = WorkflowExecutionResults(statuses=[])\n\n    def add(self, run_id: str, title: str, status: str, mode: str, error_code: int | None = None, error_message: str | None = None, target: str | None = None, stacktrace: str | None = None) -&gt; None:\n        \"\"\"Adds a new workflow execution status to the statuses list.\n\n        Args:\n            run_id (int): The unique identifier for the run.\n            title (str): The title of the workflow execution.\n            status (str): The current status of the workflow execution.\n            mode (str): Process Mode.\n            error_code (int, optional): The error code associated with the workflow execution, if any. Defaults to None.\n            error_message (str, optional): The error message associated with the workflow execution, if any. Defaults to None.\n            target (str, optional): target directory path, if any. Defaults to None.\n            stacktrace (str, optional): The stack trace of the error, if any. Defaults to None.\n\n        Returns:\n            None\n\n        \"\"\"\n        execution_status = WorkflowExecutionStatus(\n            run_id=run_id,\n            title=title,\n            status=status,\n            mode=mode,\n            error_code=error_code,\n            error_message=error_message,\n            target=target,\n            stacktrace=stacktrace,\n        )\n        self.statuses.statuses.append(execution_status)\n\n    def add_status(self, status: WorkflowExecutionStatus) -&gt; None:\n        \"\"\"Adds an existing WorkflowExecutionStatus object to the statuses list.\n\n        Args:\n            status (WorkflowExecutionStatus): The WorkflowExecutionStatus object to add.\n\n        Returns:\n            None\n        \"\"\"\n        self.statuses.statuses.append(status)\n\n    def __iter__(self) -&gt; Iterator[WorkflowExecutionStatus]:\n        return iter(self.statuses.statuses)\n\n    def __len__(self) -&gt; int:\n        return len(self.statuses.statuses)\n\n    def __getitem__(self, index: int) -&gt; WorkflowExecutionStatus:\n        return self.statuses.statuses[index]\n\n    def __repr__(self) -&gt; str:\n        return f\"WorkflowResultManager({self.statuses})\"\n\n    def to_json(self) -&gt; str:\n        \"\"\"Return the JSON representation of the workflow execution results.\"\"\"\n        return self.statuses.model_dump_json(indent=2)\n</code></pre>"},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowResultManager.add","title":"<code>add(run_id, title, status, mode, error_code=None, error_message=None, target=None, stacktrace=None)</code>","text":"<p>Adds a new workflow execution status to the statuses list.</p> <p>Parameters:</p> Name Type Description Default <code>run_id</code> <code>int</code> <p>The unique identifier for the run.</p> required <code>title</code> <code>str</code> <p>The title of the workflow execution.</p> required <code>status</code> <code>str</code> <p>The current status of the workflow execution.</p> required <code>mode</code> <code>str</code> <p>Process Mode.</p> required <code>error_code</code> <code>int</code> <p>The error code associated with the workflow execution, if any. Defaults to None.</p> <code>None</code> <code>error_message</code> <code>str</code> <p>The error message associated with the workflow execution, if any. Defaults to None.</p> <code>None</code> <code>target</code> <code>str</code> <p>target directory path, if any. Defaults to None.</p> <code>None</code> <code>stacktrace</code> <code>str</code> <p>The stack trace of the error, if any. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/rdetoolkit/models/result.py</code> <pre><code>def add(self, run_id: str, title: str, status: str, mode: str, error_code: int | None = None, error_message: str | None = None, target: str | None = None, stacktrace: str | None = None) -&gt; None:\n    \"\"\"Adds a new workflow execution status to the statuses list.\n\n    Args:\n        run_id (int): The unique identifier for the run.\n        title (str): The title of the workflow execution.\n        status (str): The current status of the workflow execution.\n        mode (str): Process Mode.\n        error_code (int, optional): The error code associated with the workflow execution, if any. Defaults to None.\n        error_message (str, optional): The error message associated with the workflow execution, if any. Defaults to None.\n        target (str, optional): target directory path, if any. Defaults to None.\n        stacktrace (str, optional): The stack trace of the error, if any. Defaults to None.\n\n    Returns:\n        None\n\n    \"\"\"\n    execution_status = WorkflowExecutionStatus(\n        run_id=run_id,\n        title=title,\n        status=status,\n        mode=mode,\n        error_code=error_code,\n        error_message=error_message,\n        target=target,\n        stacktrace=stacktrace,\n    )\n    self.statuses.statuses.append(execution_status)\n</code></pre>"},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowResultManager.add_status","title":"<code>add_status(status)</code>","text":"<p>Adds an existing WorkflowExecutionStatus object to the statuses list.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>WorkflowExecutionStatus</code> <p>The WorkflowExecutionStatus object to add.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/rdetoolkit/models/result.py</code> <pre><code>def add_status(self, status: WorkflowExecutionStatus) -&gt; None:\n    \"\"\"Adds an existing WorkflowExecutionStatus object to the statuses list.\n\n    Args:\n        status (WorkflowExecutionStatus): The WorkflowExecutionStatus object to add.\n\n    Returns:\n        None\n    \"\"\"\n    self.statuses.statuses.append(status)\n</code></pre>"},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowResultManager.to_json","title":"<code>to_json()</code>","text":"<p>Return the JSON representation of the workflow execution results.</p> Source code in <code>src/rdetoolkit/models/result.py</code> <pre><code>def to_json(self) -&gt; str:\n    \"\"\"Return the JSON representation of the workflow execution results.\"\"\"\n    return self.statuses.model_dump_json(indent=2)\n</code></pre>"},{"location":"usage/docker/","title":"Using RDEToolKit with Docker","text":"<p>rdetoolkit\u3092\u4f7f\u3063\u305f\u69cb\u9020\u5316\u51e6\u7406\u3092Docker\u4e0a\u3067\u52d5\u4f5c\u3055\u305b\u308b\u624b\u9806\u3092\u307e\u3068\u3081\u307e\u3059\u3002</p>"},{"location":"usage/docker/#_1","title":"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020","text":"<pre><code>(\u69cb\u9020\u5316\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea)\n\u251c\u2500\u2500 container\n\u2502   \u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u2514\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 inputdata\n\u2502   \u251c\u2500\u2500 input1\n\u2502   \u2514\u2500\u2500 input2\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 template\n    \u251c\u2500\u2500 batch.yaml\n    \u251c\u2500\u2500 catalog.schema.json\n    \u251c\u2500\u2500 invoice.schema.json\n    \u251c\u2500\u2500 jobs.template.yaml\n    \u251c\u2500\u2500 metadata-def.json\n    \u2514\u2500\u2500 tasksupport\n</code></pre>"},{"location":"usage/docker/#dockerfile","title":"Dockerfile","text":"<p><code>container/Dockerfile</code>\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u4e0b\u8a18\u306fDockerfile\u306e\u4f5c\u6210\u4f8b\u3067\u3059\u3002</p> <p>\u4f7f\u7528\u3059\u308bdocker\u30a4\u30e1\u30fc\u30b8\u3084\u5404\u7a2e\u5b9f\u884c\u6587\u306f\u3001\u5404\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u81ea\u7531\u306b\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>FROM python:3.11.9\n\nWORKDIR /app\n\nCOPY requirements.txt .\n\nRUN pip install -r requirements.txt\n\nCOPY main.py /app\nCOPY modules/ /app/modules/\n</code></pre> <p>Reference</p> <p>Docker Hub Container Image Library | App Containerization</p>"},{"location":"usage/docker/#_2","title":"\u30a4\u30e1\u30fc\u30b8\u306e\u4f5c\u6210","text":"<p><code>Dockerfile</code>\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u3057\u3066\u304f\u3060\u3055\u3044\u3002docker build\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u30d3\u30eb\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u30b3\u30de\u30f3\u30c9\u306e\u5f62\u5f0f\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059</p> <pre><code># \u30b3\u30de\u30f3\u30c9\n$ docker build -t \u30a4\u30e1\u30fc\u30b8\u540d:\u30bf\u30b0 \u30d1\u30b9\n# \u5b9f\u884c\u4f8b\n$ docker build -t sample_tif:v1 .\n</code></pre> <ul> <li><code>-t</code>\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30a4\u30e1\u30fc\u30b8\u540d\u3068\u30bf\u30b0\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30a4\u30e1\u30fc\u30b8\u540d\u306f\u4efb\u610f\u306e\u540d\u524d\u3067\u69cb\u3044\u307e\u305b\u3093\u304c\u3001\u4e00\u610f\u3067\u3042\u308b\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002</li> <li>\u30d1\u30b9\u306b\u306f<code>Dockerfile</code>\u304c\u5b58\u5728\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bDockerfile\u304c\u3042\u308b\u5834\u5408\u306f<code>.</code>\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002</li> <li>\u30d7\u30ed\u30ad\u30b7\u74b0\u5883\u5316\u306e\u5834\u5408\u3001<code>--build-arg http_proxy=</code>, <code>--build-arg https_proxy=</code>\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> </ul>"},{"location":"usage/docker/#pip","title":"\u3082\u3057pip\u30b3\u30de\u30f3\u30c9\u3067\u5931\u6557\u3059\u308b\u5834\u5408","text":"<p>Dockefile\u3068\u540c\u3058\u968e\u5c64\u306b\u3001<code>pip.conf</code>\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4ee5\u4e0b\u306e\u5185\u5bb9\u3067\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u540c\u6642\u306b<code>Dockerfile</code>\u3082\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>[install]\ntrusted-host =\n    pypi.python.org\n    files.pythonhosted.org\n    pypi.org\n</code></pre> <p>\u4fee\u6b63\u5f8c\u306eDockerfile</p> <pre><code>FROM python:3.11\n\nWORKDIR /app\n\nCOPY requirements.txt .\nCOPY pip.conf /etc/pip.conf\n\nRUN pip install -r requirements.txt\n\nCOPY main.py /app\nCOPY modules/ /app/modules/\n</code></pre>"},{"location":"usage/docker/#docker","title":"docker\u30a4\u30e1\u30fc\u30b8\u3092\u8d77\u52d5","text":"<p>\u30d3\u30eb\u30c9\u3057\u305f\u30a4\u30e1\u30fc\u30b8\u3092\u5b9f\u884c\u3059\u308b\u306b\u306f\u3001<code>docker run</code>\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 Docker\u4e0a\u3067\u69cb\u9020\u5316\u51e6\u7406\u3092\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u3001\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(data\u306a\u3069)\u3092\u30de\u30a6\u30f3\u30c8\u3057\u307e\u3059\u3002</p> <pre><code>$ docker run [\u30aa\u30d7\u30b7\u30e7\u30f3] \u30a4\u30e1\u30fc\u30b8\u540d [\u30b3\u30de\u30f3\u30c9]\n# \u5b9f\u884c\u4f8b\n$ docker run -it -v ${HOME}/sample_tif/container/data:/app2/data --name \"sample_tifv1\" sample_tif:v1 \"/bin/bash\"\n</code></pre> <ul> <li><code>-it</code>: \u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001\u5bfe\u8a71\u7684\u306a\u30e2\u30fc\u30c9\u3067\u30b3\u30f3\u30c6\u30ca\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u30b3\u30f3\u30c6\u30ca\u3068\u306e\u5bfe\u8a71\u304c\u53ef\u80fd\u306b\u306a\u308a\u3001\u30bf\u30fc\u30df\u30ca\u30eb\u3084\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5229\u7528\u3067\u304d\u307e\u3059\u3002</li> <li><code>-v ${HOME}/sample_tif/container/data:/app2/data</code>\uff1a\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001\u30db\u30b9\u30c8\u3068\u30b3\u30f3\u30c6\u30ca\u9593\u3067\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u30de\u30a6\u30f3\u30c8\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002<code>${HOME}/sample_tif/container/data</code>\u306f\u30db\u30b9\u30c8\u5074\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3057\u3001<code>/app2/data</code>\u306f\u30b3\u30f3\u30c6\u30ca\u5185\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3057\u307e\u3059\u3002</li> <li><code>--name \"sample_tifv1\"</code>\uff1a\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001\u30b3\u30f3\u30c6\u30ca\u306b\u540d\u524d\u3092\u4ed8\u3051\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u540d\u524d\u3092sample_tifv1\u3068\u3057\u3066\u6307\u5b9a\u3057\u307e\u3059\u3002</li> <li><code>sample_tif:v1</code>\uff1a\u3053\u306e\u90e8\u5206\u306f\u3001\u5b9f\u884c\u3059\u308bDocker\u30a4\u30e1\u30fc\u30b8\u306e\u540d\u524d\u3068\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002</li> <li><code>\"/bin/bash\"</code>\uff1a\u6700\u5f8c\u306e\u90e8\u5206\u306f\u3001\u30b3\u30f3\u30c6\u30ca\u5185\u3067\u5b9f\u884c\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001Bash\u30b7\u30a7\u30eb(/bin/bash)\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002</li> </ul> <p>\u5b9f\u884c\u3059\u308b\u3068\u3001\u30bf\u30fc\u30df\u30ca\u30eb\u304croot@(\u30b3\u30f3\u30c6\u30caID):\u306e\u3088\u3046\u306b\u5909\u5316\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u3002</p>"},{"location":"usage/docker/#_3","title":"\u30b3\u30f3\u30c6\u30ca\u4e0a\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u52d5\u4f5c\u3055\u305b\u308b","text":"<p>\u958b\u767a\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8d77\u52d5\u3055\u305b\u307e\u3059\u3002</p> <pre><code>$ cd /app2\n$ python3 /app/main.py\n</code></pre>"},{"location":"usage/docker/#_4","title":"\u30b3\u30f3\u30c6\u30ca\u3092\u51fa\u308b","text":"<p>\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30b3\u30f3\u30c6\u30ca\u3092\u7d42\u4e86\u3055\u305b\u307e\u3059\u3002</p> <pre><code>exit\n</code></pre>"},{"location":"usage/metadata_definition_file/","title":"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb","text":""},{"location":"usage/metadata_definition_file/#_2","title":"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u3064\u3044\u3066","text":"<p>RDE\u3067\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3044\u307e\u3059\u3002RDE\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u3001\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5fc5\u8981\u306b\u306a\u308b\u6642\u304c\u3042\u308a\u307e\u3059\u3002</p> <ul> <li>invoice.schema.json</li> <li>invoice.json</li> <li>metadata-def.json</li> <li>metadata.json</li> </ul>"},{"location":"usage/metadata_definition_file/#invoiceschemajson","title":"invoice.schema.json\u306b\u3064\u3044\u3066","text":"<p>\u9001\u308a\u72b6\u306e\u30b9\u30ad\u30fc\u30de\u3092\u5b9a\u7fa9\u3059\u308b\u3002\u30b9\u30ad\u30fc\u30de\u306e\u5f62\u5f0f\u306fJSON Schema\u306e\u6a19\u6e96\u4ed5\u69d8\u306b\u6e96\u62e0\u3057\u307e\u3059\u3002\u3053\u306e JSON\u30b9\u30ad\u30fc\u30de\u306f\u9001\u308a\u72b6\u306e\u753b\u9762\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u304c\u3001RDEToolKit\u3092\u4f7f\u3046\u3053\u3068\u3067\u9001\u308a\u72b6\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u4f7f\u308f\u308c\u307e\u3059\u3002</p> <p>Tip</p> <p>Creating your first schema - json-schema.org</p>"},{"location":"usage/metadata_definition_file/#invoiceschemajson_1","title":"invoice.schema.json\u306e\u69cb\u7bc9\u4f8b","text":"invoice.shcema.json\u306e\u69cb\u7bc9\u4f8b <pre><code>{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://rde.nims.go.jp/rde/dataset-templates/dataset_template_custom_sample/invoice.schema.json\",\n  \"description\": \"RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30b5\u30f3\u30d7\u30eb\u56fa\u6709\u60c5\u5831invoice\",\n  \"type\": \"object\",\n  \"required\": [\n    \"custom\",\n    \"sample\"\n  ],\n  \"properties\": {\n    \"custom\": {\n      \"type\": \"object\",\n      \"label\": {\n        \"ja\": \"\u56fa\u6709\u60c5\u5831\",\n        \"en\": \"Custom Information\"\n      },\n      \"required\": [\n        \"sample1\",\n        \"sample2\"\n      ],\n      \"properties\": {\n        \"sample1\": {\n          \"label\": {\n            \"ja\": \"\u30b5\u30f3\u30d7\u30eb\uff11\",\n            \"en\": \"sample1\"\n          },\n          \"type\": \"string\",\n          \"format\": \"date\",\n          \"options\": {\n            \"unit\": \"A\"\n          }\n        },\n        \"sample2\": {\n          \"label\": {\n            \"ja\": \"\u30b5\u30f3\u30d7\u30eb\uff12\",\n            \"en\": \"sample2\"\n          },\n          \"type\": \"number\",\n          \"options\": {\n            \"unit\": \"b\"\n          }\n        },\n        \"sample3\": {\n          \"label\": {\n            \"ja\": \"\u30b5\u30f3\u30d7\u30eb\uff13\",\n            \"en\": \"sample3\"\n          },\n          \"type\": \"integer\",\n          \"options\": {\n            \"unit\": \"c\",\n            \"placeholder\": {\n              \"ja\": \"Please Enter text\",\n              \"en\": \"Please Enter text\"\n            }\n          }\n        },\n      }\n    },\n    \"sample\": {\n      \"type\": \"object\",\n      \"label\": {\n        \"ja\": \"\u8a66\u6599\u60c5\u5831\",\n        \"en\": \"Sample Information\"\n      },\n      \"properties\": {\n        \"generalAttributes\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"termId\"\n              ],\n              \"properties\": {\n                \"termId\": {\n                  \"const\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\"\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"termId\"\n              ],\n              \"properties\": {\n                \"termId\": {\n                  \"const\": \"e2d20d02-2e38-2cd3-b1b3-66fdb8a11057\"\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"termId\"\n              ],\n              \"properties\": {\n                \"termId\": {\n                  \"const\": \"efcf34e7-4308-c195-6691-6f4d28ffc9bb\"\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"termId\"\n              ],\n              \"properties\": {\n                \"termId\": {\n                  \"const\": \"1e70d11d-cbdd-bfd1-9301-9612c29b4060\"\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"termId\"\n              ],\n              \"properties\": {\n                \"termId\": {\n                  \"const\": \"5e166ac4-bfcd-457a-84bc-8626abe9188f\"\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"termId\"\n              ],\n              \"properties\": {\n                \"termId\": {\n                  \"const\": \"0d0417a3-3c3b-496a-b0fb-5a26f8a74166\"\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"termId\"\n              ],\n              \"properties\": {\n                \"termId\": {\n                  \"const\": \"efc6a0d5-313e-1871-190c-baaff7d1bf6c\"\n                }\n              }\n            }\n          ]\n        },\n        \"specificAttributes\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"classId\",\n                \"termId\"\n              ],\n              \"properties\": {\n                \"classId\": {\n                  \"const\": \"01cb3c01-37a4-5a43-d8ca-f523ca99a75b\"\n                },\n                \"termId\": {\n                  \"const\": \"3250c45d-0ed6-1438-43b5-eb679918604a\"\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"classId\",\n                \"termId\"\n              ],\n              \"properties\": {\n                \"classId\": {\n                  \"const\": \"01cb3c01-37a4-5a43-d8ca-f523ca99a75b\"\n                },\n                \"termId\": {\n                  \"const\": \"70c2c751-5404-19b7-4a5e-981e6cebbb15\"\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"classId\",\n                \"termId\"\n              ],\n              \"properties\": {\n                \"classId\": {\n                  \"const\": \"01cb3c01-37a4-5a43-d8ca-f523ca99a75b\"\n                },\n                \"termId\": {\n                  \"const\": \"e2d20d02-2e38-2cd3-b1b3-66fdb8a11057\"\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"classId\",\n                \"termId\"\n              ],\n              \"properties\": {\n                \"classId\": {\n                  \"const\": \"01cb3c01-37a4-5a43-d8ca-f523ca99a75b\"\n                },\n                \"termId\": {\n                  \"const\": \"518e26a0-4262-86f5-3598-80e18e6ff2af\"\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"usage/metadata_definition_file/#invoiceschemajson_2","title":"invoice.schema.json\u306e\u5b9a\u7fa9","text":"\u9805\u76ee\u540d   (JSON\u30dd\u30a4\u30f3\u30bf) \u578b \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u5fc5\u9808 \u56fa\u5b9a\u5024 \u8aac\u660e (\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30eb\u30fc\u30c8) object - \u25cb - JSON\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30eb\u30fc\u30c8\u3002 /$schema string uri \u25cb <code>https://json-schema.org/draft/2020-12/schema</code> \u30e1\u30bf\u30b9\u30ad\u30fc\u30de(\u30b9\u30ad\u30fc\u30de\u306e\u30b9\u30ad\u30fc\u30de)\u306eID\u3002 /$id string uri \u25cb - \u3053\u306e\u30b9\u30ad\u30fc\u30de\u306eID\u3002\u30e6\u30cb\u30fc\u30af\u3067\u3042\u308b\u3053\u3068 /description string - - - \u30b9\u30ad\u30fc\u30de\u306e\u8aac\u660e /type string - \u25cb \"object\" \u5024\u306f\u56fa\u5b9a\u3002 /required array - \u25cb - \u56fa\u6709\u60c5\u5831\u3092\u5165\u529b\u3055\u305b\u308b\u5834\u5408\u306f\"custom\"\u3092\u542b\u3081\u308b\u3002\u8a66\u6599\u60c5\u5831\u3092\u5165\u529b\u3055\u305b\u308b\u5834\u5408\u306f\"sample\"\u3092\u542b\u3081\u308b\u3002 /properties object - \u25cb - \u2002\u2002/custom object - - - \u9001\u308a\u72b6\u306e\u56fa\u6709\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002\u56fa\u6709\u60c5\u5831\u3092\u5165\u529b\u3055\u305b\u306a\u3044\u5834\u5408\u306f\u7701\u304f\u3002 \u2002\u2002\u2002\u2002/type string - \u25cb \"object\" \u5024\u306f\u56fa\u5b9a\u3002 \u2002\u2002\u2002\u2002/label object - \u25cb - \u56fa\u6709\u60c5\u5831\u306e\u898b\u51fa\u3057\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u6587\u5b57\u5217\u3002\u8a00\u8a9e\u5225\u306b\u6307\u5b9a\u3059\u308b\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/ja string - \u25cb - \u898b\u51fa\u3057\u306e\u65e5\u672c\u8a9e\u8868\u8a18\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/en string - \u25cb - \u898b\u51fa\u3057\u306e\u82f1\u8a9e\u8868\u8a18\u3002 \u2002\u2002\u2002\u2002/required object - \u25cb - \u5fc5\u9808\u306e\u30ad\u30fc\u540d\u3092\u6307\u5b9a\u3059\u308b\u3002\u8907\u6570\u6307\u5b9a\u53ef\u3002 \u2002\u2002\u2002\u2002/properties object - \u25cb - \u56fa\u6709\u60c5\u5831\u9805\u76ee\u306e\u30de\u30c3\u30d7\u3002\u8868\u793a\u3084\u5165\u529b\u3059\u308b\u969b\u306e\u9805\u76ee\u306e\u9806\u5e8f\u306f\u3001\u3053\u306e\u30b9\u30ad\u30fc\u30de\u3067\u306e\u8a18\u8ff0\u9806\u306b\u5f93\u3046\u3002 \u2002\u2002\u2002\u2002\u2002/{\u6700\u521d\u306e\u30ad\u30fc\u306e\u540d\u524d} object - - - \u6700\u521d\u306e\u9805\u76ee\u306e\u30ad\u30fc\u540d\u3002\u30ad\u30fc\u306e\u540d\u524d\u306f\u30d5\u30a1\u30a4\u30eb\u5168\u4f53\u3067\u30e6\u30cb\u30fc\u30af\u3067\u3042\u308b\u3053\u3068\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/type string - \u25cb - \u9805\u76ee\u306e\u5024\u306e\u30c7\u30fc\u30bf\u578b\u3002\"boolean\", \"integer\", \"number\", \"string\"\u306e\u3044\u305a\u308c\u304b1\u3064\u3092\u6307\u5b9a\u3059\u308b\u3002\"boolean\",\"integer\", \"number\", \"string\"\u306e\u3044\u305a\u308c\u306e\u5834\u5408\u3082null\u3092\u8a31\u5bb9\u3057\u306a\u3044\u3002\u203b\u6ce81 \u2002\u2002\u2002\u2002\u2002\u2002/description string - - - \u9805\u76ee\u306e\u8aac\u660e\u3002\u753b\u9762\u306b\u306f\u8868\u793a\u3057\u306a\u3044\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/examples array - - - \u5024\u306e\u4f8b\u3002\u753b\u9762\u306b\u306f\u8868\u793a\u3057\u306a\u3044\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/default \u4efb\u610f - - - \u521d\u671f\u5024\u3092\u6307\u5b9a\u3059\u308b\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/{\u6700\u521d\u306e\u30b9\u30ad\u30fc\u30de\u30ad\u30fc\u30ef\u30fc\u30c9} \u30ad\u30fc\u30ef\u30fc\u30c9\u306b\u4f9d\u5b58 - - - \u9805\u76ee\u306e\u5024\u306b\u95a2\u3059\u308b\u5236\u7d04\u3092\u6307\u5b9a\u3059\u308b\u30ad\u30fc\u30ef\u30fc\u30c9\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/{2\u756a\u76ee\u306e\u30b9\u30ad\u30fc\u30de\u30ad\u30fc\u30ef\u30fc\u30c9} \u30ad\u30fc\u30ef\u30fc\u30c9\u306b\u4f9d\u5b58 - - - \u540c\u4e0a \u2002\u2002\u2002\u2002\u2002\u2002/... - - - - \u2002\u2002\u2002\u2002\u2002\u2002/label object - \u25cb - \u753b\u9762\u306b\u8868\u793a\u3059\u308b\u9805\u76ee\u306e\u30e9\u30d9\u30eb\u3002\u8a00\u8a9e\u5225\u306b\u6307\u5b9a\u3059\u308b\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/ja string - \u25cb - \u65e5\u672c\u8a9e\u8868\u793a\u6642\u306e\u30e9\u30d9\u30eb\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/en string - \u25cb - \u82f1\u8a9e\u8868\u793a\u6642\u306e\u30e9\u30d9\u30eb\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/options object - - - \u9805\u76ee\u306b\u95a2\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u6307\u5b9a\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/widget string - - - \u753b\u9762\u90e8\u54c1\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u5834\u5408\u306b\u4f7f\u3046\u3002\"textarea\"\u306e\u307f\u6307\u5b9a\u53ef\u3002\u901a\u5e38\u306ftype\u306e\u5024\u306b\u5fdc\u3058\u305f\u753b\u9762\u90e8\u54c1\u304c\u751f\u6210\u3055\u308c\u308b\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/rows integer - - - \u753b\u9762\u90e8\u54c1\u304ctextarea\u306e\u5834\u5408\u306e\u884c\u6570\u3092\u6307\u5b9a\u3059\u308b\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/unit string - - - \u753b\u9762\u306b\u8868\u793a\u3059\u308b\u5358\u4f4d\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/placeholder object - - - \u753b\u9762\u90e8\u54c1\u306b\u8a2d\u5b9a\u3059\u308b\u30d7\u30ec\u30a4\u30b9\u30db\u30eb\u30c0\u3002\u8a00\u8a9e\u5225\u306b\u6307\u5b9a\u3059\u308b\u3002\u7701\u7565\u53ef\u80fd\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/ja string - - - \u65e5\u672c\u8a9e\u8868\u793a\u6642\u306e\u30d7\u30ec\u30a4\u30b9\u30db\u30eb\u30c0\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/en string - - - \u82f1\u8a9e\u8868\u793a\u6642\u306e\u30d7\u30ec\u30a4\u30b9\u30db\u30eb\u30c0\u3002 \u2002\u2002\u2002\u2002\u2002/{2\u756a\u76ee\u306e\u30ad\u30fc\u306e\u540d\u524d} object - - - 2\u756a\u76ee\u306e\u9805\u76ee\u306e\u30ad\u30fc\u540d\u3002 \u2002\u2002\u2002\u2002\u2002(\u4ee5\u4e0b\u7e70\u308a\u8fd4\u3057) - - - - \u2002\u2002/sample object - - - \u9001\u308a\u72b6\u306e\u8a66\u6599\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002\u8a66\u6599\u60c5\u5831\u3092\u5165\u529b\u3055\u305b\u306a\u3044\u5834\u5408\u306f\u7701\u304f\u3002 \u2002\u2002\u2002\u2002/type string - \u25cb \"object\" \u5024\u306f\u56fa\u5b9a\u3002 \u2002\u2002\u2002\u2002/label object - \u25cb - \u8a66\u6599\u60c5\u5831\u306e\u898b\u51fa\u3057\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u6587\u5b57\u5217\u3002\u8a00\u8a9e\u5225\u306b\u6307\u5b9a\u3059\u308b\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/ja string - \u25cb - \u898b\u51fa\u3057\u306e\u65e5\u672c\u8a9e\u8868\u8a18\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/en string - \u25cb - \u898b\u51fa\u3057\u306e\u82f1\u8a9e\u8868\u8a18\u3002 \u2002\u2002\u2002\u2002/properties object - \u25cb - \u8a66\u6599\u306e\u30d7\u30ed\u30d1\u30c6\u30a3 \u2002\u2002\u2002\u2002\u2002\u2002/generalAttributes object - - - \u4e00\u822c\u9805\u76ee\u3002\u4e00\u822c\u9805\u76ee\u3092\u5165\u529b\u3057\u306a\u3044\u5834\u5408\u306f\u7701\u7565\u53ef\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/type string - \u25cb \"array\" \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/items array - \u25cb - \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/0 object - - - \u6700\u521d\u306e\u4e00\u822c\u9805\u76ee\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/type string - \u25cb \"object\" \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/required array - \u25cb [\"termId\"] \u4e00\u822c\u9805\u76ee\u304c\u6301\u3064\u5fc5\u9808\u30d7\u30ed\u30d1\u30c6\u30a3\u3002\u56fa\u5b9a\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/properties object - \u25cb - \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/termId object - \u25cb - \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/const string - \u25cb - \u3053\u306e\u4e00\u822c\u9805\u76ee\u306e\u7528\u8a9eID\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/1 object - - - 2\u756a\u76ee\u306e\u4e00\u822c\u9805\u76ee\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002(\u4ee5\u4e0b\u7e70\u308a\u8fd4\u3057) - - - - \u2002\u2002\u2002\u2002\u2002\u2002/specificAttributes object - - - \u5206\u985e\u5225\u9805\u76ee\u3002\u5206\u985e\u5225\u9805\u76ee\u3092\u5165\u529b\u3057\u306a\u3044\u5834\u5408\u306f\u7701\u7565\u53ef\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/type string - \u25cb \"array\" \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/items array - \u25cb \"string\" \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/0 object - - - \u6700\u521d\u306e\u5206\u985e\u5225\u9805\u76ee\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/type string - \u25cb \"object\" \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/required array - \u25cb [\"classId\",\"termId\"] \u5206\u985e\u5225\u9805\u76ee\u304c\u6301\u3064\u5fc5\u9808\u30d7\u30ed\u30d1\u30c6\u30a3\u3002\u56fa\u5b9a\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/properties object - \u25cb - \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/classId object - \u25cb - \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/const string uuid \u25cb - \u3053\u306e\u5206\u985e\u5225\u9805\u76ee\u306e\u8a66\u6599\u5206\u985eID\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/termId object - \u25cb - \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/const string - \u25cb - \u3053\u306e\u5206\u985e\u5225\u9805\u76ee\u306e\u7528\u8a9eID\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/1 object - - - 2\u756a\u76ee\u306e\u5206\u985e\u5225\u9805\u76ee\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002(\u4ee5\u4e0b\u7e70\u308a\u8fd4\u3057) - - - -"},{"location":"usage/metadata_definition_file/#invoiceschemajson_3","title":"invoice.schema.json\u3067\u5229\u7528\u53ef\u80fd\u306a\u30b9\u30ad\u30fc\u30de\u30ad\u30fc\u30ef\u30fc\u30c9\u4e00\u89a7","text":"<p>\u9805\u76ee\u306e\u5024\u306b\u95a2\u3059\u308b\u5236\u7d04\u3068\u3057\u3066\u6307\u5b9a\u53ef\u80fd\u306a\u30b9\u30ad\u30fc\u30de\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4e0b\u8868\u306b\u793a\u3059\u3002</p> type \u30ad\u30fc\u30ef\u30fc\u30c9 \u5024\u306e\u578b \u8aac\u660e \u5024\u306e\u5236\u7d04 \u3059\u3079\u3066 type string \u5024\u306e\u578b\u3092\u6307\u5b9a\u3059\u308b\u3002\u53d6\u308a\u5f97\u308b\u5024\u306f\"boolean\", \"integer\", \"number\", \"string\"\u306e\u3044\u305a\u308c\u304b\u3002 \u6307\u5b9a\u3067\u304d\u308b\u578b\u306f1\u3064\u306e\u307f const type\u306b\u4f9d\u5b58 \u5b9a\u6570\u3092\u6307\u5b9a\u3059\u308b\u3002\u3053\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u5165\u529b\u30fb\u7de8\u96c6\u4e0d\u53ef\u3002 enum array \u53d6\u308a\u5f97\u308b\u5024\u3092\u6307\u5b9a\u3059\u308b\u3002 number\u307e\u305f\u306f integer maximum number \u6570\u5024\u304c\u6307\u5b9a\u3055\u308c\u305f\u5024\u4ee5\u4e0b\u3067\u3042\u308b\u3053\u3068\u3092\u5ba3\u8a00\u3059\u308b\u3002 exclusiveMaximum number \u6570\u5024\u304c\u6307\u5b9a\u3055\u308c\u305f\u5024\u672a\u6e80\u3067\u3042\u308b\u3053\u3068\u3092\u5ba3\u8a00\u3059\u308b\u3002 minimum number \u6570\u5024\u304c\u6307\u5b9a\u3055\u308c\u305f\u5024\u4ee5\u4e0a\u3067\u3042\u308b\u3053\u3068\u3092\u5ba3\u8a00\u3059\u308b\u3002 exclusiveMinimum number \u6570\u5024\u304c\u6307\u5b9a\u3055\u308c\u305f\u5024\u3088\u308a\u5927\u304d\u3044\u3053\u3068\u3092\u5ba3\u8a00\u3059\u308b\u3002 string maxLength integer \u6587\u5b57\u5217\u306e\u9577\u3055\u306e\u6700\u5927\u5024\u3092\u6307\u5b9a\u3059\u308b\u3002 \u5024\u306f2,147,483,647\u4ee5\u4e0b\u3067\u3042\u308b\u3053\u3068\u3002 minLength integer \u6587\u5b57\u5217\u306e\u9577\u3055\u306e\u6700\u5c0f\u5024\u3092\u6307\u5b9a\u3059\u308b\u30020\u4ee5\u4e0a\u3002 pattern string \u6b63\u898f\u8868\u73fe\u3067\u6307\u5b9a\u3057\u305f\u30d1\u30bf\u30fc\u30f3\u3092\u6301\u3064\u3053\u3068\u3092\u5ba3\u8a00\u3059\u308b\u3002 \u958b\u767a\u8a00\u8a9e\u306b\u4f9d\u5b58\u3057\u306a\u3044\u30d1\u30bf\u30fc\u30f3\u306b\u9650\u5b9a format string \u6587\u5b57\u5217\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6307\u5b9a\u3002\u6307\u5b9a\u53ef\u80fd\u306a\u5024\u306f<code>\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u4e00\u89a7</code>\u3092\u53c2\u7167\u306e\u3053\u3068\u3002"},{"location":"usage/metadata_definition_file/#invoiceschemajson_4","title":"invoice.schema.json\u3067\u5229\u7528\u53ef\u80fd\u306a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u4e00\u89a7","text":"<p>\u30b9\u30ad\u30fc\u30de\u30ad\u30fc\u30ef\u30fc\u30c9format\u304c\u53d6\u308a\u5f97\u308b\u5024\u3092\u4e0b\u8868\u306b\u793a\u3059\u3002</p> type \u30ad\u30fc\u30ef\u30fc\u30c9 date \u65e5\u4ed8\u3002RFC 3339\u306efull-date\u3002 time \u6642\u523b\u3002RFC 3339\u306efull-time\u3002 uri URI uuid UUID\u3002URN\u5f62\u5f0f\u3067\u306f\u306a\u304f\u7d20\u306eUUID markdown Markdown\u5f62\u5f0f\u306e\u6587\u5b57\u5217\u3002\u3053\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306fJSON\u30b9\u30ad\u30fc\u30de\u306e\u6a19\u6e96\u4ed5\u69d8\u306b\u306f\u5b58\u5728\u3057\u306a\u3044\u3002"},{"location":"usage/metadata_definition_file/#invoiceschemajson_5","title":"invoice.schema.json\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066","text":"<p>\u9805\u76ee\u306b\u95a2\u3059\u308b\u5404\u7a2e\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306foptions\u30ad\u30fc\u30ef\u30fc\u30c9\u306b\u3088\u3063\u3066\u6307\u5b9a\u3067\u304d\u308b\u3002\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u6307\u5b9a\u53ef\u80fd\u306a\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4e0b\u8868\u306b\u793a\u3059\u3002</p> \u30ad\u30fc\u30ef\u30fc\u30c9 \u5024\u306e\u578b \u8aac\u660e format string \u751f\u6210\u3059\u308b\u753b\u9762\u90e8\u54c1\u306e\u7a2e\u985e\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u3002\u53d6\u308a\u5f97\u308b\u5024\u306f\u201dtextarea\u201d\u306e\u307f\u3068\u3059\u308b\u3002 widget string \u751f\u6210\u3059\u308b\u753b\u9762\u90e8\u54c1\u306e\u7a2e\u985e\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u3002\u53d6\u308a\u5f97\u308b\u5024\u306f\u201dtextarea\u201d\u306e\u307f\u3068\u3059\u308b\u3002 rows integer widget\u306e\u5024\u304c\u201dtextarea\u201d\u306e\u5834\u5408\u306erows\u5c5e\u6027\u306e\u5024\u3092\u6307\u5b9a\u3059\u308b\u3002 unit string \u5358\u4f4d\u306e\u8868\u793a\u5185\u5bb9\u3092\u6307\u5b9a\u3059\u308b\u3002 placeholder object \u753b\u9762\u90e8\u54c1\u306b\u8a2d\u5b9a\u3059\u308b\u30d7\u30ec\u30a4\u30b9\u30db\u30eb\u30c0\u3002\u65e5\u672c\u8a9e\u3068\u82f1\u8a9e\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002"},{"location":"usage/metadata_definition_file/#invoicejson","title":"invoice.json\u306b\u3064\u3044\u3066","text":"<p>invoice.schema.json\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306f\u3001\u5fc5\u8981\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002</p>"},{"location":"usage/metadata_definition_file/#invoicejson_1","title":"invoice.json\u306e\u69cb\u7bc9\u4f8b","text":"invoice.json\u306e\u69cb\u7bc9\u4f8b <pre><code>{\n  \"datasetId\": \"1s1199df4-0d1v-41b0-1dea-23bf4dh09g12\",\n  \"basic\": {\n    \"dateSubmitted\": \"\",\n    \"dataOwnerId\": \"0c233ef274f28e611de4074638b4dc43e737ab993132343532343430\",\n    \"dataName\": \"test-dataset\",\n    \"instrumentId\": null,\n    \"experimentId\": null,\n    \"description\": null\n  },\n  \"custom\": {\n    \"sample1\": \"2023-01-01\",\n    \"sample2\": 1.0,\n    \"sample3\": 1\n  },\n  \"sample\": {\n    \"sampleId\": \"\",\n    \"names\": [\"test\"],\n    \"composition\": null,\n    \"referenceUrl\": null,\n    \"description\": null,\n    \"generalAttributes\": [\n      {\n        \"termId\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\",\n        \"value\": null\n      },\n      {\n        \"termId\": \"e2d20d02-2e38-2cd3-b1b3-66fdb8a11057\",\n        \"value\": null\n      },\n      {\n        \"termId\": \"efcf34e7-4308-c195-6691-6f4d28ffc9bb\",\n        \"value\": null\n      },\n      {\n        \"termId\": \"1e70d11d-cbdd-bfd1-9301-9612c29b4060\",\n        \"value\": null\n      },\n      {\n        \"termId\": \"5e166ac4-bfcd-457a-84bc-8626abe9188f\",\n        \"value\": null\n      },\n      {\n        \"termId\": \"0d0417a3-3c3b-496a-b0fb-5a26f8a74166\",\n        \"value\": null\n      },\n      {\n        \"termId\": \"efc6a0d5-313e-1871-190c-baaff7d1bf6c\",\n        \"value\": null\n      }\n    ],\n    \"specificAttributes\": [\n      {\n        \"classId\": \"01cb3c01-37a4-5a43-d8ca-f523ca99a75b\",\n        \"termId\": \"3250c45d-0ed6-1438-43b5-eb679918604a\",\n        \"value\": null\n      },\n      {\n        \"classId\": \"01cb3c01-37a4-5a43-d8ca-f523ca99a75b\",\n        \"termId\": \"70c2c751-5404-19b7-4a5e-981e6cebbb15\",\n        \"value\": null\n      },\n      {\n        \"classId\": \"01cb3c01-37a4-5a43-d8ca-f523ca99a75b\",\n        \"termId\": \"e2d20d02-2e38-2cd3-b1b3-66fdb8a11057\",\n        \"value\": null\n      },\n      {\n        \"classId\": \"01cb3c01-37a4-5a43-d8ca-f523ca99a75b\",\n        \"termId\": \"518e26a0-4262-86f5-3598-80e18e6ff2af\",\n        \"value\": null\n      }\n    ],\n    \"ownerId\": \"de17c7b3f0ff5126831c2d519f481055ba466ddb6238666132316439\"\n  }\n}\n</code></pre>"},{"location":"usage/metadata_definition_file/#invoicejson_2","title":"invoice.json\u306e\u5b9a\u7fa9","text":"\u9805\u76ee (JSON\u30dd\u30a4\u30f3\u30bf) \u30d0\u30ea\u30e5\u30fc\u578b \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u5fc5\u9808 \u8aac\u660e (\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30eb\u30fc\u30c8) object - \u25cb /datasetId string uuid \u25cb \u30c7\u30fc\u30bf\u306e\u767b\u9332\u5148\u3068\u306a\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306eID\u3002 /basic object - \u25cb \u9001\u308a\u72b6\u306e\u57fa\u672c\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002 \u2002\u2002/dateSubmitted string date \u25cb \u9001\u308a\u72b6\u304c\u63d0\u51fa\u3055\u308c\u305f\u65e5\u3002\u8aad\u307f\u53d6\u308a\u5c02\u7528\u3002 \u2002\u2002/dataOwnerId string - - \u30c7\u30fc\u30bf\u3092\u6240\u6709\u3059\u308b\u30e6\u30fc\u30b6\u306eID\u3002 \u2002\u2002/dataName string - \u25cb \u30c7\u30fc\u30bf\u306e\u540d\u524d\u3002 \u2002\u2002/instrumentId string uuid - \u88c5\u7f6eID\u3002 \u2002\u2002/experimentId string - - \u5b9f\u9a13ID\u3002\u30e6\u30fc\u30b6\u304c\u81ea\u7531\u306b\u63a1\u756a\u3059\u308b\u3002 \u2002\u2002/description string - - \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aac\u660e\u3002 /custom object - - \u9001\u308a\u72b6\u306e\u56fa\u6709\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u542b\u307e\u308c\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u9001\u308a\u72b6\u30b9\u30ad\u30fc\u30de\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u3002 \u2002\u2002\u2026 - - - /sample object - - \u9001\u308a\u72b6\u306e\u8a66\u6599\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002\u30d7\u30ed\u30d1\u30c6\u30a3\u306fsampleId, ownerId\u3092\u9664\u3044\u3066\u8a66\u6599API\u306e\u8a66\u6599\u5c5e\u6027\u3068\u4e00\u81f4\u3002\u8a66\u6599\u3078\u306e\u95b2\u89a7\u6a29\u9650\u304c\u7121\u3044\u5834\u5408\u306f\u3001\u5b50\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u542b\u3081\u3066\u51fa\u529b\u9805\u76ee\u306b\u542b\u3081\u306a\u3044\u3002 \u2002\u2002/sampleId string uuid - \u8a66\u6599\u306eID\u3002\u9001\u308a\u72b6\u306e\u521d\u56de\u63d0\u51fa\u6642\u306b\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u4e0d\u8981\u3002 \u2002\u2002/names array - \u25cb \u8a66\u6599\u540d\u306e\u30ea\u30b9\u30c8\u3002 \u2002\u2002\u2002\u2002/0 string - \u25cb \u8a66\u6599\u306e\u4e3b\u305f\u308b\u540d\u524d\u3002 \u2002\u2002\u2002\u2002\u2026 - - - 2\u756a\u76ee\u4ee5\u964d\u306e\u540d\u524d\u3002 \u2002\u2002/composition string - - \u8a66\u6599\u306e\u7d44\u6210\u3002 \u2002\u2002/referenceUrl string uri - \u8a66\u6599\u306e\u53c2\u8003URL\u3002 \u2002\u2002/description string - - \u8a66\u6599\u306e\u8aac\u660e\u3002 \u2002\u2002/generalAttributes array - - \u4e00\u822c\u8a66\u6599\u5c5e\u6027\u306e\u30ea\u30b9\u30c8\u3002\u753b\u9762\u306e\u4e00\u822c\u9805\u76ee\u306b\u8a72\u5f53\u3059\u308b\u3002 \u2002\u2002\u2002\u2002/0 object - - \u6700\u521d\u306e\u5c5e\u6027\u3002\u203b\u6ce81 \"boolean\",\"integer\", \"number\", \"string\"\u306f\u3001\u5024\u306e\u8a2d\u5b9a\u304c\u306a\u3044\u5834\u5408\u306f\u51fa\u529b\u3057\u306a\u3044\u3002\u4ee5\u4e0b\u3002\u540c\u69d8\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/termId string uuid \u25cb \u5c5e\u6027\u306e\u540d\u524d\u3068\u3057\u3066\u306e\u7528\u8a9eID\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/value string - - \u5c5e\u6027\u306e\u5024\u3002 \u2002\u2002\u2002\u2002\u2026 - - \u25cb 2\u756a\u76ee\u4ee5\u964d\u306e\u5c5e\u6027\u3002 \u2002\u2002/specificAttributes array - - \u7279\u5b9a\u8a66\u6599\u5c5e\u6027\u306e\u30ea\u30b9\u30c8\u3002\u753b\u9762\u306e\u5206\u985e\u5225\u9805\u76ee\u306b\u8a72\u5f53\u3059\u308b\u3002 \u2002\u2002\u2002\u2002/0 object - - \u6700\u521d\u306e\u5c5e\u6027\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/classId string uuid \u25cb \u8a66\u6599\u5206\u985e\u306eID\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/termId string uuid \u25cb \u5c5e\u6027\u306e\u540d\u524d\u3068\u3057\u3066\u306e\u7528\u8a9eID\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/value string - - \u5c5e\u6027\u306e\u5024\u3002 \u2002\u2002\u2002\u2002\u2026 - - - 2\u756a\u76ee\u4ee5\u964d\u306e\u5c5e\u6027\u3002 \u2002\u2002/ownerId string - - \u8a66\u6599\u7ba1\u7406\u8005\u306eID\u3002"},{"location":"usage/metadata_definition_file/#metadata-defjson","title":"metadata-def.json","text":"<p>\u30c7\u30fc\u30bf\u69cb\u9020\u5316\u304c\u51fa\u529b\u3059\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u540d\u524d\u3084\u30c7\u30fc\u30bf\u578b\u3092\u5ba3\u8a00\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3002\u9001\u308a\u72b6\u7b49\u306b\u5165\u529b\u3055\u308c\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u306f\u3001<code>metadata-def.json</code>\u306b\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002</p>"},{"location":"usage/metadata_definition_file/#metadata-defjson_1","title":"metadata-def.json\u306e\u69cb\u7bc9\u4f8b","text":"metadata-def.json\u306e\u69cb\u7bc9\u4f8b <pre><code>{\n    \"operator_identifier\": {\n        \"name\": {\n            \"ja\": \"\u6e2c\u5b9a\u8005\",\n            \"en\": \"Operator identifier\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        },\n        \"order\": 1,\n        \"originalName\": \"Operator\"\n    },\n    \"comment\": {\n        \"name\": {\n            \"ja\": \"\u30b3\u30e1\u30f3\u30c8\",\n            \"en\": \"Comment\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        },\n        \"order\": 2,\n        \"originalName\": \"Comment\"\n    },\n    \"memo\": {\n        \"name\": {\n            \"ja\": \"\u30e1\u30e2\",\n            \"en\": \"Memo\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        },\n        \"order\": 3,\n        \"originalName\": \"Memo\",\n        \"variable\": 1\n    },\n    \"measurement_operator\": {\n        \"name\": {\n            \"ja\": \"\u6e2c\u5b9a\u5b9f\u65bd\u8005\",\n            \"en\": \"Measurement Operator\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        },\n        \"order\": 4,\n        \"originalName\": \"Operator\",\n        \"variable\": 1\n    },\n    \"specimen\": {\n        \"name\": {\n            \"ja\": \"\u8a66\u6599\",\n            \"en\": \"Specimen\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        },\n        \"order\": 5,\n        \"originalName\": \"SampleName\",\n        \"variable\": 1\n    },\n    \"peak\": {\n        \"name\": {\n            \"ja\": \"\u30d4\u30fc\u30af\u5024\",\n            \"en\": \"peak value\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        },\n        \"unit\": \"V\"\n        \"order\": 6,\n        \"variable\": 1\n    }\n}\n</code></pre>"},{"location":"usage/metadata_definition_file/#metadata-defjson_2","title":"metadata-def.json\u306e\u5b9a\u7fa9","text":"\u9805\u76ee (JSON\u30dd\u30a4\u30f3\u30bf) \u30d0\u30ea\u30e5\u30fc\u578b \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u5fc5\u9808 \u8aac\u660e (\u30eb\u30fc\u30c8) object - \u25cb JSON\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30eb\u30fc\u30c8\u3002 /{\u6700\u521d\u306e\u30ad\u30fc\u306e\u540d\u524d} object - \u25cb \u6700\u521d\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u9805\u76ee\u306e\u30ad\u30fc\u540d\u3002\u5168\u3066\u306e\u30ad\u30fc\u540d\u306f\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u30e6\u30cb\u30fc\u30af\u3067\u3042\u308b\u3053\u3068\u3002 \u2002\u2002/name object - \u25cb - \u2002\u2002\u2002\u2002/ja string - \u25cb \u30e1\u30bf\u30c7\u30fc\u30bf\u9805\u76ee\u540d\u306e\u65e5\u672c\u8a9e\u8868\u8a18\u3002 \u2002\u2002\u2002\u2002/en string - \u25cb \u30e1\u30bf\u30c7\u30fc\u30bf\u9805\u76ee\u540d\u306e\u82f1\u8a9e\u8868\u8a18\u3002 \u2002\u2002/schema object - \u25cb JSON Schema (2020-12)\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u3042\u308btype\u3068format\u3092\u4f7f\u7528\u3059\u308b\u3002\u3053\u308c\u3089\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u5b9a\u7fa9\u306fJSON Schema\u306b\u5f93\u3046\u3002 \u2002\u2002\u2002\u2002/type string - \u25cb \"s \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u5024\u306e\u578b\u3002\u53d6\u308a\u5f97\u308b\u5024\u306f\"array\", \"boolean\"\u3001\"integer\"\u3001\"number\"\u3001\"string\"\u3002\"array\"\u306e\u5834\u5408\u3001\u8981\u7d20\u306e\u578b\u306f\u898f\u5b9a\u3057\u306a\u3044\u3002 \u2002\u2002\u2002\u2002/format string - - \"d \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u5024\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3002\u53d6\u308a\u5f97\u308b\u5024\u306f\"date-time\"\u3001\"duration\"\u3002 \u2002\u2002/unit string - - \u30e1\u30bf\u30c7\u30fc\u30bf\u9805\u76ee\u306e\u5024\u306b\u4ed8\u52a0\u3059\u308b\u5358\u4f4d\u3002\u5358\u4f4d\u304c\u7121\u3044\u5834\u5408\u306f\u7701\u7565\u3059\u308b\u3002 \u2002\u2002/description string - - \u30e1\u30bf\u30c7\u30fc\u30bf\u9805\u76ee\u306e\u8aac\u660e\u3002 \u2002\u2002/uri string uri - \u30e1\u30bf\u30c7\u30fc\u30bf\u9805\u76ee\u306e\u30ad\u30fc\u306b\u7d10\u3065\u304fURI/URL\u3002 \u2002\u2002/mode string - - \"S \u3053\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u9805\u76ee\u304c\u6709\u52b9\u3067\u3042\u308b\u8a08\u6e2c\u30e2\u30fc\u30c9\u3002\u8a08\u6e2c\u30e2\u30fc\u30c9\u306e\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u306f\u7701\u7565\u53ef\u3002 \u2002\u2002/order integer - - \u30e1\u30bf\u30c7\u30fc\u30bf\u9805\u76ee\u306e\u8868\u793a\u9806\u5e8f\u3002\u5024\u306e\u6607\u9806\u306b\u8868\u793a\u3059\u308b\u3002\u540c\u5024\u306e\u5834\u5408\u306e\u8868\u793a\u9806\u306f\u4e0d\u5b9a\u3002 /{2\u756a\u76ee\u306e\u30ad\u30fc\u306e\u540d\u524d} object - - 2\u756a\u76ee\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u9805\u76ee\u306e\u30ad\u30fc\u540d\u3002 \u2002\u2002(\u4ee5\u4e0b\u7e70\u308a\u8fd4\u3057) - - <p>Note</p> <p>\u69cb\u7bc9\u4f8b\u3067\u63d0\u793a\u3057\u305fmetadata-def.json\u306b<code>variable</code>\u3068\u3044\u3046\u5b9a\u7fa9\u306b\u306a\u3044\u5c5e\u6027\u304c\u3042\u308b\u3002\u3053\u306e\u5834\u5408\u3001RDE\u3067\u306f\u3001<code>variable</code>\u3092\u7121\u8996\u3057\u3066\u53d6\u8fbc\u306f\u884c\u308f\u306a\u3044\u3002</p>"},{"location":"usage/metadata_definition_file/#metadatajson","title":"metadata.json","text":"<p>metadata-def.jso\u306f\u3001\u30c7\u30fc\u30bf\u69cb\u9020\u5316\u51e6\u7406\u304c\u62bd\u51fa\u3057\u305f\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002</p>"},{"location":"usage/metadata_definition_file/#metadatajson_1","title":"metadata.json\u306e\u69cb\u7bc9\u4f8b","text":"metadata.json\u306e\u69cb\u7bc9\u4f8b <pre><code>{\n  \"constatn\": {\n    \"operator_identifier\": {\n      \"value\": \"Mike\",\n    },\n    \"comment\": {\n      \"value\": \"sample data\",\n    },\n    \"memo\": {\n      \"value\": \"test\",\n    },\n    \"measurement_operator\": {\n      \"value\": \"Alice\",\n    },\n  },\n  \"variable\": [\n    {\n      \"specimen\": {\n        \"value\": \"C\",\n      },\n      \"peak\": {\n        \"value\": 120,\n        \"unit\": \"V\"\n      }\n    },\n    {\n      \"specimen\": {\n        \"value\": \"H\",\n      },\n      \"peak\": {\n        \"value\": 58,\n        \"unit\": \"V\"\n      }\n    },\n    {\n      \"specimen\": {\n        \"value\": \"O\",\n      },\n      \"peak\": {\n        \"value\": 190,\n        \"unit\": \"V\"\n      }\n    },\n  ]\n}\n</code></pre>"},{"location":"usage/metadata_definition_file/#metadatajson_2","title":"metadata.json\u306e\u5b9a\u7fa9","text":"\u9805\u76ee (JSON\u30dd\u30a4\u30f3\u30bf) \u30d0\u30ea\u30e5\u30fc\u578b \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u5fc5\u9808 \u8aac\u660e /constant object - \u25cb \u5168\u3066\u306e\u8a08\u6e2c\u306b\u5171\u901a\u306a\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u96c6\u5408\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u5b9a\u7fa9\u3067\u306e\u300c\u8a08\u6e2c\u300d\u306b\u306f\u8a08\u7b97\u306a\u3069\u3092\u542b\u3080\u3002 \u2002\u2002/{\u30ad\u30fc\u306e\u540d\u524d} object - \u25cb \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u30ad\u30fc\u306e\u540d\u524d\u3002 \u2002\u2002\u2002\u2002/value \u30ad\u30fc\u306b\u4f9d\u5b58 - \u25cb \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u5024\u3002 \u2002\u2002\u2002\u2002/unit string - - \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u5024\u306e\u5358\u4f4d\u3002\u5358\u4f4d\u304c\u7121\u3044\u5834\u5408\u306f\u7701\u7565\u53ef\u3002 \u2002\u2002/{\u30ad\u30fc\u306e\u540d\u524d} object - \u25cb \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u30ad\u30fc\u306e\u540d\u524d\u3002 ... - - \u25cb /variable array - \u25cb \u8a08\u6e2c\u3054\u3068\u306b\u7570\u306a\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u914d\u5217\u3002 \u2002\u2002/0 object - \u25cb \u6700\u521d\u306e\u8a08\u6e2c\u306b\u56fa\u6709\u306a\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u96c6\u5408\u3002 \u2002\u2002\u2002\u2002/{\u30ad\u30fc\u306e\u540d\u524d} object - - \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u30ad\u30fc\u306e\u540d\u524d\u3002\u914d\u5217\u306e\u5404\u8981\u7d20\u3067\u30ad\u30fc\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u7701\u7565\u53ef\u80fd\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/value \u30ad\u30fc\u306b\u4f9d\u5b58 - \u25cb \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u5024\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/unit string - - \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u5024\u306e\u5358\u4f4d\u3002\u5358\u4f4d\u304c\u7121\u3044\u5834\u5408\u306f\u7701\u7565\u53ef\u3002 \u2002\u2002\u2002\u2002/{\u30ad\u30fc\u306e\u540d\u524d} object - - \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u30ad\u30fc\u306e\u540d\u524d\u3002 \u2002\u2002\u2002\u2002... - - \u25cb \u2002\u2002/1 object - \u25cb 2\u756a\u76ee\u306e\u8a08\u6e2c\u306b\u56fa\u6709\u306a\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u96c6\u5408\u3002 \u2002\u2002(\u4ee5\u4e0b\u7e70\u308a\u8fd4\u3057) - - \u25cb"},{"location":"usage/metadata_definition_file/#_3","title":"\u7e70\u308a\u8fd4\u3057\u30e1\u30bf\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066","text":"<p>RDE\u306b\u306f\u3001\u8a08\u6e2c\u3054\u3068\u306b\u7570\u306a\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3057\u3066\u7e70\u308a\u8fd4\u3057\u30e1\u30bf\u30c7\u30fc\u30bf\u304c\u5b9a\u7fa9\u53ef\u80fd\u3067\u3059\u3002\u7e70\u308a\u8fd4\u3057\u30e1\u30bf\u30c7\u30fc\u30bf\u3068\u3057\u3066\u767b\u9332\u3059\u308b\u5834\u5408\u3001<code>variable: 1</code>\u3068\u3044\u3046\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002RDE\u306e\u30b7\u30b9\u30c6\u30e0\u306b\u306f\u3001<code>variable</code>\u306f\u53d6\u8fbc\u306f\u884c\u308f\u308c\u307e\u305b\u3093\u3002</p> <p>\u3057\u304b\u3057\u3001<code>metadata-def.json</code>\u3067<code>variable: 1</code>\u306b\u30bb\u30c3\u30c8\u3057\u305f\u30e1\u30bf\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u306f\u3001<code>metadata.json</code>\u3067<code>variable</code>\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"usage/metadata_definition_file/#catalogschemajson","title":"catalog.schema.json","text":"<p>\u30c7\u30fc\u30bf\u30ab\u30bf\u30ed\u30b0\u306e\u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u3002\u30b9\u30ad\u30fc\u30de\u306e\u5f62\u5f0f\u306fJSON Schema\u306e\u6a19\u6e96\u4ed5\u69d8\u306b\u6e96\u62e0\u3057\u307e\u3059\u3002</p>"},{"location":"usage/metadata_definition_file/#catalogschemajson_1","title":"catalog.schema.json\u69cb\u7bc9\u4f8b","text":"<pre><code>{\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"$id\": \"https://rde.nims.go.jp/rde/dataset-templates/dataset_template_custom_sample/catalog.schema.json\",\n    \"type\": \"object\",\n    \"required\": [\n        \"catalog\"\n    ],\n    \"description\": \"dataset_template_custom_sample\",\n    \"properties\": {\n        \"catalog\": {\n            \"type\": \"object\",\n            \"label\": {\n                \"ja\": \"RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30b5\u30f3\u30d7\u30eb\u56fa\u6709\u60c5\u5831\",\n                \"en\": \"dataset_template__custom_sample\"\n            },\n            \"required\": [],\n            \"properties\": {\n                \"dataset_title\": {\n                    \"label\": {\n                        \"ja\": \"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u540d\",\n                        \"en\": \"Dataset Title\"\n                    },\n                    \"type\": \"string\"\n                },\n                \"abstract\": {\n                    \"label\": {\n                        \"ja\": \"\u6982\u8981\",\n                        \"en\": \"Abstract\"\n                    },\n                    \"type\": \"string\"\n                },\n                \"data_creator\": {\n                    \"label\": {\n                        \"ja\": \"\u4f5c\u6210\u8005\",\n                        \"en\": \"Data Creator\"\n                    },\n                    \"type\": \"string\"\n                },\n                \"language\": {\n                    \"label\": {\n                        \"ja\": \"\u8a00\u8a9e\",\n                        \"en\": \"Language\"\n                    },\n                    \"type\": \"string\"\n                },\n                \"experimental_apparatus\": {\n                    \"label\": {\n                        \"ja\": \"\u4f7f\u7528\u88c5\u7f6e\",\n                        \"en\": \"Experimental Apparatus\"\n                    },\n                    \"type\": \"string\"\n                },\n                \"data_distribution\": {\n                    \"label\": {\n                        \"ja\": \"\u30c7\u30fc\u30bf\u306e\u518d\u914d\u5e03\",\n                        \"en\": \"Data Distribution\"\n                    },\n                    \"type\": \"string\"\n                },\n                \"raw_data_type\": {\n                    \"label\": {\n                        \"ja\": \"\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\",\n                        \"en\": \"Raw Data Type\"\n                    },\n                    \"type\": \"string\"\n                },\n                \"stored_data\": {\n                    \"label\": {\n                        \"ja\": \"\u683c\u7d0d\u30c7\u30fc\u30bf\",\n                        \"en\": \"Stored Data\"\n                    },\n                    \"type\": \"string\",\n                    \"options\": {\n                        \"widget\": \"textarea\",\n                        \"rows\": 5\n                    }\n                },\n                \"remarks\": {\n                    \"label\": {\n                        \"ja\": \"\u5099\u8003\",\n                        \"en\": \"Remarks\"\n                    },\n                    \"type\": \"string\",\n                    \"options\": {\n                        \"widget\": \"textarea\",\n                        \"rows\": 5\n                    }\n                },\n                \"references\": {\n                    \"label\": {\n                        \"ja\": \"\u53c2\u8003\u8ad6\u6587\",\n                        \"en\": \"References\"\n                    },\n                    \"type\": \"string\"\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"usage/metadata_definition_file/#catalogschemajson_2","title":"catalog.schema.json\u306e\u5b9a\u7fa9","text":"\u9805\u76ee (JSON\u30dd\u30a4\u30f3\u30bf\u8868\u73fe) \u30d0\u30ea\u30e5\u30fc\u578b \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u5fc5\u9808 \u8aac\u660e (\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30eb\u30fc\u30c8) object - \u25cb /$schema string uri \u25cb \u30e1\u30bf\u30b9\u30ad\u30fc\u30de(\u30b9\u30ad\u30fc\u30de\u306e\u30b9\u30ad\u30fc\u30de)\u306eID\u3002\u56fa\u5b9a\u6587\u5b57\u5217<code>https://json-schema.org/draft/2020-12/schema</code>\u3092\u6307\u5b9a\u3002 /$id string uri \u25cb \u3053\u306e\u30b9\u30ad\u30fc\u30de\u306eID\u3002\u30e6\u30cb\u30fc\u30af\u3067\u3042\u308b\u3053\u3068\u3002 /description string - - \u3053\u306e\u30b9\u30ad\u30fc\u30de\u306e\u8aac\u660e\u3002 /type string - \u25cb \u5024\u306f\u56fa\u5b9a\u3002 /required array - - \u5024\u306f\u56fa\u5b9a\u3002 /properties object - \u25cb \u2002\u2002/catalog object - \u25cb \u30c7\u30fc\u30bf\u30ab\u30bf\u30ed\u30b0\u9805\u76ee\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002 \u2002\u2002\u2002\u2002/type string - \u25cb \u5024\u306f\u56fa\u5b9a\u3002 \u2002\u2002\u2002\u2002/label object - \u25cb \u898b\u51fa\u3057\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u6587\u5b57\u5217\u3002\u8a00\u8a9e\u5225\u306b\u6307\u5b9a\u3059\u308b\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/ja string - \u25cb \u898b\u51fa\u3057\u306e\u65e5\u672c\u8a9e\u8868\u8a18\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/en string - \u25cb \u898b\u51fa\u3057\u306e\u82f1\u8a9e\u8868\u8a18\u3002 \u2002\u2002\u2002\u2002/required object - \u25cb \u5fc5\u9808\u306e\u30ad\u30fc\u540d\u3092\u6307\u5b9a\u3059\u308b\u3002\u8907\u6570\u6307\u5b9a\u53ef\u3002 \u2002\u2002\u2002\u2002/properties object - \u25cb \u30c7\u30fc\u30bf\u30ab\u30bf\u30ed\u30b0\u9805\u76ee\u306e\u30de\u30c3\u30d7\u3002\u8868\u793a\u3084\u5165\u529b\u3059\u308b\u969b\u306e\u9805\u76ee\u306e\u9806\u5e8f\u306f\u3001\u3053\u306e\u30b9\u30ad\u30fc\u30de\u3067\u306e\u8a18\u8ff0\u9806\u306b\u5f93\u3046\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/{\u6700\u521d\u306e\u30ad\u30fc\u306e\u540d\u524d} object - \u25cb \u6700\u521d\u306e\u9805\u76ee\u306e\u30ad\u30fc\u540d\u3002\u30ad\u30fc\u306e\u540d\u524d\u306f\u30d5\u30a1\u30a4\u30eb\u5168\u4f53\u3067\u30e6\u30cb\u30fc\u30af\u3067\u3042\u308b\u3053\u3068\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/type string - \u25cb \u9805\u76ee\u306e\u5024\u306e\u30c7\u30fc\u30bf\u578b\u3002\"boolean\", \"integer\", \"number\", \"string\"\u306e\u3044\u305a\u308c\u304b1\u3064\u3092\u6307\u5b9a\u3059\u308b\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/description string - - \u9805\u76ee\u306e\u8aac\u660e\u3002\u753b\u9762\u306b\u306f\u8868\u793a\u3057\u306a\u3044\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/examples array - - \u5024\u306e\u4f8b\u3002\u753b\u9762\u306b\u306f\u8868\u793a\u3057\u306a\u3044\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/default \u4efb\u610f - - \u521d\u671f\u5024\u3092\u6307\u5b9a\u3059\u308b\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/{\u6700\u521d\u306e\u30b9\u30ad\u30fc\u30de\u30ad\u30fc\u30ef\u30fc\u30c9} \u30ad\u30fc\u30ef\u30fc\u30c9\u306b\u4f9d\u5b58 - - \u9805\u76ee\u306e\u5024\u306b\u95a2\u3059\u308b\u5236\u7d04\u3092\u6307\u5b9a\u3059\u308b\u30ad\u30fc\u30ef\u30fc\u30c9\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/{2\u756a\u76ee\u306e\u30b9\u30ad\u30fc\u30de\u30ad\u30fc\u30ef\u30fc\u30c9} \u30ad\u30fc\u30ef\u30fc\u30c9\u306b\u4f9d\u5b58 - - \u540c\u4e0a \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2026       - - - \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/label object - \u25cb \u753b\u9762\u306b\u8868\u793a\u3059\u308b\u9805\u76ee\u306e\u30e9\u30d9\u30eb\u3002\u8a00\u8a9e\u5225\u306b\u6307\u5b9a\u3059\u308b\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/ja string - \u25cb \u65e5\u672c\u8a9e\u8868\u793a\u6642\u306e\u30e9\u30d9\u30eb\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/en string - \u25cb \u82f1\u8a9e\u8868\u793a\u6642\u306e\u30e9\u30d9\u30eb\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/options object - - \u9805\u76ee\u306b\u95a2\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u6307\u5b9a\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/widget string - - \u753b\u9762\u90e8\u54c1\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u5834\u5408\u306b\u4f7f\u3046\u3002\"textarea\"\u306e\u307f\u6307\u5b9a\u53ef\u3002\u901a\u5e38\u306ftype\u306e\u5024\u306b\u5fdc\u3058\u305f\u753b\u9762\u90e8\u54c1\u304c\u751f\u6210\u3055\u308c\u308b\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/rows integer - - \u753b\u9762\u90e8\u54c1\u304ctextarea\u306e\u5834\u5408\u306e\u884c\u6570\u3092\u6307\u5b9a\u3059\u308b\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/unit string - - \u753b\u9762\u306b\u8868\u793a\u3059\u308b\u5358\u4f4d\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/placeholder object - - \u753b\u9762\u90e8\u54c1\u306b\u8a2d\u5b9a\u3059\u308b\u30d7\u30ec\u30a4\u30b9\u30db\u30eb\u30c0\u3002\u8a00\u8a9e\u5225\u306b\u6307\u5b9a\u3059\u308b\u3002\u7701\u7565\u53ef\u80fd\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/ja string - - \u65e5\u672c\u8a9e\u8868\u793a\u6642\u306e\u30d7\u30ec\u30a4\u30b9\u30db\u30eb\u30c0\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002/en string - - \u82f1\u8a9e\u8868\u793a\u6642\u306e\u30d7\u30ec\u30a4\u30b9\u30db\u30eb\u30c0\u3002 \u2002\u2002\u2002\u2002\u2002\u2002/{2\u756a\u76ee\u306e\u30ad\u30fc\u306e\u540d\u524d} object - \u25cb 2\u756a\u76ee\u306e\u9805\u76ee\u306e\u30ad\u30fc\u540d\u3002 \u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002(\u4ee5\u4e0b\u7e70\u308a\u8fd4\u3057)- - -"},{"location":"usage/metadata_definition_file/#catalogschemajson_3","title":"catalog.schema.json\u3067\u5229\u7528\u53ef\u80fd\u306a\u30b9\u30ad\u30fc\u30de\u30ad\u30fc\u30ef\u30fc\u30c9\u4e00\u89a7","text":"<p>\u9805\u76ee\u306e\u5024\u306b\u95a2\u3059\u308b\u5236\u7d04\u3068\u3057\u3066\u6307\u5b9a\u53ef\u80fd\u306a\u30b9\u30ad\u30fc\u30de\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4e0b\u8868\u306b\u793a\u3059\u3002</p> type \u30ad\u30fc\u30ef\u30fc\u30c9 \u5024\u306e\u578b \u8aac\u660e \u5024\u306e\u5236\u7d04 \u3059\u3079\u3066 type string \u5024\u306e\u578b\u3092\u6307\u5b9a\u3059\u308b\u3002\u53d6\u308a\u5f97\u308b\u5024\u306f\"boolean\", \"integer\", \"number\", \"string\"\u306e\u3044\u305a\u308c\u304b\u3002 \u6307\u5b9a\u3067\u304d\u308b\u578b\u306f1\u3064\u306e\u307f const type\u306b\u4f9d\u5b58 \u5b9a\u6570\u3092\u6307\u5b9a\u3059\u308b\u3002\u3053\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u5165\u529b\u30fb\u7de8\u96c6\u4e0d\u53ef\u3002 enum array \u53d6\u308a\u5f97\u308b\u5024\u3092\u6307\u5b9a\u3059\u308b\u3002 number\u307e\u305f\u306f integer maximum number \u6570\u5024\u304c\u6307\u5b9a\u3055\u308c\u305f\u5024\u4ee5\u4e0b\u3067\u3042\u308b\u3053\u3068\u3092\u5ba3\u8a00\u3059\u308b\u3002 exclusiveMaximum number \u6570\u5024\u304c\u6307\u5b9a\u3055\u308c\u305f\u5024\u672a\u6e80\u3067\u3042\u308b\u3053\u3068\u3092\u5ba3\u8a00\u3059\u308b\u3002 minimum number \u6570\u5024\u304c\u6307\u5b9a\u3055\u308c\u305f\u5024\u4ee5\u4e0a\u3067\u3042\u308b\u3053\u3068\u3092\u5ba3\u8a00\u3059\u308b\u3002 exclusiveMinimum number \u6570\u5024\u304c\u6307\u5b9a\u3055\u308c\u305f\u5024\u3088\u308a\u5927\u304d\u3044\u3053\u3068\u3092\u5ba3\u8a00\u3059\u308b\u3002 string maxLength integer \u6587\u5b57\u5217\u306e\u9577\u3055\u306e\u6700\u5927\u5024\u3092\u6307\u5b9a\u3059\u308b\u3002 \u5024\u306f2,147,483,647\u4ee5\u4e0b\u3067\u3042\u308b\u3053\u3068\u3002 minLength integer \u6587\u5b57\u5217\u306e\u9577\u3055\u306e\u6700\u5c0f\u5024\u3092\u6307\u5b9a\u3059\u308b\u30020\u4ee5\u4e0a\u3002 pattern string \u6b63\u898f\u8868\u73fe\u3067\u6307\u5b9a\u3057\u305f\u30d1\u30bf\u30fc\u30f3\u3092\u6301\u3064\u3053\u3068\u3092\u5ba3\u8a00\u3059\u308b\u3002 \u958b\u767a\u8a00\u8a9e\u306b\u4f9d\u5b58\u3057\u306a\u3044\u30d1\u30bf\u30fc\u30f3\u306b\u9650\u5b9a format string \u6587\u5b57\u5217\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6307\u5b9a\u3002\u6307\u5b9a\u53ef\u80fd\u306a\u5024\u306f<code>\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u4e00\u89a7</code>\u3092\u53c2\u7167\u306e\u3053\u3068\u3002"},{"location":"usage/metadata_definition_file/#catalogschemajson_4","title":"catalog.schema.json\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066","text":"<p>\u9805\u76ee\u306b\u95a2\u3059\u308b\u5404\u7a2e\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306foptions\u30ad\u30fc\u30ef\u30fc\u30c9\u306b\u3088\u3063\u3066\u6307\u5b9a\u3067\u304d\u308b\u3002\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u6307\u5b9a\u53ef\u80fd\u306a\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4e0b\u8868\u306b\u793a\u3059\u3002</p> \u30ad\u30fc\u30ef\u30fc\u30c9 \u5024\u306e\u578b \u8aac\u660e format string \u751f\u6210\u3059\u308b\u753b\u9762\u90e8\u54c1\u306e\u7a2e\u985e\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u3002\u53d6\u308a\u5f97\u308b\u5024\u306f\u201dtextarea\u201d\u306e\u307f\u3068\u3059\u308b\u3002 widget string \u751f\u6210\u3059\u308b\u753b\u9762\u90e8\u54c1\u306e\u7a2e\u985e\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u3002\u53d6\u308a\u5f97\u308b\u5024\u306f\u201dtextarea\u201d\u306e\u307f\u3068\u3059\u308b\u3002 rows integer widget\u306e\u5024\u304c\u201dtextarea\u201d\u306e\u5834\u5408\u306erows\u5c5e\u6027\u306e\u5024\u3092\u6307\u5b9a\u3059\u308b\u3002 unit string \u5358\u4f4d\u306e\u8868\u793a\u5185\u5bb9\u3092\u6307\u5b9a\u3059\u308b\u3002 placeholder object \u753b\u9762\u90e8\u54c1\u306b\u8a2d\u5b9a\u3059\u308b\u30d7\u30ec\u30a4\u30b9\u30db\u30eb\u30c0\u3002\u65e5\u672c\u8a9e\u3068\u82f1\u8a9e\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002"},{"location":"usage/quickstart/","title":"\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8","text":"<p>RDE\u69cb\u9020\u5316\u30d7\u30ed\u30b0\u30e9\u30e0\u69cb\u7bc9\u306e\u4e00\u4f8b\u3067\u3059\u3002</p>"},{"location":"usage/quickstart/#_2","title":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b","text":"<p>\u307e\u305a\u3001RDE\u69cb\u9020\u5316\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u6e96\u5099\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u30bf\u30fc\u30df\u30ca\u30eb\u3084\u30b7\u30a7\u30eb\u4e0a\u3067\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> Unix/macOSWindows <pre><code>python3 -m rdetoolkit init\n</code></pre> <pre><code>py -m rdetoolkit init\n</code></pre> <p>\u30b3\u30de\u30f3\u30c9\u304c\u6b63\u3057\u304f\u52d5\u4f5c\u3059\u308b\u3068\u3001\u4e0b\u8a18\u3067\u793a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u30fb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002</p> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001<code>container</code>\u3068\u3044\u3046\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3066\u3001\u958b\u767a\u3092\u9032\u3081\u307e\u3059\u3002</p> <ul> <li>requirements.txt<ul> <li>\u69cb\u9020\u5316\u30d7\u30ed\u30b0\u30e9\u30e0\u69cb\u7bc9\u3067\u4f7f\u7528\u3057\u305f\u3044Python\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5fc5\u8981\u306b\u5fdc\u3058\u3066<code>pip install</code>\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> </ul> </li> <li>modules<ul> <li>\u69cb\u9020\u5316\u51e6\u7406\u3067\u4f7f\u7528\u3057\u305f\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u683c\u7d0d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5225\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u8aac\u660e\u3057\u307e\u3059\u3002</li> </ul> </li> <li>main.py<ul> <li>\u69cb\u9020\u5316\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8d77\u52d5\u51e6\u7406\u3092\u5b9a\u7fa9</li> </ul> </li> <li>data/inputdata<ul> <li>\u69cb\u9020\u5316\u51e6\u7406\u5bfe\u8c61\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3092\u914d\u7f6e\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> </ul> </li> <li>data/invoice<ul> <li>\u30ed\u30fc\u30ab\u30eb\u5b9f\u884c\u3055\u305b\u308b\u305f\u3081\u306b\u306f\u7a7a\u30d5\u30a1\u30a4\u30eb\u3067\u3082\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002</li> </ul> </li> <li>data/tasksupport<ul> <li>\u69cb\u9020\u5316\u51e6\u7406\u306e\u88dc\u52a9\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u7fa4\u3092\u914d\u7f6e\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> </ul> </li> </ul> <pre><code>container\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 inputdata\n\u2502   \u251c\u2500\u2500 invoice\n\u2502   \u2502   \u2514\u2500\u2500 invoice.json\n\u2502   \u2514\u2500\u2500 tasksupport\n\u2502       \u251c\u2500\u2500 invoice.schema.json\n\u2502       \u2514\u2500\u2500 metadata-def.json\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 modules\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"usage/quickstart/#_3","title":"\u69cb\u9020\u5316\u51e6\u7406\u306e\u5b9f\u88c5","text":"<p>RDE\u69cb\u9020\u5316\u51e6\u7406\u306f\u3001\u5927\u304d\u304f\u5206\u3051\u3066\u3001\u4ee5\u4e0b\u306e3\u3064\u306e\u30d5\u30a7\u30fc\u30ba\u306b\u5206\u3051\u3089\u308c\u307e\u3059\u3002</p> <pre><code>graph LR\n    \u8d77\u52d5\u51e6\u7406 --&gt; \u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406\n    \u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406 --&gt; \u7d42\u4e86\u51e6\u7406\n</code></pre> <p>\u8d77\u52d5\u51e6\u7406\u3001\u7d42\u4e86\u51e6\u7406\u306f\u3001rdetoolkit\u3092\u4f7f\u3046\u3053\u3068\u3067\u7c21\u5358\u306b\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u30e6\u30fc\u30b6\u30fc\u81ea\u8eab\u306f\u3001\u3054\u81ea\u8eab\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b \u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406 \u3092\u5b9a\u7fa9\u3059\u308b\u3060\u3051\u3067\u3059\u3002</p> <p>Documents</p> <p>\u30ab\u30b9\u30bf\u30e0\u7528\u69cb\u9020\u5316\u51e6\u7406\u95a2\u6570\u306e\u4f5c\u6210</p>"},{"location":"usage/quickstart/#_4","title":"\u30ab\u30b9\u30bf\u30e0\u7528\u69cb\u9020\u5316\u51e6\u7406\u95a2\u6570\u306e\u4f5c\u6210","text":"<p>rdetoolkit\u3067\u306f\u3001\u72ec\u81ea\u306e\u51e6\u7406\u3092RDE\u306e\u69cb\u9020\u5316\u51e6\u7406\u306e\u30d5\u30ed\u30fc\u306b\u7d44\u307f\u8fbc\u307f\u8fbc\u3080\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u72ec\u81ea\u306e\u69cb\u9020\u5316\u51e6\u7406\u306f\u3001\u5165\u529b\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u30c7\u30fc\u30bf\u52a0\u5de5\u30fb\u30b0\u30e9\u30d5\u5316\u30fb\u6a5f\u68b0\u5b66\u7fd2\u7528\u306ecsv\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\u306a\u3069\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u56fa\u6709\u306e\u51e6\u7406\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u3001RDE\u3078\u67d4\u8edf\u306b\u30c7\u30fc\u30bf\u3092\u767b\u9332\u53ef\u80fd\u3067\u3059\u3002</p> <p>\u4eee\u306b\u3001rdetoolkit\u3078\u6e21\u3059\u72ec\u81ea\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u95a2\u6570\u3092\u3001<code>dataset()</code>\u3068\u3057\u307e\u3059\u3002<code>dataset()</code>\u306f\u3001\u4ee5\u4e0b\u306e2\u3064\u306e\u5f15\u6570\u3092\u6e21\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <ul> <li>srcpaths (RdeInputDirPaths): \u51e6\u7406\u306e\u305f\u3081\u306e\u5165\u529b\u30ea\u30bd\u30fc\u30b9\u3078\u306e\u30d1\u30b9</li> <li>resource_paths (RdeOutputResourcePath): \u51e6\u7406\u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u305f\u3081\u306e\u51fa\u529b\u30ea\u30bd\u30fc\u30b9\u3078\u306e\u30d1\u30b9</li> </ul> <pre><code>def dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    ...\n</code></pre> <p>Reference</p> <ul> <li>API Documentation: RdeInputDirPaths - rde2types</li> <li>API Documentation: RdeOutputResourcePath - rde2types</li> </ul> <p>\u4eca\u56de\u306e\u4f8b\u3067\u306f\u3001<code>modules</code>\u4ee5\u4e0b\u306b\u3001<code>display_messsage()</code>, <code>custom_graph()</code>, <code>custom_extract_metadata()</code>\u3068\u3044\u3046\u30c0\u30df\u30fc\u51e6\u7406\u3092\u5b9a\u7fa9\u3057\u3001\u72ec\u81ea\u306e\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306f\u3001<code>modules/modules.py</code>\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e2\u3064\u306e\u5f15\u6570\u3092\u6e21\u3059\u95a2\u6570\u3067\u306a\u3051\u308c\u3070\u3001rdetoolkit\u306f\u6b63\u3057\u304f\u51e6\u7406\u304c\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\u3002</p> <pre><code># modules/modules.py\ndef display_messsage(path):\n    print(f\"Test Message!: {path}\")\n\ndef custom_graph():\n    print(\"graph\")\n\ndef custom_extract_metadata():\n    print(\"extract metadata\")\n\ndef dataset(srcpaths, resource_paths):\n    display_messsage(srcpaths)\n    display_messsage(resource_paths)\n    custom_graph()\n    custom_extract_metadata()\n</code></pre> <p>\u4e0a\u8a18\u306e<code>dataset()</code>\u3092\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u8d77\u52d5\u51e6\u7406\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002</p>"},{"location":"usage/quickstart/#_5","title":"\u8d77\u52d5\u51e6\u7406\u306b\u3064\u3044\u3066","text":"<p>\u7d9a\u3044\u3066\u3001<code>rdetoolkit.workflow.run()</code>\u3092\u4f7f\u3063\u3066\u3001\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u8d77\u52d5\u51e6\u7406\u3067\u4e3b\u306b\u5b9f\u884c\u51e6\u7406\u306f\u3001</p> <ul> <li>\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30c1\u30a7\u30c3\u30af</li> <li>\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u3068RDE\u69cb\u9020\u5316\u3067\u898f\u5b9a\u3059\u308b\u5404\u7a2e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u3092\u53d6\u5f97\u3059\u308b</li> <li>\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u3067\u5b9a\u7fa9\u3057\u305f\u5177\u4f53\u7684\u306a\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c(\u4e0a\u8a18\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u5b9a\u7fa9\u3057\u305f<code>dataset()</code>\u306a\u3069)</li> <li>\u5404\u7a2e\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3</li> </ul> <p>Reference</p> <ul> <li>API Documentation: run - workflows</li> </ul> <p>\u4eca\u56de\u306e\u4f8b\u3067\u306f\u3001<code>main.py</code>\u3092\u4f5c\u6210\u3057\u3001<code>modules/modules.py</code>\u3067\u5b9a\u7fa9\u3057\u305f<code>dataset()</code>\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</p> <pre><code>import rdetoolkit\nfrom modules.modules import dataset #\u72ec\u81ea\u3067\u5b9a\u7fa9\u3057\u305f\u69cb\u9020\u5316\u51e6\u7406\u95a2\u6570\n\n#\u72ec\u81ea\u3067\u5b9a\u7fa9\u3057\u305f\u69cb\u9020\u5316\u51e6\u7406\u95a2\u6570\u3092\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\nrdetoolkit.workflows.run(custom_dataset_function=dataset)\n</code></pre> <p>\u3082\u3057\u3001\u72ec\u81ea\u306e\u69cb\u9020\u5316\u51e6\u7406\u3092\u6e21\u3055\u306a\u3044\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>import rdetoolkit\n\nrdetoolkit.workflows.run()\n</code></pre>"},{"location":"usage/quickstart/#_6","title":"\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u69cb\u9020\u5316\u51e6\u7406\u3092\u52d5\u4f5c\u3055\u305b\u308b","text":"<p>\u4e0a\u8a18\u306e\u624b\u9806\u3067\u5b9a\u7fa9\u3057\u305f<code>main.py</code>\u3092\u3001\u5404\u81ea\u306e\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u3001\u30c7\u30d0\u30c3\u30b0\u3084\u30c6\u30b9\u30c8\u7684\u306bRDE\u306e\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3057\u305f\u3044\u5834\u5408\u3001<code>data</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3001<code>tasksupport</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u5fc5\u8981\u306a\u5165\u529b\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3001\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u5b9f\u884c\u53ef\u80fd\u3067\u3059\u3002\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001main.py\u3068\u540c\u3058\u968e\u5c64\u306bdata\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u914d\u7f6e\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u52d5\u4f5c\u3057\u307e\u3059\u3002</p> <pre><code>container/\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 modules/\n\u2502   \u2514\u2500\u2500 modules.py\n\u2514\u2500\u2500 data/\n    \u251c\u2500\u2500 inputdata/\n    \u2502   \u2514\u2500\u2500 &lt;\u51e6\u7406\u3057\u305f\u3044\u5b9f\u9a13\u30c7\u30fc\u30bf&gt;\n    \u251c\u2500\u2500 invoice/\n    \u2502   \u2514\u2500\u2500 invoice.json\n    \u2514\u2500\u2500 tasksupport/\n        \u251c\u2500\u2500 metadata-def.json\n        \u2514\u2500\u2500 invoice.schema.json\n</code></pre> <p>\u4e0a\u8a18\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306f\u3001\u3042\u304f\u307e\u3067\u4e00\u4f8b\u3067\u3059\u3002data/inputdata\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3001tasksupport\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u3001\u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u9069\u5b9c\u8ffd\u52a0/\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>cd container\npython3 main.py\n</code></pre>"},{"location":"usage/quickstart/#_7","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<ul> <li>\u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308b</li> <li>RDEToolKit\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3068\u5236\u5fa1\u3067\u304d\u308b\u6a5f\u80fd\u3092\u77e5\u308b</li> <li>RDE\u306e\u30c7\u30fc\u30bf\u767b\u9332\u30e2\u30fc\u30c9\u3092\u6307\u5b9a\u3059\u308b</li> <li>\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u77e5\u308b</li> </ul>"},{"location":"usage/validation/","title":"\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd","text":"<p>RDEToolKit\u306b\u306f\u3001\u7279\u5b9a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3059\u308b\u6a5f\u80fd\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u958b\u767a\u3059\u308b\u5834\u5408\u3001<code>invoice.json</code>\u3084<code>invocie.schema.json</code>\u306a\u3069\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u3001\u4e8b\u524d\u306b\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u958b\u767a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u6b63\u3057\u304fRDE\u306b\u767b\u9332\u3055\u308c\u308b\u305f\u3081\u306b\u3001\u4e8b\u524d\u306b\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002</p>"},{"location":"usage/validation/#_2","title":"\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u5bfe\u8c61\u30d5\u30a1\u30a4\u30eb","text":"<p>RDEToolKit\u3067\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u5bfe\u8c61\u3068\u306a\u308b\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u4ee5\u4e0b\u306e4\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u7406\u7531\u306f\u3001\u69cb\u9020\u5316\u51e6\u7406\u5185\u3067\u4e0b\u8a18\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u3092\u5909\u66f4\u3067\u304d\u3066\u3057\u307e\u3046\u305f\u3081\u3067\u3059\u3002\u69cb\u9020\u5316\u51e6\u7406\u69cb\u7bc9\u306e\u969b\u3001\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u4e0b\u8a18\u306e\u60c5\u5831\u3092\u53c2\u8003\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <ul> <li>invoice.schema.json</li> <li>invoice.json</li> <li>metadata-def.json</li> <li>metadata.json</li> </ul> <p>Documents</p> <ul> <li>\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u3064\u3044\u3066</li> </ul>"},{"location":"usage/validation/#invoiceschemajson","title":"invoice.schema.json\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3","text":"<p><code>invoice.schema.json</code>\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002invoie.schema.json\u306f\u3001RDE\u306e\u753b\u9762\u3092\u69cb\u6210\u3059\u308b\u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u304c\u3001\u69cb\u9020\u5316\u51e6\u7406\u4e2d\u3067\u5909\u66f4\u3001\u30ed\u30fc\u30ab\u30eb\u3067\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\u70b9\u304b\u3089\u3001\u5fc5\u8981\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e\u30c1\u30a7\u30c3\u30af\u6a5f\u80fd\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd\u306f\u3001<code>rdetoolkit.workflows.run()</code>\u306b\u7d44\u307f\u8fbc\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p> <p><code>invoice.schema.json</code>\u306e\u5404\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30c1\u30a7\u30c3\u30af\u306f\u3001<code>rdetoolkit.validation.InvoiceValidator</code>\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002</p> <pre><code>import json\nfrom pydantic import ValidationError\n\nfrom rdetoolkit.validation import InvoiceValidator\nfrom rdetoolkit.exceptions import InvoiceSchemaValidationError\n\nschema = {\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"$id\": \"https://rde.nims.go.jp/rde/dataset-templates/dataset_template_custom_sample/invoice.schema.json\",\n    \"description\": \"RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30b5\u30f3\u30d7\u30eb\u56fa\u6709\u60c5\u5831invoice\",\n    \"type\": \"object\",\n    \"required\": [\"custom\", \"sample\"],\n    \"properties\": {\n        \"custom\": {\n            \"type\": \"object\",\n            \"label\": {\"ja\": \"\u56fa\u6709\u60c5\u5831\", \"en\": \"Custom Information\"},\n            \"required\": [\"sample1\"],\n            \"properties\": {\n                \"sample1\": {\"label\": {\"ja\": \"\u30b5\u30f3\u30d7\u30eb\uff11\", \"en\": \"sample1\"}, \"type\": \"string\", \"format\": \"date\", \"options\": {\"unit\": \"A\"}},\n                \"sample2\": {\"label\": {\"ja\": \"\u30b5\u30f3\u30d7\u30eb\uff12\", \"en\": \"sample2\"}, \"type\": \"number\", \"options\": {\"unit\": \"b\"}},\n            },\n        },\n        \"sample\": {\n            \"type\": \"object\",\n            \"label\": {\"ja\": \"\u8a66\u6599\u60c5\u5831\", \"en\": \"Sample Information\"},\n            \"properties\": {\n                \"generalAttributes\": {\n                    \"type\": \"array\",\n                    \"items\": [\n                        {\"type\": \"object\", \"required\": [\"termId\"], \"properties\": {\"termId\": {\"const\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\"}}}\n                    ],\n                },\n                \"specificAttributes\": {\"type\": \"array\", \"items\": []},\n            },\n        },\n    },\n}\n\ndata = {\n    \"datasetId\": \"1s1199df4-0d1v-41b0-1dea-23bf4dh09g12\",\n    \"basic\": {\n        \"dateSubmitted\": \"\",\n        \"dataOwnerId\": \"0c233ef274f28e611de4074638b4dc43e737ab993132343532343430\",\n        \"dataName\": \"test-dataset\",\n        \"instrumentId\": None,\n        \"experimentId\": None,\n        \"description\": None,\n    },\n    \"custom\": {\"sample1\": \"2023-01-01\", \"sample2\": 1.0},\n    \"sample\": {\n        \"sampleId\": \"\",\n        \"names\": [\"test\"],\n        \"composition\": None,\n        \"referenceUrl\": None,\n        \"description\": None,\n        \"generalAttributes\": [{\"termId\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\", \"value\": None}],\n        \"specificAttributes\": [],\n        \"ownerId\": \"de17c7b3f0ff5126831c2d519f481055ba466ddb6238666132316439\",\n    },\n}\n\nwith open(\"temp/invoice.schema.json\", \"w\") as f:\n    json.dump(schema, f, ensure_ascii=False, indent=2)\n\nvalidator = InvoiceValidator(\"temp/invoice.schema.json\")\ntry:\n    validator.validate(obj=data)\nexcept ValidationError as validation_error:\n    raise InvoiceSchemaValidationError from validation_error\n</code></pre>"},{"location":"usage/validation/#invoiceschemajson_1","title":"invoice.schema.json\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc","text":"<p><code>invoice.schema.json</code>\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001<code>pydantic_core._pydantic_core.ValidationError</code>\u304c\u767a\u751f\u3057\u307e\u3059\u3002</p> <p>Reference</p> <ul> <li>pydantic_core._pydantic_core.ValidationError - Pydantic</li> </ul> <p>invoice.schema.json\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\u306f\u3001<code>invoice.schema.json</code>\u306e\u5c5e\u6027\u304c\u4e0d\u6b63\u3001\u6b20\u640d\u304c\u751f\u3058\u305f\u5834\u5408\u306b\u767a\u751f\u3057\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u518d\u5ea6\u5b9a\u7fa9\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002<code>invoice.schema.json</code>\u306e\u5b9a\u7fa9\u306b\u3064\u3044\u3066\u306f\u3001invoice.schema.json\u306b\u3064\u3044\u3066 - \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p> <p>\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3001\u4ee5\u4e0b\u306e\u60c5\u5831\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p> <ul> <li>\u30a8\u30e9\u30fc\u539f\u56e0\u3068\u306a\u3063\u305f\u30d5\u30a3\u30fc\u30eb\u30c9</li> <li>\u30a8\u30e9\u30fc\u30bf\u30a4\u30d7</li> <li>\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8</li> </ul> <pre><code>1. Field: required.0\n   Type: literal_error\n   Context: Input should be 'custom' or 'sample'\n</code></pre> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001<code>Input should be 'custom' or 'sample'</code>\u3068\u66f8\u304b\u308c\u3066\u3044\u308b\u901a\u308a\u3001<code>required</code>\u306b\u3001<code>custom</code>\u304b<code>sample</code>\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <pre><code>schema = {\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"$id\": \"https://rde.nims.go.jp/rde/dataset-templates/dataset_template_custom_sample/invoice.schema.json\",\n    \"description\": \"RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30b5\u30f3\u30d7\u30eb\u56fa\u6709\u60c5\u5831invoice\",\n    \"type\": \"object\",\n    \"required\": [\"custom\"], # sample\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306b\u3082\u304b\u304b\u308f\u3089\u305a\"required\"\u306b\u542b\u307e\u308c\u3066\u3044\u306a\u3044\n    \"properties\": {\n        \"custom\": {\n            ...\n            },\n        \"sample\": {\n            ...\n        }\n    },\n}\n</code></pre> <p>Tip</p> <p>\u8a73\u3057\u3044\u4fee\u6b63\u65b9\u6cd5\u306f\u3001invoice.schema.json - \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u3064\u3044\u3066 \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"usage/validation/#invoicejson","title":"invoice.json\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3","text":"<p>invoice.schema.json\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306f\u3001\u5fc5\u8981\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002invoice.json\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u306f\u3001<code>invoice.schema.json</code>\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002</p> <pre><code>import json\nfrom pydantic import ValidationError\n\nfrom rdetoolkit.validation import InvoiceValidator\nfrom rdetoolkit.exceptions import InvoiceSchemaValidationError\n\nschema = {\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"$id\": \"https://rde.nims.go.jp/rde/dataset-templates/dataset_template_custom_sample/invoice.schema.json\",\n    \"description\": \"RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30b5\u30f3\u30d7\u30eb\u56fa\u6709\u60c5\u5831invoice\",\n    \"type\": \"object\",\n    \"required\": [\"custom\", \"sample\"],\n    \"properties\": {\n        \"custom\": {\n            \"type\": \"object\",\n            \"label\": {\"ja\": \"\u56fa\u6709\u60c5\u5831\", \"en\": \"Custom Information\"},\n            \"required\": [\"sample1\"],\n            \"properties\": {\n                \"sample1\": {\"label\": {\"ja\": \"\u30b5\u30f3\u30d7\u30eb\uff11\", \"en\": \"sample1\"}, \"type\": \"string\", \"format\": \"date\", \"options\": {\"unit\": \"A\"}},\n                \"sample2\": {\"label\": {\"ja\": \"\u30b5\u30f3\u30d7\u30eb\uff12\", \"en\": \"sample2\"}, \"type\": \"number\", \"options\": {\"unit\": \"b\"}},\n            },\n        },\n        \"sample\": {\n            \"type\": \"object\",\n            \"label\": {\"ja\": \"\u8a66\u6599\u60c5\u5831\", \"en\": \"Sample Information\"},\n            \"properties\": {\n                \"generalAttributes\": {\n                    \"type\": \"array\",\n                    \"items\": [\n                        {\"type\": \"object\", \"required\": [\"termId\"], \"properties\": {\"termId\": {\"const\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\"}}}\n                    ],\n                },\n                \"specificAttributes\": {\"type\": \"array\", \"items\": []},\n            },\n        },\n    },\n}\n\ndata = {\n    \"datasetId\": \"1s1199df4-0d1v-41b0-1dea-23bf4dh09g12\",\n    \"basic\": {\n        \"dateSubmitted\": \"\",\n        \"dataOwnerId\": \"0c233ef274f28e611de4074638b4dc43e737ab993132343532343430\",\n        \"dataName\": \"test-dataset\",\n        \"instrumentId\": None,\n        \"experimentId\": None,\n        \"description\": None,\n    },\n    \"custom\": {\"sample1\": \"2023-01-01\", \"sample2\": 1.0},\n    \"sample\": {\n        \"sampleId\": \"\",\n        \"names\": [\"test\"],\n        \"composition\": None,\n        \"referenceUrl\": None,\n        \"description\": None,\n        \"generalAttributes\": [{\"termId\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\", \"value\": None}],\n        \"specificAttributes\": [],\n        \"ownerId\": \"de17c7b3f0ff5126831c2d519f481055ba466ddb6238666132316439\",\n    },\n}\n\nwith open(\"temp/invoice.schema.json\", \"w\") as f:\n    json.dump(schema, f, ensure_ascii=False, indent=2)\n\nvalidator = InvoiceValidator(\"temp/invoice.schema.json\")\ntry:\n    validator.validate(obj=data)\nexcept ValidationError as validation_error:\n    print(validation_error)\n</code></pre>"},{"location":"usage/validation/#_3","title":"\u8a66\u6599\u60c5\u5831\u306e\u5b9a\u7fa9\u3068\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066","text":"<p>\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u69cb\u9020\u5316\u51e6\u7406\u3092\u958b\u767a\u3059\u308b\u5834\u5408\u3001invoice.json(\u9001\u308a\u72b6)\u3092\u4e8b\u524d\u306b\u7528\u610f\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u9001\u308a\u72b6\u306b\u8a66\u6599\u60c5\u5831\u3092\u5b9a\u7fa9\u3059\u308b\u5834\u5408\u3001\u4ee5\u4e0b\u306e2\u3064\u306e\u5b9a\u7fa9\u304c\u60f3\u5b9a\u3055\u308c\u307e\u3059\u3002</p> <ol> <li>\u8a66\u6599\u60c5\u5831\u3092\u65b0\u898f\u306b\u8ffd\u52a0\u3059\u308b\u5834\u5408</li> <li>\u65e2\u5b58\u306e\u8a66\u6599\u60c5\u5831\u3092\u53c2\u7167\u3059\u308b\u5834\u5408</li> </ol> <p>\u4e0a\u8a18\u306e2\u3064\u306e\u30b1\u30fc\u30b9\u3067\u306f\u5fc5\u9808\u9805\u76ee\u304c\u7570\u306a\u308b\u305f\u3081\u3001\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u4f5c\u6210\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u3063\u3066\u30c7\u30d0\u30c3\u30b0\u3059\u308b\u969b\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\u4e0a\u8a18\u306e\u3069\u3061\u3089\u304b\u306e\u5fc5\u9808\u9805\u76ee\u3092\u6e80\u305f\u305b\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002</p>"},{"location":"usage/validation/#_4","title":"\u8a66\u6599\u60c5\u5831\u3092\u65b0\u898f\u306b\u8ffd\u52a0\u3059\u308b\u5834\u5408","text":"<p>\u3053\u306e\u5834\u5408\u3001<code>sample</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306e<code>sampleId</code>\u3001<code>names</code>\u3001<code>ownerId</code>\u304c\u5fc5\u9808\u306b\u306a\u308a\u307e\u3059\u3002</p> <pre><code>\"sample\": {\n        \"sampleId\": \"de1132316439\",\n        \"names\": [\"test\"],\n        \"composition\": null,\n        \"referenceUrl\": null,\n        \"description\": null,\n        \"generalAttributes\": [{\"termId\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\", \"value\": null}],\n        \"specificAttributes\": [],\n        \"ownerId\": \"de17c7b3f0ff5126831c2d519f481055ba466ddb6238666132316439\",\n    },\n</code></pre>"},{"location":"usage/validation/#_5","title":"\u65e2\u5b58\u306e\u8a66\u6599\u60c5\u5831\u3092\u53c2\u7167\u3059\u308b\u5834\u5408","text":"<p>\u3053\u306e\u5834\u5408\u3001<code>sample</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306e<code>sampleId</code>\u304c\u5fc5\u9808\u306b\u306a\u308a\u307e\u3059\u3002</p> <pre><code>\"sample\": {\n        \"sampleId\": \"de1132316439\",\n        \"names\": [],\n        \"composition\": null,\n        \"referenceUrl\": null,\n        \"description\": null,\n        \"generalAttributes\": [{\"termId\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\", \"value\": null}],\n        \"specificAttributes\": [],\n        \"ownerId\": \"de17c7b3f0ff5126831c2d519f481055ba466ddb6238666132316439\",\n    },\n</code></pre>"},{"location":"usage/validation/#_6","title":"\u8a66\u6599\u60c5\u5831\u306b\u95a2\u3059\u308b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc","text":"<p>\u4e0a\u8a18\u306e2\u3064\u306e\u30b1\u30fc\u30b9\u3069\u3061\u3089\u304b\u3092\u6e80\u305f\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u3001\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3001\u4ee5\u4e0b\u306e\u60c5\u5831\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p> <ul> <li>\u30a8\u30e9\u30fc\u539f\u56e0\u3068\u306a\u3063\u305f\u30d5\u30a3\u30fc\u30eb\u30c9</li> <li>\u30a8\u30e9\u30fc\u30bf\u30a4\u30d7</li> <li>\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8</li> </ul> <pre><code>Error: Error in validating system standard field.\nPlease correct the following fields in invoice.json\nField: sample\nType: anyOf\nContext: {'sampleId': '', 'names': 'test', 'generalAttributes': [{'termId': '3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e'}, {'termId': 'e2d20d02-2e38-2cd3-b1b3-66fdb8a11057'}, {'termId': 'efcf34e7-4308-c195-6691-6f4d28ffc9bb'}, {'termId': '7cc57dfb-8b70-4b3a-5315-fbce4cbf73d0'}, {'termId': '1e70d11d-cbdd-bfd1-9301-9612c29b4060'}, {'termId': '5e166ac4-bfcd-457a-84bc-8626abe9188f'}, {'termId': '0d0417a3-3c3b-496a-b0fb-5a26f8a74166'}, {'termId': '0d0417a3-3c3b-496a-b0fb-5a26f8a74166'}], 'specificAttributes': [], 'ownerId': ''} is not valid under any of the given schemas\n</code></pre>"},{"location":"usage/validation/#invoicejson_1","title":"\u305d\u306e\u4ed6invoice.json\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc","text":"<p><code>invoice.json</code>\u306e<code>basic</code>\u9805\u76ee\u306b\u904e\u4e0d\u8db3\u3084\u5024\u304c\u4e0d\u6b63\u306a\u5834\u5408\u3001<code>jsonschema</code>\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002</p> <pre><code>data = {\n    \"datasetId\": \"1s1199df4-0d1v-41b0-1dea-23bf4dh09g12\",\n    \"basic\": {\n        \"dateSubmitted\": \"\",\n        \"dataOwnerId\": \"0c233ef274f28e611de4074638b4dc43e737ab9931323435323434\",\n        \"dataName\": \"test-dataset\",\n        \"instrumentId\": None,\n        \"experimentId\": None,\n        \"description\": None,\n    },\n    \"custom\": {\"sample1\": \"2023-01-01\", \"sample2\": 1.0},\n}\n</code></pre> <p>\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3001\u4ee5\u4e0b\u306e\u60c5\u5831\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p> <ul> <li>\u8a72\u5f53\u30d5\u30a3\u30fc\u30eb\u30c9</li> <li>\u30a8\u30e9\u30fc\u7a2e\u5225</li> <li>\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8</li> </ul> <p>\u4ee5\u4e0b\u306e\u30b1\u30fc\u30b9\u306e\u5834\u5408\u3001\u57fa\u672c\u60c5\u5831\u3067\u3042\u308b<code>basic.dataOwnerId</code>\u304c\u6b63\u3057\u3044\u30d1\u30bf\u30fc\u30f3\u3067\u8a18\u8ff0\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u30a8\u30e9\u30fc\u5185\u5bb9\u306e\u6307\u793a\u306b\u6cbf\u3063\u3066\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>Error: Error in validating system standard item in invoice.schema.json.\nPlease correct the following fields in invoice.json\nField: basic.dataOwnerId\nType: pattern\nContext: '153cbe4798cb8c' does not match '^([0-9a-zA-Z]{56})$'\n</code></pre> <p>Tip</p> <p>\u8a73\u3057\u3044\u4fee\u6b63\u65b9\u6cd5\u306f\u3001invoice.json - \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u3064\u3044\u3066 \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"usage/validation/#metadatajson","title":"metadata.json\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3","text":"<p>\u30c7\u30fc\u30bf\u69cb\u9020\u5316\u304c\u51fa\u529b\u3059\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u540d\u524d\u3084\u30c7\u30fc\u30bf\u578b\u3092\u5ba3\u8a00\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3002\u9001\u308a\u72b6\u7b49\u306b\u5165\u529b\u3055\u308c\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u306f\u3001<code>metadata-def.json</code>\u306b\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002</p> <pre><code>import json\n\nfrom rdetoolkit.exceptions import MetadataValidationError\nfrom rdetoolkit.validation import metadata_validate\n\nmetadata = {\n    \"constant\": {\"meta1\": {\"value\": \"sample_meta\"}, \"meta2\": {\"value\": 1000, \"unit\": \"mV\"}},\n    \"variable\": [\n        {\"meta3\": {\"value\": 100, \"unit\": \"V\"}, \"meta4\": {\"value\": 200, \"unit\": \"V\"}},\n        {\"meta3\": {\"value\": 300, \"unit\": \"V\"}, \"meta4\": {\"value\": 400, \"unit\": \"V\"}},\n    ],\n}\n\nwith open(\"temp/metadata.json\", \"w\") as f:\n    json.dump(metadata, f, ensure_ascii=False, indent=2)\n\ntry:\n    metadata_validate(\"temp/metadata.json\")\nexcept ValidationError as validation_error:\n    raise MetadataValidationError from validation_error\n</code></pre>"},{"location":"usage/validation/#metadatajson_1","title":"metadata.json\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc","text":"<p><code>metadata.json</code>\u306b\u3001<code>constant</code>, <code>variable</code>\u304c\u6b63\u3057\u304f\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002</p> <pre><code>metadata = {\n    \"constant\": {\"value\": \"sample_meta\"},\n    \"variable\": [\n        {\"meta3\": {\"value\": 100, \"unit\": \"V\"}, \"meta4\": {\"value\": 200, \"unit\": \"V\"}},\n        {\"meta3\": {\"value\": 300, \"unit\": \"V\"}, \"meta4\": {\"value\": 400, \"unit\": \"V\"}},\n    ],\n}\n</code></pre> <p>\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b1\u30fc\u30b9\u3067\u306f\u3001\u5b9a\u7fa9\u3055\u308c\u305f\u578b\u304c\u60f3\u5b9a\u3068\u7570\u306a\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p> <pre><code>Error: Validation Errors in metadata.json. Please correct the following fields\n1. Field: constant.key\n   Type: model_type\n   Context: Input should be a valid dictionary or instance of MetaValue\n2. Field: variable\n   Type: list_type\n   Context: Input should be a valid list\n</code></pre> <p>Tip</p> <p>\u8a73\u3057\u3044\u4fee\u6b63\u65b9\u6cd5\u306f\u3001metadata.json - \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u3064\u3044\u3066 \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"usage/config/config/","title":"RDEToolKit\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb","text":"<p>rdetoolkit\u3067\u306f\u3001\u8d77\u52d5\u6642\u306e\u6319\u52d5\u3092\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u5236\u5fa1\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u3002</p> <p>Reference</p> <p>API Documents: rdetoolkit.config.parse_config_file</p>"},{"location":"usage/config/config/#_1","title":"\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb","text":"<p>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306f\u3001<code>tasksupport</code>\u3082\u3057\u304f\u306f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u76f4\u4e0b\u306b\u683c\u7d0d\u3055\u308c\u305f\u3001\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002</p>"},{"location":"usage/config/config/#_2","title":"\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u540d","text":"<ul> <li>rdeconfig.yaml</li> <li>rdeconfig.yaml</li> <li>rdeconfig.yml</li> <li>rdeconfig.yaml</li> <li>pyproject.toml</li> </ul>"},{"location":"usage/config/config/#_3","title":"\u8a2d\u5b9a\u53ef\u80fd\u306a\u30aa\u30d7\u30b7\u30e7\u30f3","text":""},{"location":"usage/config/config/#extendeds-mode","title":"Extendeds Mode","text":"<p>rdetoolkit\u3067\u306f\u30014\u3064\u306e\u8d77\u52d5\u30e2\u30fc\u30c9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002</p> <ul> <li>invoice\u30e2\u30fc\u30c9</li> <li>ExcelInvoice\u30e2\u30fc\u30c9</li> <li>\u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb</li> <li>RDE\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30e2\u30fc\u30c9</li> </ul> <p>Documents</p> <p>\u53c2\u8003: \u30c7\u30fc\u30bf\u767b\u9332\u30e2\u30fc\u30c9\u306b\u3064\u3044\u3066</p> <p>\u3053\u306e\u3046\u3061\u3001\u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u3068RDE\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30e2\u30fc\u30c9\u306f\u62e1\u5f35\u30e2\u30fc\u30c9(<code>extended_mode</code>)\u3067\u3042\u308b\u305f\u3081\u3001\u4e0a\u8a182\u3064\u306e\u30e2\u30fc\u30c9\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u3001<code>mode_type</code>\u306e\u6307\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002<code>mode_type</code>\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067invoice\u30e2\u30fc\u30c9\u3068\u306a\u308a\u307e\u3059\u3002</p> \u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30ebRDE\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30e2\u30fc\u30c9 <pre><code>system:\n    extended_mode: 'MultiDataTile'\n</code></pre> <pre><code>system:\n    extended_mode: 'rdeformat'\n</code></pre>"},{"location":"usage/config/config/#_4","title":"\u8d77\u52d5\u6761\u4ef6","text":"\u30e2\u30fc\u30c9\u540d \u8d77\u52d5\u6761\u4ef6 invoice\u30e2\u30fc\u30c9 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u8d77\u52d5 Excelinvoice\u30e2\u30fc\u30c9 \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306b<code>*._excel_invoice.xlsx</code>\u3092\u683c\u7d0d \u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b<code>extended_mode: 'MultiDataTile'</code>\u3092\u8ffd\u52a0 RDE\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30e2\u30fc\u30c9 \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b<code>extended_mode: 'rdeformat'</code>\u3092\u8ffd\u52a0"},{"location":"usage/config/config/#_5","title":"\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u81ea\u52d5\u4fdd\u5b58","text":"<p>\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u81ea\u52d5\u4fdd\u5b58\u3092\u6709\u52b9\u5316\u3059\u308b\u3068\u3001\u81ea\u52d5\u7684\u306b<code>raw</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3082\u3057\u304f\u306f\u3001<code>nonshared_raw</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002\u4fdd\u5b58\u5148\u306f\u3001RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u516c\u958b\u3068\u5171\u306b\u30c7\u30fc\u30bf\u304c\u5171\u6709\u3055\u308c\u308b<code>raw</code>, RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u516c\u958b\u3055\u308c\u3066\u3082\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u304c\u5171\u6709\u3055\u308c\u306a\u3044<code>nonshared_raw</code>\u304c\u3042\u308a\u3001\u5229\u7528\u72b6\u6cc1\u306b\u5fdc\u3058\u3066\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3088\u308a\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> \u8a2d\u5b9a\u5024 \u5024 \u8aac\u660e save_raw <code>true</code> / <code>false</code> <code>raw</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4fdd\u5b58\u3059\u308b\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f<code>false</code> save_nonshared_raw <code>true</code> / <code>false</code> <code>save_nonshared_raw</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4fdd\u5b58\u3059\u308b\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f<code>true</code> \u5165\u529b\u30c7\u30fc\u30bf\u306e\u81ea\u52d5\u4fdd\u5b58\u306e\u6709\u52b9\u5316(raw)\u5165\u529b\u30c7\u30fc\u30bf\u306e\u81ea\u52d5\u4fdd\u5b58\u306e\u7121\u52b9\u5316(raw)\u5165\u529b\u30c7\u30fc\u30bf\u306e\u81ea\u52d5\u4fdd\u5b58\u306e\u6709\u52b9\u5316(nonshared_raw)\u5165\u529b\u30c7\u30fc\u30bf\u306e\u81ea\u52d5\u4fdd\u5b58\u306e\u7121\u52b9\u5316(nonshared_raw) <pre><code>system:\n    save_raw: true\n</code></pre> <pre><code>system:\n    save_raw: false\n</code></pre> <pre><code>system:\n    save_nonshared_raw: true\n</code></pre> <pre><code>system:\n    save_nonshared_raw: false\n</code></pre>"},{"location":"usage/config/config/#magic-variable","title":"magic variable","text":"<p>\u3053\u306e\u30e2\u30fc\u30c9\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5165\u529b\u30e2\u30fc\u30c9<code>invoice\u30e2\u30fc\u30c9</code>\u306e\u307f\u3067\u5b9f\u884c\u3055\u308c\u308b\u51e6\u7406\u306b\u306a\u308a\u307e\u3059\u3002\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3001\u30c7\u30fc\u30bf\u767b\u9332\u6642\u306b<code>${filename}</code>\u3068\u3044\u3046\u540d\u79f0\u3067\u30c7\u30fc\u30bf\u540d\u3092\u767b\u9332\u3059\u308b\u3068\u3001\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u30c7\u30fc\u30bf\u540d\u306b\u8ee2\u8a18\u3059\u308b\u30e2\u30fc\u30c9\u3067\u3059\u3002 \u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001\u30c7\u30fc\u30bf\u540d\u306b\u3001\u300c<code>${filename}</code>\u300d\u3092\u5165\u529b\u3057\u3001\u30d5\u30a1\u30a4\u30ebxrd_CI0034.rasx\u3092\u767b\u9332\u3059\u308b\u3068\u3001\u30c7\u30fc\u30bf\u540d\u304c\u3001xrd_CI0034.rasx\u306b\u7f6e\u63db\u3055\u308c\u307e\u3059\u3002</p> <p></p> magic variable\u306e\u6709\u52b9\u5316magic variable\u306e\u7121\u52b9\u5316 <pre><code>system:\n    magic_variable: true\n</code></pre> <pre><code>system:\n    magic_variable: false\n</code></pre>"},{"location":"usage/config/config/#_6","title":"\u30b5\u30e0\u30cd\u30a4\u30eb\u753b\u50cf\u306e\u81ea\u52d5\u4fdd\u5b58","text":"<p>\u30b5\u30e0\u30cd\u30a4\u30eb\u306b\u4f7f\u7528\u3059\u308b\u753b\u50cf\u3092\u81ea\u52d5\u7684\u4fdd\u5b58\u3059\u308b\u6a5f\u80fd\u3067\u3059\u3002\u3053\u306e\u30e2\u30fc\u30c9\u3092\u6709\u52b9\u5316\u3059\u308b\u3068\u3001Main\u753b\u50cf(main_image)\u30d5\u30a9\u30eb\u30c0\u306e\u753b\u50cf\u3092\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30bf\u30a4\u30eb\u306e\u30b5\u30e0\u30cd\u30a4\u30eb\u30d5\u30a9\u30eb\u30c0\u3078\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002</p> \u30b5\u30e0\u30cd\u30a4\u30eb\u753b\u50cf\u306e\u81ea\u52d5\u4fdd\u5b58\u306e\u6709\u52b9\u5316\u30b5\u30e0\u30cd\u30a4\u30eb\u753b\u50cf\u306e\u81ea\u52d5\u4fdd\u5b58\u306e\u7121\u52b9\u5316 <pre><code>system:\n    save_thumbnail_image: ture\n</code></pre> <pre><code>system:\n    save_thumbnail_image: false\n</code></pre>"},{"location":"usage/config/config/#_7","title":"\u72ec\u81ea\u306e\u8a2d\u5b9a\u5024\u3092\u8a2d\u5b9a\u3059\u308b","text":"<p><code>rdeconfig.yaml</code>\u7b49\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u72ec\u81ea\u306e\u8a2d\u5b9a\u5024\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30b5\u30e0\u30cd\u30a4\u30eb\u306e\u753b\u50cf\u306b\u3069\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u3059\u308b\u304b\u6307\u5b9a\u3059\u308b\u5834\u5408\u3001<code>thumbnail_image_name</code>\u3068\u3044\u3046\u8a2d\u5b9a\u5024\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002</p> yml\u30fbyamlpyproject.toml <pre><code>custom:\n    thumbnail_image_name: \"inputdata/sample_image.png\"\n</code></pre> <pre><code>[tool.rdetoolkit.custom]\n thumbnail_image_name: \"inputdata/sample_image.png\"\n</code></pre> <p>\u8a2d\u5b9a\u5024\u306e\u66f8\u304d\u65b9\u306b\u3064\u3044\u3066\u306f\u3001YAML\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5f93\u3063\u3066\u8a18\u8ff0\u3057\u3066\u304f\u3060\u3055\u3044\u3002: YAML Ain\u2019t Markup Language (YAML\u2122) version 1.2</p>"},{"location":"usage/config/config/#multidatatile","title":"MultiDataTile\u30e2\u30fc\u30c9\u3067\u30a8\u30e9\u30fc\u306b\u3088\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b","text":"<p><code>MultiDataTile</code>\u306f\u3001\u4e00\u5ea6\u306b\u8907\u6570\u306e\u30c7\u30fc\u30bf\u3092\u767b\u9332\u3067\u304d\u307e\u3059\u304c\u3001\u9014\u4e2d\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u3068\u3001\u51e6\u7406\u304c\u505c\u6b62\u3057\u3001\u6700\u5f8c\u307e\u3067\u69cb\u9020\u5316\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u307e\u305b\u3093\u3002\u3053\u306e\u3068\u304d\u3001\u5165\u529b\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306b\u5bfe\u3057\u3066\u51e6\u7406\u3092\u6700\u5f8c\u307e\u3067\u5b9f\u884c\u3057\u305f\u3044\u5834\u5408\u3001<code>multidata_tile</code>\u3068\u3044\u3046\u30bb\u30af\u30b7\u30e7\u30f3\u306e<code>ignore_errors</code>\u3092\u6709\u52b9\u5316\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u3001<code>false</code>\u3068\u306a\u3063\u3066\u304a\u308a\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u3068\u51e6\u7406\u304c\u7d42\u4e86\u3057\u307e\u3059\u3002</p> \u30a8\u30e9\u30fc\u51e6\u7406\u30b9\u30ad\u30c3\u30d7\u6a5f\u80fd\u3092\u6709\u52b9\u5316\u30a8\u30e9\u30fc\u51e6\u7406\u30b9\u30ad\u30c3\u30d7\u6a5f\u80fd\u3092\u7121\u52b9\u5316 <pre><code>multidata_tile:\n    ignore_errors: true\n</code></pre> <pre><code>multidata_tile:\n    ignore_errors: false\n</code></pre> <p>\u8a2d\u5b9a\u5024\u306e\u66f8\u304d\u65b9\u306b\u3064\u3044\u3066\u306f\u3001YAML\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5f93\u3063\u3066\u8a18\u8ff0\u3057\u3066\u304f\u3060\u3055\u3044\u3002: YAML Ain\u2019t Markup Language (YAML\u2122) version 1.2</p>"},{"location":"usage/config/config/#_8","title":"\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8a2d\u5b9a\u4f8b","text":"rdeconfig.ymlpyproject.toml <pre><code>system:\n    extended_mode: 'MultiDataTile'\n    save_raw: false\n    save_nonshared_raw: true\n    magic_variable: false\n    save_thumbnail_image: true\n</code></pre> <pre><code>[tool.rdetoolkit.system]\nextended_mode = 'MultiDataTile'\nsave_raw = true\nsave_nonshared_raw=true\nmagic_variable = false\nsave_thumbnail_image = true\n</code></pre>"},{"location":"usage/config/config/#_9","title":"\u69cb\u9020\u5316\u51e6\u7406\u304b\u3089\u8a2d\u5b9a\u5024\u3092\u53c2\u7167\u3059\u308b","text":"<p>\u69cb\u9020\u5316\u51e6\u7406\u5185\u3067\u3001<code>tasksupport</code>\u306b\u683c\u7d0d\u3057\u305f\u8a2d\u5b9a\u5024\u3092\u53c2\u7167\u3059\u308b\u65b9\u6cd5\u306f\u3001<code>rdetoolkit.models.rde2types.RdeInputDirPaths.config</code>\u3067\u8a2d\u5b9a\u5024\u3092\u53c2\u7167\u3067\u304d\u307e\u3059\u3002</p> <pre><code>```python\ndef dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # \u3053\u306e\u95a2\u6570\u5185\u3067\u30e6\u30fc\u30b6\u81ea\u8eab\u304c\u5b9a\u7fa9\u3057\u305f\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3092\u8a18\u8ff0\u3059\u308b\n    ... #\u4efb\u610f\u306e\u51e6\u7406\n\n    # Extendeds Mode\u306e\u8a2d\u5b9a\u5024\u3092\u53d6\u5f97\u3059\u308b\n    print(srcpaths.config.system.extended_mode)\n\n    # \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u81ea\u52d5\u4fdd\u5b58\u306e\u8a2d\u5b9a\u5024\u3092\u53d6\u5f97\u3059\u308b\n    print(srcpaths.config.system.save_raw)\n\n    # \u30b5\u30e0\u30cd\u30a4\u30eb\u753b\u50cf\u306e\u81ea\u52d5\u4fdd\u5b58\u306e\u8a2d\u5b9a\u5024\u3092\u53c2\u7167\u3059\u308b\n    print(srcpaths.config.system.save_thumbnail_image)\n\n    # magic variable\u306e\u8a2d\u5b9a\u5024\u3092\u53c2\u7167\u3059\u308b\n    print(srcpaths.config.system.magic_variable)\n\n    # \u72ec\u81ea\u306e\u8a2d\u5b9a\u5024\u3092\u53c2\u7167\u3059\u308b\n    print(srcpaths.config.custom.thumbnail_image_name)\n```\n</code></pre>"},{"location":"usage/config/file_folder_mode/","title":"\u5727\u7e2e\u30d5\u30a1\u30a4\u30eb\u306e\u5f62\u5f0f\u306b\u3064\u3044\u3066","text":"<p>Excelinvoice\u30e2\u30fc\u30c9\u3067\u30c7\u30fc\u30bf\u3092\u767b\u9332\u3059\u308b\u3068\u304d\u3001RDE\u306b\u306f\u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9\u3068\u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9\u3068\u3044\u3046\u6982\u5ff5\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9\u3068\u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9\u306e\u8aac\u660e\u3068\u3001\u8a18\u8ff0\u30eb\u30fc\u30eb\u3001\u305d\u306e\u4ed6\u6ce8\u610f\u4e8b\u9805\u7b49\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u307e\u3059\u3002</p>"},{"location":"usage/config/file_folder_mode/#_2","title":"\u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9","text":"<p>Excelinvoice\u306e\u30c7\u30fc\u30bf\u5217(A\u5217)\u306b\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5217\u6319\u3057\u3001\u8a18\u8f09\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u767b\u9332\u3059\u308b\u30e2\u30fc\u30c9\u306e\u3053\u3068\u3092\u6307\u3057\u307e\u3059\u3002</p> <p>\u8d77\u52d5\u6761\u4ef6\u3084\u5236\u7d04\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002</p> <ul> <li>\u4e0b\u56f3\u306e\u3001A\u5217\u306e\u3088\u3046\u306b<code>data_file_names</code>\u306e\u6b21\u306e\u884c\u306b<code>name</code>\u3068\u8a18\u8f09\u3059\u308b\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8)</li> <li>\u30d5\u30a1\u30a4\u30eb\u540d\u306b\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u8a18\u8f09\u3059\u308b\u3002(zip\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3067\u306f\u306a\u3044\u3002)</li> </ul> <p></p> <p>\u3053\u306e\u6642\u306e\u5165\u529bzip\u30d5\u30a1\u30a4\u30eb\u306e\u69cb\u6210\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002zip\u30d5\u30a1\u30a4\u30eb\u540d\u306f\u4eee\u306e\u540d\u79f0\u3068\u3057\u307e\u3059\u3002 \u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9\u3067\u5165\u529b\u3059\u308bzip\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u5e73\u7f6e\u304d\u3067\u683c\u7d0d\u3055\u308c\u305f\u72b6\u614b\u3067\u5727\u7e2e\u3057\u307e\u3059\u3002</p> <pre><code>input.zip/\n|-- 20100131045801(2s).txt\n|-- 20100131052029(2p).txt\n</code></pre>"},{"location":"usage/config/file_folder_mode/#_3","title":"\u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9","text":"<p>Excelinvoice\u306e\u30c7\u30fc\u30bf\u5217(A\u5217)\u306b\u30d5\u30a9\u30eb\u30c0\u540d\u3092\u5217\u6319\u3057\u3001\u8a18\u8f09\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u914d\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u767b\u9332\u3059\u308b\u30e2\u30fc\u30c9\u306e\u3053\u3068\u3092\u6307\u3057\u307e\u3059\u3002</p> <p>\u3053\u306e\u30e2\u30fc\u30c9\u306e\u5229\u7528\u60f3\u5b9a\u306f\u3001Excelinvoice\u3092\u5229\u7528\u3057\u3001\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4e00\u3064\u306e\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u306b\u767b\u9332\u3057\u305f\u3044\u5834\u5408\u3001\u3053\u306e\u30e2\u30fc\u30c9\u3067\u30c7\u30fc\u30bf\u767b\u9332\u3092\u884c\u3044\u307e\u3059\u3002</p> <p></p> <p>\u3053\u306e\u6642\u306e\u5165\u529bzip\u30d5\u30a1\u30a4\u30eb\u306e\u69cb\u6210\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002zip\u30d5\u30a1\u30a4\u30eb\u540d\u306f\u4eee\u306e\u540d\u79f0\u3068\u3057\u307e\u3059\u3002 \u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9\u3067\u5165\u529b\u3059\u308bzip\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u3001\u30d5\u30a9\u30eb\u30c0\u304c\u683c\u7d0d\u3055\u308c\u305f\u72b6\u614b\u3067\u5727\u7e2e\u3057\u767b\u9332\u3057\u307e\u3059\u3002\u3053\u306e\u3068\u304d\u3001\u30d5\u30a9\u30eb\u30c0\u304c\u767b\u9332\u3055\u308c\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30d5\u30a9\u30eb\u30c0\u914d\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u767b\u9332\u3055\u308c\u308b\u305f\u3081\u3001\u3042\u3089\u304b\u3058\u3081\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002</p> <pre><code>input.zip/\n|-- sample_folder_1/\n|   |-- file1.txt\n|   |-- file2.txt\n|\n|-- sample_folder_2/\n|   |-- file3.txt\n|   |-- file4.txt\n</code></pre>"},{"location":"usage/config/file_folder_mode/#_4","title":"\u305d\u306e\u4ed6","text":""},{"location":"usage/config/file_folder_mode/#_5","title":"\u8868\u8a18\u3057\u305f\u30e2\u30fc\u30c9\u3068\u5727\u7e2e\u30d5\u30a1\u30a4\u30eb\u306e\u69cb\u6210\u304c\u7570\u306a\u308b\u5834\u5408","text":"<p>Excelinvoice\u306b\u8868\u8a18\u3057\u305f\u30e2\u30fc\u30c9\u3068\u3001\u5165\u529b\u3059\u308bzip\u30d5\u30a1\u30a4\u30eb\u306e\u69cb\u6210\u304c\u7570\u306a\u308b\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3068\u306a\u308a\u51e6\u7406\u3092\u6b63\u3057\u304f\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\u3002</p>"},{"location":"usage/config/file_folder_mode/#_6","title":"\u3053\u306e\u51e6\u7406\u306b\u3064\u3044\u3066","text":"<p>\u3053\u306e\u51e6\u7406\u306f\u3001RdeToolKit\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\u8a72\u5f53\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30ea\u30f3\u30af\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>Reference</p> <ul> <li>parse_compressedfile_mode - compressed_controller</li> </ul>"},{"location":"usage/config/magic_variable/","title":"Magic Variable\u306b\u3088\u308b\u30c7\u30fc\u30bf\u767b\u9332\u306b\u3064\u3044\u3066","text":"<ul> <li>\u8d77\u52d5\u6761\u4ef6: \u30c7\u30fc\u30bf\u767b\u9332\u6642\u306b<code>${filename}</code>\u3092\u5165\u529b\u3059\u308b\u3068\u5165\u529b\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u30c7\u30fc\u30bf\u540d\u306b\u767b\u9332\u3055\u308c\u308b</li> <li>\u5bfe\u8c61\u30e2\u30fc\u30c9: invoice\u30e2\u30fc\u30c9\u3001Excelinvoice\u30e2\u30fc\u30c9, \u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb</li> <li>\u5099\u8003: \u3053\u306e\u6a5f\u80fd\u306f<code>RDEToolKit v0.1.5</code>\u4ee5\u964d\u304b\u3089\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002</li> </ul> <p>\u3053\u306e\u30e2\u30fc\u30c9\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5165\u529b\u30e2\u30fc\u30c9invoice\u30e2\u30fc\u30c9\u306e\u307f\u3067\u5b9f\u884c\u3055\u308c\u308b\u51e6\u7406\u306b\u306a\u308a\u307e\u3059\u3002\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3001\u30c7\u30fc\u30bf\u767b\u9332\u6642\u306b<code>${filename}</code>\u3068\u3044\u3046\u540d\u79f0\u3067\u30c7\u30fc\u30bf\u540d\u3092\u767b\u9332\u3059\u308b\u3068\u3001\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u30c7\u30fc\u30bf\u540d\u306b\u8ee2\u8a18\u3059\u308b\u30e2\u30fc\u30c9\u3067\u3059\u3002 \u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001\u30c7\u30fc\u30bf\u540d\u306b\u3001\u300c<code>${filename}</code>\u300d\u3092\u5165\u529b\u3057\u3001\u30d5\u30a1\u30a4\u30eb<code>xrd_CI0034.rasx</code>\u3092\u767b\u9332\u3059\u308b\u3068\u3001\u30c7\u30fc\u30bf\u540d\u304c\u3001<code>xrd_CI0034.rasx</code>\u306b\u7f6e\u63db\u3055\u308c\u307e\u3059\u3002</p> <p></p>"},{"location":"usage/config/magic_variable/#invoicejson","title":"\u5b9f\u884c\u524d\u306einvoice.json","text":"<pre><code>{\n    \"datasetId\": \"4c747c9a-ef13-4058-9e36-d76bb6531658\",\n    \"basic\": {\n        \"dateSubmitted\": \"2023-06-27\",\n        \"dataOwnerId\": \"222aaa4798cb8c1c3c19c66062c7e55a9b4255fe336461301233456\",\n        \"dataName\": \"${filename}\",\n        \"instrumentId\": null,\n        \"experimentId\": null,\n        \"description\": \"\"\n    },\n    \"custom\": null\n}\n</code></pre>"},{"location":"usage/config/magic_variable/#invoicejson_1","title":"\u5b9f\u884c\u5f8c\u306einvoice.json","text":"<pre><code>{\n    \"datasetId\": \"4c747c9a-ef13-4058-9e36-d76bb6531658\",\n    \"basic\": {\n        \"dateSubmitted\": \"2023-06-27\",\n        \"dataOwnerId\": \"222aaa4798cb8c1c3c19c66062c7e55a9b4255fe336461301233456\",\n        \"dataName\": \"data0000.dat\",\n        \"instrumentId\": null,\n        \"experimentId\": null,\n        \"description\": \"\"\n    },\n    \"custom\": null\n}\n</code></pre>"},{"location":"usage/config/mode/","title":"RDEToolKit\u306e\u30c7\u30fc\u30bf\u767b\u9332\u30e2\u30fc\u30c9","text":"<p>RDE\u306e\u69cb\u9020\u5316\u51e6\u7406\u3067\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u767b\u9332\u30e2\u30fc\u30c9\u306f\u3001\u4ee5\u4e0b4\u3064\u306e\u30e2\u30fc\u30c9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002</p> \u30e2\u30fc\u30c9\u540d \u8d77\u52d5\u6761\u4ef6 invoice\u30e2\u30fc\u30c9 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30c7\u30fc\u30bf\u767b\u9332\u30e2\u30fc\u30c9 Excelinvoice\u30e2\u30fc\u30c9 \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306b<code>*._excel_invoice.xlsx</code>\u3092\u683c\u7d0d \u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b<code>extended_mode: 'MultiDataTile'</code>\u3092\u8ffd\u52a0 RDE\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30e2\u30fc\u30c9 \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b<code>extended_mode: 'rdeformat'</code>\u3092\u8ffd\u52a0 <p>\u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u3068\u3001RDE\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30e2\u30fc\u30c9\u306f\u3001invoice\u30e2\u30fc\u30c9\u306e\u62e1\u5f35\u6a5f\u80fd\u306b\u306a\u308a\u307e\u3059\u3002</p> <pre><code>flowchart LR\n  ModeA--&gt;ModeB\n  ModeA--&gt;ModeE\n  ModeB--&gt;ModeC\n  ModeB--&gt;ModeD\n  ModeA[RDE\u30c7\u30fc\u30bf\u767b\u9332\u30e2\u30fc\u30c9]\n  ModeB[invoice\u30e2\u30fc\u30c9]\n  subgraph extended mode\n  ModeC[\u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb]\n  ModeD[RDE\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30e2\u30fc\u30c9]\n  end\n  ModeE[Excelinvoice\u30e2\u30fc\u30c9]\n</code></pre> <p>\u3053\u3053\u3067\u306f\u3001\u5404\u7a2e\u30e2\u30fc\u30c9\u306e\u8aac\u660e\u3068\u5b9f\u884c\u4f8b\u3092\u307e\u3068\u3081\u307e\u3057\u305f\u3002</p>"},{"location":"usage/config/mode/#invoice","title":"invoice\u30e2\u30fc\u30c9","text":""},{"location":"usage/config/mode/#_1","title":"\u8aac\u660e","text":"<p>\u3053\u306e\u30e2\u30fc\u30c9\u306f\u3001\u901a\u5e38\u306eRDE\u767b\u9332\u753b\u9762\u3067\u30c7\u30fc\u30bf\u3092\u767b\u9332\u3059\u308b\u30e2\u30fc\u30c9\u3092\u6307\u3057\u307e\u3059\u3002\u4e00\u756a\u3001\u57fa\u672c\u7684\u304b\u3064\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30e2\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001Entry\u753b\u9762\u304b\u3089\u3001\u30c7\u30fc\u30bf\u3092\u6295\u5165\u3059\u308b\u30e2\u30fc\u30c9\u3067\u3059\u3002</p> <p></p>"},{"location":"usage/config/mode/#_2","title":"\u8d77\u52d5\u6761\u4ef6","text":"<p>\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30c7\u30fc\u30bf\u767b\u9332\u30e2\u30fc\u30c9\u3002\u8a2d\u5b9a\u7b49\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002</p>"},{"location":"usage/config/mode/#invoice_1","title":"invoice\u30e2\u30fc\u30c9\u5b9f\u884c\u4f8b","text":""},{"location":"usage/config/mode/#_3","title":"\u6295\u5165\u30c7\u30fc\u30bf","text":"\u767b\u9332\u30d5\u30a1\u30a4\u30eb \u8aac\u660e <code>data/inputdata/test23_1.csv</code> \u767b\u9332\u3059\u308b\u30c7\u30fc\u30bf <code>data/invoice/invoice.json</code> \u30ed\u30fc\u30ab\u30eb\u3067\u4e8b\u524d\u306b\u6e96\u5099\u30fb\u4f5c\u6210/\u30b7\u30b9\u30c6\u30e0\u304c\u81ea\u52d5\u7684\u306b\u751f\u6210 <code>data/tasksupport/invoice.schema.json</code> \u30ed\u30fc\u30ab\u30eb\u3067\u4e8b\u524d\u306b\u6e96\u5099\u30fb\u4f5c\u6210/\u30b7\u30b9\u30c6\u30e0\u306b\u4e8b\u524d\u306b\u767b\u9332 <code>data/tasksupport/metadata-def.json</code> \u30ed\u30fc\u30ab\u30eb\u3067\u4e8b\u524d\u306b\u6e96\u5099\u30fb\u4f5c\u6210/\u30b7\u30b9\u30c6\u30e0\u306b\u4e8b\u524d\u306b\u767b\u9332 <pre><code>data\n\u251c\u2500\u2500 inputdata\n\u2502   \u2514\u2500\u2500 test23_1.csv\n\u251c\u2500\u2500 invoice\n\u2502   \u2514\u2500\u2500 invoice.json\n\u2514\u2500\u2500 tasksupport\n    \u251c\u2500\u2500 rdeconfig.yaml\n    \u251c\u2500\u2500 invoice.schema.json\n    \u2514\u2500\u2500 metadata-def.json\n</code></pre>"},{"location":"usage/config/mode/#config","title":"config\u30d5\u30a1\u30a4\u30eb","text":"<p>\u30e2\u30fc\u30c9\u306e\u6307\u5b9a\u7b49\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002</p> <pre><code>save_raw: true\nmagic_variable: false\nsave_thumbnail_image: ture\n</code></pre>"},{"location":"usage/config/mode/#_4","title":"\u69cb\u9020\u5316\u51e6\u7406\u5b9f\u884c\u5b9f\u884c\u5f8c\u30d5\u30a1\u30a4\u30eb\u69cb\u6210","text":"<p>\u4e0a\u8a18\u306e\u8a2d\u5b9a\u3067\u3001\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u51fa\u529b\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p> <pre><code>data\n\u251c\u2500\u2500 inputdata\n\u2502   \u2514\u2500\u2500 test23_1.csv\n\u251c\u2500\u2500 invoice\n\u2502   \u2514\u2500\u2500 invoice.json\n\u251c\u2500\u2500 logs\n\u2502   \u2514\u2500\u2500 rdesys.log\n\u251c\u2500\u2500 main_image\n\u251c\u2500\u2500 meta\n\u251c\u2500\u2500 other_image\n\u251c\u2500\u2500 raw\n\u2502   \u2514\u2500\u2500 test23_1.csv\n\u251c\u2500\u2500 structured\n\u251c\u2500\u2500 tasksupport\n\u2502   \u251c\u2500\u2500 rdeconfig.yaml\n\u2502   \u251c\u2500\u2500 invoice.schema.json\n\u2502   \u2514\u2500\u2500 metadata-def.json\n\u251c\u2500\u2500 temp\n\u2514\u2500\u2500 thumbnail\n</code></pre>"},{"location":"usage/config/mode/#excelinvoice","title":"ExcelInvoice\u30e2\u30fc\u30c9","text":""},{"location":"usage/config/mode/#_5","title":"\u8aac\u660e","text":"<p>\u3053\u306e\u30e2\u30fc\u30c9\u306f\u3001\u4e00\u5ea6\u306b\u8907\u6570\u4ef6\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u767b\u9332\u3059\u308b\u3082\u306e\u30e2\u30fc\u30c9\u3067\u3059\u3002\u901a\u5e38\u306einvoice\u30e2\u30fc\u30c9\u3067\u306f\u3001\u4e00\u4ef6\u305a\u3064\u3057\u304b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u767b\u9332\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\u304c\u3001Excelinvoice\u30e2\u30fc\u30c9\u3092\u4f7f\u3046\u3068\u3001\u4e00\u5ea6\u306b\u8907\u6570\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u767b\u9332\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u3053\u306e\u30e2\u30fc\u30c9\u306e\u8d77\u52d5\u6761\u4ef6\u3068\u3057\u3066\u3001\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306b\u3001<code>*._excel_invoice.xlsx</code>\u3068\u3044\u3046\u547d\u540d\u898f\u5247\u3092\u6301\u3064Excel\u30d5\u30a1\u30a4\u30eb\u3092\u6295\u5165\u3059\u308b\u3068Excelinvoice\u3068\u3057\u3066\u767b\u9332\u3055\u308c\u307e\u3059\u3002</p> <p>\u3053\u306eExcelinvoice\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306fRDE\u3078\u554f\u3044\u5408\u308f\u305b\u304f\u3060\u3055\u3044\u3002</p> <p></p> <p>Documents</p> <p>ExcelInvoice\u306b\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9\u3068\u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9\u3068\u3044\u3046\u6982\u5ff5\u304c\u3042\u308a\u307e\u3059\u3002File Mode / Folder Mode\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"usage/config/mode/#_6","title":"\u8d77\u52d5\u6761\u4ef6","text":"<p>\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306b<code>*._excel_invoice.xlsx</code>\u3092\u683c\u7d0d\u3059\u308b</p>"},{"location":"usage/config/mode/#excelinvoice_1","title":"ExcelInvoice\u30e2\u30fc\u30c9\u5b9f\u884c\u4f8b","text":""},{"location":"usage/config/mode/#_7","title":"\u6295\u5165\u30c7\u30fc\u30bf","text":"<ul> <li>\u767b\u9332\u30d5\u30a1\u30a4\u30eb(data/inputdata)</li> <li>data.zip (\u6295\u5165\u30d5\u30a1\u30a4\u30eb\u3092zip\u5727\u7e2e\u3057\u305f\u3082\u306e)</li> <li>sample_excel_invoice.xlsx (\u3053\u306e\u4e8b\u4f8b\u3067\u306f3\u884c3\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u5206\u3092\u8a18\u8f09)</li> <li>tasksupport</li> <li>\u8ffd\u52a0\u306a\u3057</li> </ul>"},{"location":"usage/config/mode/#_8","title":"\u5b9f\u884c\u524d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210","text":"<p><code>data/invoice/invoice.json</code>\u306f\u3001\u7a7a\u306ejson\u30d5\u30a1\u30a4\u30eb\u3067\u3082\u69cb\u3044\u307e\u305b\u3093\u3002</p> <pre><code>container/\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 &lt;\u4efb\u610f\u306e\u69cb\u9020\u5316\u51e6\u7406\u30e2\u30b8\u30e5\u30fc\u30eb&gt;\n\u2514\u2500\u2500 data\n    \u251c\u2500\u2500 inputdata\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 data.zip\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 sample_excel_invoice.xlsx\n    \u251c\u2500\u2500 invoice\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 invoice.json\n    \u2514\u2500\u2500 tasksupport\n        \u251c\u2500\u2500 invoice.schema.json\n        \u2514\u2500\u2500 metadata-def.json\n</code></pre> <p>data.zip\u306e\u5185\u5bb9\u306f\u3001\u30a8\u30af\u30bb\u30eb\u30a4\u30f3\u30dc\u30a4\u30b9\u306b3\u884c\u8ffd\u52a0\u3059\u308b\u305f\u30813\u30d5\u30a1\u30a4\u30ebzip\u5316\u3059\u308b\u3002</p> <pre><code>$ unzip -t data.zip\nArchive:  data.zip\n    testing: data0000.dat\n    testing: data0001.dat\n    testing: data0002.dat\n</code></pre> <p></p>"},{"location":"usage/config/mode/#_9","title":"\u69cb\u9020\u5316\u51e6\u7406\u5b9f\u884c\u5f8c\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020","text":"<p>\u4e0a\u8a18\u306e\u8a2d\u5b9a\u3067\u3001\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u51fa\u529b\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p> <ul> <li>data.zip\u306e\u5185\u5bb9\u306f\u5c55\u958b\u3055\u308c\u308b</li> <li>sample_excel_invoice.xlsx\u306e\u8a18\u5165\u5185\u5bb9\u306b\u5f93\u3063\u3066divided\u3092\u542b\u3080\u30d5\u30a9\u30eb\u30c0\u306b\u5c55\u958b</li> <li>\u5404invoice.json\u306f\u3001excel_invoice\u306e\u5404\u884c\u304b\u3089\u8aad\u307f\u51fa\u3057\u305f\u60c5\u5831\u304c\u5165\u529b\u3055\u308c\u308b</li> </ul> <pre><code>data\n\u251c\u2500\u2500 divided\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 0001\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 invoice\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 invoice.json\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 logs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 main_image\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 meta\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 other_image\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 raw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 data0001.dat\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 structured\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 temp\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 thumbnail\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 0002\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 invoice\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 invoice.json\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 logs\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 main_image\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 meta\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 other_image\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 raw\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 data0002.dat\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 structured\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 temp\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 thumbnail\n\u251c\u2500\u2500 inputdata\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 data.zip\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sample_excel_invoice.xlsx\n\u251c\u2500\u2500 invoice\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 invoice.json\n\u251c\u2500\u2500 logs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rdesys.log\n\u251c\u2500\u2500 main_image\n\u251c\u2500\u2500 meta\n\u251c\u2500\u2500 other_image\n\u251c\u2500\u2500 raw\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 data0000.dat\n\u251c\u2500\u2500 structured\n\u251c\u2500\u2500 tasksupport\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 invoice.schema.json\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 metadata-def.json\n\u251c\u2500\u2500 temp\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 data0000.dat\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 data0001.dat\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 data0002.dat\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 invoice_org.json\n\u2514\u2500\u2500 thumbnail\n</code></pre>"},{"location":"usage/config/mode/#divided","title":"divided\u30d5\u30a9\u30eb\u30c0\u4ee5\u4e0b\u306e\u5185\u5bb9\u306b\u3064\u3044\u3066","text":"<p><code>divided/0001/invoice/invoice.json</code>\u306e\u5185\u5bb9\u306f\u3001\u4e8b\u524d\u306b\u914d\u7f6e\u3055\u308c\u305finvoice.json\u304c\u30b3\u30d4\u30fc\u3055\u308c<code>basic/dataName</code>, <code>basic/dataOwnerId</code> \u304c\u30a8\u30af\u30bb\u30eb\u30a4\u30f3\u30dc\u30a4\u30b9\u306e\u5185\u5bb9\u3067\u66f8\u304d\u63db\u3048\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u3002</p> <p>\u66f8\u304d\u63db\u3048\u5f8c\u306e\u3001<code>data/invoice/invoice.json</code></p> <pre><code>{\n    \"datasetId\": \"ab9536f2-5fe4-49c4-bb82-dd8212453d85\",\n    \"basic\": {\n        \"dateSubmitted\": \"2023-03-14\",\n        \"dataOwnerId\": \"153cbe4798cb8c1c3c0fc66062c7e55a9b4255fe3364613035643239\",\n        \"dataName\": \"dumm.dat\",\n        \"instrumentId\": null,\n        \"experimentId\": null,\n        \"description\": null\n    },\n    \"custom\": null\n}\n</code></pre> <p>\u66f8\u304d\u63db\u3048\u5f8c\u306e\u3001<code>data/divided/0001/invoice/invoice.json</code></p> <pre><code>{\n    \"datasetId\": \"e751fcc4-b926-4747-b236-cab40316fc49\",\n    \"basic\": {\n        \"dateSubmitted\": \"2023-03-14\",\n        \"dataOwnerId\": \"97e05f8b9ed6b4b5dd6fd50411a9c163a2d4e38d6264623666383663\",\n        \"dataName\": \"data0001.dat\",\n        \"instrumentId\": null,\n        \"experimentId\": null,\n        \"description\": null\n    }\n}\n</code></pre> <p>Warning</p> <ul> <li><code>smple.zip</code>\u306b\u4e0d\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u304b\u78ba\u8a8d\u3059\u308b\u3002Mac\u7279\u6709\u306e<code>.DS_Store</code>\u30d5\u30a1\u30a4\u30eb\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u5b9f\u884c\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002</li> <li>\u30a8\u30af\u30bb\u30eb\u30a4\u30f3\u30dc\u30a4\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3044\u305f\u307e\u307e\u5b9f\u884c\u3057\u3066\u3044\u308b\u5834\u5408\u3001Microsoft\u7279\u6709\u306e\u30d5\u30a1\u30a4\u30eb(<code>~$</code>\u304b\u3089\u59cb\u307e\u308b\u30d5\u30a1\u30a4\u30eb)\u304c\u6b8b\u3063\u3066\u3057\u307e\u3044\u3001\u5b9f\u884c\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002</li> <li>\u30ed\u30fc\u30ab\u30eb\u3067\u5b9f\u884c\u3059\u308b\u5834\u5408\u3001temp\u30d5\u30a9\u30eb\u30c0\u306b\u524d\u56de\u306e\u5b9f\u884c\u7d50\u679c\u304c\u6b8b\u3063\u3066\u3044\u308b\u3068\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"usage/config/mode/#zipexcelinvoice","title":"\u30d5\u30a9\u30eb\u30c0\u3092\u542b\u3080zip\u306eExcelInvoice\u30e2\u30fc\u30c9\u5b9f\u884c\u4f8b","text":"<p>\u30d5\u30a9\u30eb\u30c0\u3092\u542b\u3080zip\u30d5\u30a1\u30a4\u30eb\u3092\u767b\u9332\u3059\u308b\u65b9\u6cd5\u306f\u3001zip\u30d5\u30a1\u30a4\u30eb\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002</p> <p>Documents</p> <p>ExcelInvoice\u306b\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9\u3068\u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9\u3068\u3044\u3046\u6982\u5ff5\u304c\u3042\u308a\u307e\u3059\u3002File Mode / Folder Mode\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p> <pre><code># \u30d5\u30a9\u30eb\u30c0\u3042\u308a\u3067zip\n$ zip data_folder.zip -r ./inputdata -x \\*/.DS_Store *\\.xlsx\n  adding: inputdata/ (stored 0%)\n  adding: inputdata/data0001.dat (stored 0%)\n  adding: inputdata/data0000.dat (stored 0%)\n  adding: inputdata/data0002.dat (stored 0%)\n</code></pre>"},{"location":"usage/config/mode/#rdeformat","title":"RDEformat\u30e2\u30fc\u30c9","text":""},{"location":"usage/config/mode/#_10","title":"\u8aac\u660e","text":"<p>RDE\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30e2\u30fc\u30c9\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30e2\u30c3\u30af\u3092\u4f5c\u6210\u3059\u308b\u30e2\u30fc\u30c9\u3067\u3059\u3002\u30c7\u30fc\u30bf\u767b\u9332\u6642\u306b\u3001\u5177\u4f53\u7684\u306a\u69cb\u9020\u5316\u51e6\u7406\u306f\u884c\u308f\u305a\u3001\u6307\u5b9a\u3055\u308c\u305f\u5165\u529b\u30c7\u30fc\u30bf\u3092RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5f62\u5f0f\u306b\u767b\u9332\u3092\u3057\u307e\u3059\u3002</p> <p>\u5165\u529b\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6301\u3064zip\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6295\u5165\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002zip\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u306b\u3001<code>invoice</code>, <code>main_image</code>, <code>other_image</code>, <code>structured</code>\u3068\u3044\u3046\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u3042\u308a\u3001\u305d\u306e\u4e2d\u306b\u3001\u305d\u308c\u305e\u308c\u306e\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u3066\u304f\u3060\u3055\u3044\u3002zip\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u3059\u3067\u306b\u69cb\u9020\u5316\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u51fa\u529b\u3055\u308c\u305f\u60f3\u5b9a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u683c\u7d0d\u3057\u3001\u305d\u306e\u30c7\u30fc\u30bf\u3092\u6307\u5b9a\u30d5\u30a9\u30eb\u30c0\u306b\u683c\u7d0d\u3059\u308b\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002</p> <pre><code>\u2514\u2500\u2500 sample.zip\n    \u251c\u2500\u2500 invoice/\n    \u2502   \u2514\u2500\u2500 invoice.json\n    \u251c\u2500\u2500 main_image/\n    \u2502   \u2514\u2500\u2500 xxxx.png\n    \u251c\u2500\u2500 other_image/\n    \u2502   \u2514\u2500\u2500 xxxx.png\n    \u2514\u2500\u2500 structured/\n        \u2514\u2500\u2500 sample.csv\n</code></pre> <p></p>"},{"location":"usage/config/mode/#_11","title":"\u8d77\u52d5\u6761\u4ef6","text":"<p>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b<code>extended_mode: 'rdeformat'</code>\u3092\u8ffd\u52a0</p> <pre><code>extended_mode: 'rdeformat'\n</code></pre>"},{"location":"usage/config/mode/#rdeformat_1","title":"RDEformat\u30e2\u30fc\u30c9\u5b9f\u884c\u4f8b","text":""},{"location":"usage/config/mode/#_12","title":"\u6295\u5165\u30c7\u30fc\u30bf","text":"<ul> <li>\u767b\u9332\u30d5\u30a1\u30a4\u30eb</li> <li>structured.zip (RDEformat\u5f62\u5f0f\u3067\u5c55\u958b\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u4e00\u5f0f\u3092zip\u3067\u307e\u3068\u3081\u305f\u3082\u306e)</li> <li>tasksupport</li> <li>rdeconfig.yml</li> </ul> <p>Documents</p> <p>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb<code>rdeconfig.yml</code>\u306f\u3001\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb - config\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p> <p>structured.zip\u306e\u5185\u5bb9\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002</p> <pre><code># unzip -t structured.zip\nArchive: structured.zip\n    testing: divided/\n    testing: divided/0002/\n    testing: divided/0002/meta/\n    testing: divided/0002/meta/metadata.json\n    testing: divided/0002/structured/\n    testing: divided/0002/structured/test23_2-output.html\n    testing: divided/0002/structured/test23_2-output.csv\n    testing: divided/0002/main_image/\n    testing: divided/0002/main_image/test23_2-output.png\n    testing: divided/0002/raw/\n    testing: divided/0002/raw/test23_2.csv\n    testing: divided/0001/\n    testing: divided/0001/meta/\n    testing: divided/0001/meta/metadata.json\n    testing: divided/0001/structured/\n    testing: divided/0001/structured/test23_1-output.html\n    testing: divided/0001/structured/test23_1-output.csv\n    testing: divided/0001/main_image/\n    testing: divided/0001/main_image/test23_1-output.png\n    testing: divided/0001/raw/\n    testing: divided/0001/raw/test23_1.csv\n    testing: meta/\n    testing: meta/metadata.json\n    testing: structured/\n    testing: structured/test23_0-output.html\n    testing: structured/test23_0-output.csv\n    testing: main_image/\n    testing: main_image/test23_0-output.png\n    testing: raw/\n    testing: raw/test23_0.csv\nNo errors detected in compressed data of data/inputdata/structured.zip.\n</code></pre>"},{"location":"usage/config/mode/#_13","title":"\u5b9f\u884c\u5f8c\u30d5\u30a1\u30a4\u30eb\u69cb\u6210","text":"<p>\u4e0a\u8a18\u306e\u8a2d\u5b9a\u3067\u3001\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u51fa\u529b\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p> <pre><code>data\n\u251c\u2500\u2500 divided\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 0001\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 invoice\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 invoice.json\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 logs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 main_image\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 test23_1-output.png\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 meta\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 metadata.json\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 other_image\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 raw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 test23_1.csv\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 structured\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 test23_1-output.csv\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 test23_1-output.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 temp\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 thumbnail\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 test23_1-output.png\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 0002\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 invoice\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 invoice.json\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 logs\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 main_image\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 test23_2-output.png\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 meta\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 metadata.json\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 other_image\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 raw\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 test23_2.csv\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 structured\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 test23_2-output.csv\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 test23_2-output.html\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 temp\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 thumbnail\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 test23_2-output.png\n\u251c\u2500\u2500 inputdata\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 structured.zip\n\u251c\u2500\u2500 invoice\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 invoice.json\n\u251c\u2500\u2500 logs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rdesys.log\n\u251c\u2500\u2500 main_image\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test23_0-output.png\n\u251c\u2500\u2500 meta\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 metadata.json\n\u251c\u2500\u2500 other_image\n\u251c\u2500\u2500 raw\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test23_0.csv\n\u251c\u2500\u2500 structured\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 test23_0-output.csv\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test23_0-output.html\n\u251c\u2500\u2500 tasksupport\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 invoice.schema.json\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 metadata-def.json\n\u251c\u2500\u2500 temp\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 divided\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 0001\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 invoice\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 invoice.json\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 main_image\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 test23_1-output.png\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 meta\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 metadata.json\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 raw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 test23_1.csv\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 structured\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 test23_1-output.csv\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 test23_1-output.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 0002\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 invoice\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 invoice.json\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 main_image\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 test23_2-output.png\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 meta\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 metadata.json\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 raw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 test23_2.csv\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 structured\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 test23_2-output.csv\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 test23_2-output.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 invoice\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 invoice.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 invoice_org.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main_image\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 test23_0-output.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 meta\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 metadata.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 raw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 test23_0.csv\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 structured\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 test23_0-output.csv\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 test23_0-output.html\n\u2514\u2500\u2500 thumbnail\n    \u2514\u2500\u2500 test23_0-output.png\n</code></pre> <p>structured.zip\u304ctemp\u30d5\u30a9\u30eb\u30c0\u306b\u5c55\u958b\u3055\u308c\u305f\u306e\u3061\u306b\u898f\u7a0b\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u5c55\u958b\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"usage/config/mode/#invoicejsonzip","title":"invoice.json\u3092zip\u306b\u542b\u3081\u305f\u5834\u5408","text":"<p>RDEformat\u30e2\u30fc\u30c9\u3067\u306f\u3001\u6295\u5165\u3057\u305f<code>invoice.json</code>\u306f\u5229\u7528\u3055\u308c\u305a<code>invoice/invoice.json</code>\u304c\u30b3\u30d4\u30fc\u3055\u308c\u308b</p> <p>Warning</p> <ul> <li>RDEformat\u30e2\u30fc\u30c9\u3067\u306f\u3001<code>invoice/invoice.json</code>\u304c\u5229\u7528\u3055\u308c\u308b(divided\u306b\u3082\u30b3\u30d4\u30fc)</li> <li>temp\u30d5\u30a9\u30eb\u30c0\u306b\u5c55\u958b\u3055\u308c\u308b\u304c\u7d42\u4e86\u5f8c\u524a\u9664\u3055\u308c\u306a\u3044</li> </ul>"},{"location":"usage/config/mode/#multidatatile","title":"\u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb(MultiDataTile)","text":""},{"location":"usage/config/mode/#_14","title":"\u8aac\u660e","text":"<p>\u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u306f\u3001\u4e00\u5ea6\u306b\u8907\u6570\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8ffd\u52a0\u3059\u308b\u30e2\u30fc\u30c9\u3067\u3059\u3002\u3053\u306e\u30e2\u30fc\u30c9\u306f\u3001\u30d6\u30e9\u30a6\u30b6\u306eRDE\u30c7\u30fc\u30bf\u53d7\u3051\u5165\u308c\u753b\u9762\u3088\u308a\u767b\u9332\u3057\u307e\u3059\u3002\u4e0b\u8a18\u306e\u4f8b\u306e\u5834\u5408\u3001<code>rdeconfig.yml</code>\u3092\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u683c\u7d0d\u3057\u3001<code>extended_mode: 'MultiDataTile'</code>\u3092\u8ffd\u52a0\u3059\u308b\u3068\u3001\u767b\u9332\u3057\u305f\u30c7\u30fc\u30bf\u6570\u3054\u3068\u306b\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30bf\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002<code>rdeconfig.yml</code>\u304c\u306a\u3044\u5834\u5408\u3001\u3082\u3057\u304f\u306f\u3001<code>extended_mode</code>\u306e\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u3001\u4e00\u3064\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30bf\u30a4\u30eb\u306b\u767b\u9332\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u3059\u3079\u3066\u767b\u9332\u3055\u308c\u307e\u3059\u3002</p> <p></p>"},{"location":"usage/config/mode/#_15","title":"\u8d77\u52d5\u6761\u4ef6","text":"<p>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b<code>extended_mode: 'MultiDataTile'</code>\u3092\u8ffd\u52a0</p> <pre><code>extended_mode: 'MultiDataTile'\n</code></pre> <p>Documents</p> <p>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb<code>rdeconfig.yml</code>\u306f\u3001\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb - config\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"usage/config/mode/#multidatatile_1","title":"\u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb(MultiDataTile) \u5b9f\u884c\u4f8b","text":""},{"location":"usage/config/mode/#_16","title":"\u6295\u5165\u30c7\u30fc\u30bf","text":"<ul> <li>\u767b\u9332\u30d5\u30a1\u30a4\u30eb</li> <li>tdata0000.dat</li> <li>data0001.dat</li> <li>tasksupport</li> <li>rdeconfig.yaml</li> </ul>"},{"location":"usage/config/mode/#_17","title":"\u5b9f\u884c\u524d\u30d5\u30a1\u30a4\u30eb\u69cb\u6210","text":"<pre><code>$ tree data\ndata\n\u251c\u2500\u2500 inputdata\n\u2502   \u251c\u2500\u2500 data0000.dat\n\u2502   \u2514\u2500\u2500 data0001.dat\n\u251c\u2500\u2500 invoice\n\u2502   \u2514\u2500\u2500 invoice.json\n\u2514\u2500\u2500 tasksupport\n    \u251c\u2500\u2500 rdeconfig.yml\n    \u251c\u2500\u2500 invoice.schema.json\n    \u2514\u2500\u2500 metadata-def.json\n</code></pre>"},{"location":"usage/config/mode/#_18","title":"\u5b9f\u884c\u5f8c\u30d5\u30a1\u30a4\u30eb\u69cb\u6210","text":"<p>\u4e0a\u8a18\u306e\u8a2d\u5b9a\u3067\u3001\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u51fa\u529b\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p> <pre><code>data\n\u251c\u2500\u2500 divided\n\u2502   \u2514\u2500\u2500 0001\n\u2502       \u251c\u2500\u2500 invoice\n\u2502       \u2502   \u2514\u2500\u2500 invoice.json\n\u2502       \u251c\u2500\u2500 logs\n\u2502       \u251c\u2500\u2500 main_image\n\u2502       \u251c\u2500\u2500 meta\n\u2502       \u251c\u2500\u2500 other_image\n\u2502       \u251c\u2500\u2500 raw\n\u2502       \u2502   \u2514\u2500\u2500 data0000.dat\n\u2502       \u251c\u2500\u2500 structured\n\u2502       \u251c\u2500\u2500 temp\n\u2502       \u2514\u2500\u2500 thumbnail\n\u251c\u2500\u2500 inputdata\n\u2502   \u251c\u2500\u2500 data0000.dat\n\u2502   \u2514\u2500\u2500 data0001.dat\n\u251c\u2500\u2500 invoice\n\u2502   \u2514\u2500\u2500 invoice.json\n\u251c\u2500\u2500 logs\n\u2502   \u2514\u2500\u2500 rdesys.log\n\u251c\u2500\u2500 main_image\n\u251c\u2500\u2500 meta\n\u251c\u2500\u2500 other_image\n\u251c\u2500\u2500 raw\n\u2502   \u2514\u2500\u2500 data0001.dat\n\u251c\u2500\u2500 structured\n\u251c\u2500\u2500 tasksupport\n\u2502   \u251c\u2500\u2500 rdeconfig.yml\n\u2502   \u251c\u2500\u2500 metadata-def.json\n\u2502   \u2514\u2500\u2500 invoice.schema.json\n\u251c\u2500\u2500 temp\n\u2502   \u2514\u2500\u2500 invoice_org.json\n\u2514\u2500\u2500 thumbnail\n</code></pre>"},{"location":"usage/structured_process/directory/","title":"\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea","text":""},{"location":"usage/structured_process/directory/#_2","title":"\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020","text":"<p>RDE\u69cb\u9020\u5316\u51e6\u7406\u3067\u306f\u4ee5\u4e0b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"usage/structured_process/directory/#_3","title":"\u5165\u529b","text":"<p>\u4ee5\u4e0b\u306e3\u3064\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u3001\u69cb\u9020\u5316\u51e6\u7406\u5b9f\u884c\u6642\u3001\u30b7\u30b9\u30c6\u30e0\u5074\u3067\u81ea\u52d5\u3067\u751f\u6210\u3055\u308c\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u30ed\u30fc\u30ab\u30eb\u3067\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u3001\u4e8b\u524d\u306b\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4f5c\u6210\u3059\u308b\u5834\u6240\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u540c\u3058\u968e\u5c64\u306b\u3001<code>data</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e<code>data</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u914d\u4e0b\u306b\u3001\u4e0b\u8a18\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d \u7a2e\u5225 \u7528\u9014 inputdata \u5165\u529b\u30c7\u30fc\u30bf \u5165\u529b\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3092\u683c\u7d0d invoice \u9001\u308a\u72b6\u30c7\u30fc\u30bf \u9001\u308a\u72b6(invoice.json)\u304c\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002 tasksupport \u753b\u50cf\u30d5\u30a1\u30a4\u30eb \u4e8b\u524d\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u4f5c\u6210\u6642\u306b\u767b\u9332\u3057\u305f\u69cb\u9020\u5316\u51e6\u7406\u88dc\u52a9\u30d5\u30a1\u30a4\u30eb\u7fa4\u3092\u683c\u7d0d"},{"location":"usage/structured_process/directory/#_4","title":"\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u524d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4f8b","text":"<p>\u30ed\u30fc\u30ab\u30eb\u3067\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4e8b\u524d\u306b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3059\u308b\u3002</p> <pre><code>.\n\u251c\u2500\u2500 modules\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 custom_modules.py\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 inputdata\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 sample_data.ras\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 invoice\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 invoice.json\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tasksupport\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 invoice.schema.json\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 metadata-def.json\n\u251c\u2500\u2500 main.py # \u8d77\u52d5\u51e6\u7406\u3092\u5b9a\u7fa9(entry point)\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"usage/structured_process/directory/#_5","title":"\u51fa\u529b","text":"<p>\u51fa\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u3001\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u7fa4\u3067\u3059\u3002rdetoolkit\u3067\u306f\u3001\u69cb\u9020\u5316\u51e6\u7406\u5b9f\u884c\u3059\u308b\u3068\u3001\u4e0b\u8a18\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u81ea\u52d5\u3067\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002</p> \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d \u7a2e\u5225 \u7528\u9014 meta \u4e3b\u8981\u30d1\u30e9\u30e1\u30fc\u30bf\u60c5\u5831\u30d5\u30a1\u30a4\u30eb \u4e3b\u8981\u30d1\u30e9\u30e1\u30fc\u30bf\u60c5\u5831\u30d5\u30a1\u30a4\u30eb(<code>metadata.json</code>)\u3092\u683c\u7d0d main_image \u753b\u50cf\u30d5\u30a1\u30a4\u30eb RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u8a73\u7d30\u753b\u50cf\u3068\u3057\u3066\u8868\u793a\u3055\u308c\u308b\u30b5\u30e0\u30cd\u30a4\u30eb\u30d5\u30a1\u30a4\u30eb other_image \u753b\u50cf\u30d5\u30a1\u30a4\u30eb RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u306b\u306e\u307f\u8868\u793a\u3055\u308c\u308b thumbnail \u753b\u50cf\u30d5\u30a1\u30a4\u30eb RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u4e00\u89a7\u306b\u8868\u793a\u3055\u308c\u308b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb attachment - \u6dfb\u4ed8\u30d5\u30a1\u30a4\u30eb(\u203b) nonshared_raw - \u5171\u6709\u4e0d\u53ef\u80fd\u306a\u30d5\u30a1\u30a4\u30eb\u7fa4\u3092\u914d\u7f6e raw raw\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb \u5171\u6709\u53ef\u80fd\u306araw\u30d5\u30a1\u30a4\u30eb\u7fa4\u3092\u914d\u7f6e\u3002\u5165\u529b\u30c7\u30fc\u30bf\u3092\u914d\u7f6e\u3059\u308b\u3002 structured \u69cb\u9020\u5316\u30d5\u30a1\u30a4\u30eb \u69cb\u9020\u5316\u51e6\u7406\u306b\u3088\u308a\u751f\u6210\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u914d\u7f6e\u3002\u5165\u529b\u30c7\u30fc\u30bf\u3092\u914d\u7f6e\u3059\u308b\u3002 logs - \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u767b\u9332\u30fb\u53cd\u6620\u3055\u308c\u307e\u305b\u3093\u304c\u3001\u30ed\u30b0\u3092\u84c4\u7a4d\u3059\u308b\u305f\u3081\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002 temp - \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u767b\u9332\u30fb\u53cd\u6620\u3055\u308c\u307e\u305b\u3093\u304c\u3001\u4e00\u6642\u7684\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u3057\u3066\u3001temp\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u4f5c\u6210\u3055\u308c\u308b\u30b1\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\u3002 <p>Warning</p> <ul> <li>attachment\u306f\u3001rdetoolkit\u3067\u306f\u81ea\u52d5\u3067\u751f\u6210\u3055\u308c\u307e\u305b\u3093\u3002</li> </ul>"},{"location":"usage/structured_process/directory/#_6","title":"\u30ed\u30fc\u30ab\u30eb\u3067\u69cb\u9020\u5316\u51e6\u7406\u5b9f\u884c\u5f8c\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4f8b","text":"<pre><code>\u251c\u2500\u2500 modules\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 custom_modules.py\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 inputdata\n\u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 excelinvoice.zip\n\u2502   \u251c\u2500\u2500 invoice\n\u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 invoice.json\n\u2502   \u251c\u2500\u2500 logs\n\u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 rdesys.log\n\u2502   \u251c\u2500\u2500 main_image\n\u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 iamge0.png\n\u2502   \u251c\u2500\u2500 meta\n\u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 metadata.json\n\u2502   \u251c\u2500\u2500 nonshared_raw\n\u2502   \u251c\u2500\u2500 other_image\n\u2502   \u2502\u00a0\u00a0 \u251c\u2500\u2500 sub_image1.png\n\u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 sub_image2.png\n\u2502   \u251c\u2500\u2500 raw\n\u2502   \u2502\u00a0\u00a0 \u251c\u2500\u2500 DMF-pos-1.xyz\n\u2502   \u2502\u00a0\u00a0 \u251c\u2500\u2500 li-mole.inp\n\u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 opt.xyz\n\u2502   \u251c\u2500\u2500 structured\n\u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 sample.csv\n\u2502   \u251c\u2500\u2500 tasksupport\n\u2502   \u2502\u00a0\u00a0 \u251c\u2500\u2500 invoice.schema.json\n\u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 metadata-def.json\n\u2502   \u251c\u2500\u2500 temp\n\u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 invoice_org.json\n\u2502   \u2514\u2500\u2500 thumbnail\n\u2502       \u2514\u2500\u2500 image.png\n\u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"usage/structured_process/errorhandling/","title":"\u69cb\u9020\u5316\u51e6\u7406\u306e\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0","text":""},{"location":"usage/structured_process/errorhandling/#rde","title":"RDE\u306e\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3068\u30e1\u30c3\u30bb\u30fc\u30b8","text":"<p>RDE\u306e\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3068\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3001<code>job.failed</code>\u3068\u3044\u3046\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3078\u51fa\u529b\u3059\u308b\u3053\u3068\u3067\u7d42\u4e86\u30b3\u30fc\u30c90\u4ee5\u5916\u3092\u30ea\u30bf\u30fc\u30f3\u3059\u308b\u3053\u3068\u3067\u3001\u69cb\u9020\u5316\u51e6\u7406\u306e\u7570\u5e38\u7d42\u4e86\u3092RDE\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304b\u3089\u78ba\u8a8d\u53ef\u80fd\u3067\u3059\u3002</p> <p>\u30d5\u30a9\u30fc\u30de\u30c3\u30c8</p> <pre><code>ErrorCode=&lt;\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u30fb\u756a\u53f7&gt;\nErrorMessage=&lt;\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8&gt;\n</code></pre> <p><code>jobs.faild</code>\u306e\u8a18\u8ff0\u4f8b</p> <pre><code>ErrorCode=1\nErrorMessage=ERROR: failed in data processing\n</code></pre> <p></p>"},{"location":"usage/structured_process/errorhandling/#rdetoolkit","title":"RDEToolKit\u3092\u4f7f\u3063\u3066\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u5b9f\u88c5\u3059\u308b","text":"<p>RDEToolKit\u3067\u306f\u3001<code>rdetoolkit.workflows.run()</code>\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u5185\u90e8\u3067\u767a\u751f\u3057\u305f\u4f8b\u5916<code>rdetoolkit.exceptions.StructuredError</code>\u3092\u30ad\u30e3\u30c3\u30c1\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001\u4e0b\u8a18\u306e\u4f8b\u3067\u306f\u3001\u5b58\u5728\u3057\u306a\u3044\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u3093\u3060\u3068\u304d\u306e\u30a8\u30e9\u30fc\u3092\u3001job.failed\u306b\u8a18\u8ff0\u3059\u308b\u4f8b\u3067\u3059\u3002</p> <pre><code># main.py\nimport json\n\nimport rdetoolkit\nfrom rdetoolkit.exceptions import StructuredError\n\n\ndef read_experiment_data(config_path: str) -&gt; dict:\n    with open(config_path, \"r\") as f:\n        return json.load(f)\n\n\ndef dataset(srcpaths, resource_paths):\n    try:\n        config = read_experiment_data(\"not_found_file_path.txt\")\n    except FileNotFoundError as e:\n        # Add the error message and the error code\n        raise StructuredError(\"Config file not found\", ecode=3, eobj=e) from e\n\n    # Do something with the dataset\n    pass\n\n\nif __name__ == \"__main__\":\n    rdetoolkit.workflows.run(custom_dataset_function=dataset)\n</code></pre> <p><code>job.failed</code>\u306e\u51fa\u529b\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002</p> <pre><code>ErrorCode=3\nErrorMessage=Config file not found\n</code></pre>"},{"location":"usage/structured_process/errorhandling/#_2","title":"\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u6574\u5f62\u3059\u308b","text":"<p><code>rdetoolkit.errors.catch_exception_with_message</code>\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u69cb\u9020\u5316\u51e6\u7406\u306e\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u3092\u6574\u5f62\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001\u4e0a\u8a18\u306e<code>dataset</code>\u306b\u3001<code>catch_exception_with_message</code>\u3067\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3068\u3057\u3066\u4ed8\u4e0e\u3057\u307e\u3059\u3002</p> <p>\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u306e\u6574\u5f62\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3001\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u306e\u4e0a\u66f8\u304d\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u306e\u8868\u793a\u30fb\u975e\u8868\u793a\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002</p> <ul> <li><code>error_message</code>\uff1a \u4e0a\u66f8\u304d\u3059\u308b\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8</li> <li><code>error_code</code>: \u4e0a\u66f8\u304d\u3059\u308b\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9</li> <li><code>verbose</code>: \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u306e\u8868\u793a\u30fb\u975e\u8868\u793a</li> </ul> <pre><code>@catch_exception_with_message(error_message=\"Overwrite message!\", error_code=100, verbose=False)\ndef dataset(srcpaths, resource_paths):\n    try:\n        config = read_experiment_data(\"not_found_file_path.txt\")\n    except FileNotFoundError as e:\n        # Add the error message and the error code\n        raise StructuredError(\"Config file not found\", ecode=3, eobj=e) from e\n\n    # Do something with the dataset\n    passs\n</code></pre> <p>\u3053\u306e\u6642\u306e\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u306f\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002</p> <pre><code>Traceback (simplified message):\nCall Path:\n   File: /Users/myproject/container/modules/custom_modules.py, Line: 109 in wrapper()\n    \u2514\u2500 File: /Users/myproject/container/main.py, Line: 27 in dataset()\n        \u2514\u2500&gt; L27: raise StructuredError(\"Config file not found\", ecode=3, eobj=e) from e \ud83d\udd25\n\nException Type: StructuredError\nError: Config file not found\n</code></pre> <p>\u307e\u305f\u3001\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306e<code>job.failed</code>\u306f\u3001\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4ed8\u4e0e\u3059\u308b\u524d\u3068\u540c\u69d8\u306e\u51fa\u529b\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u5185\u90e8\u3067\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3057\u305f<code>raise &lt;\u4f8b\u5916\u30af\u30e9\u30b9&gt;</code>\u306e\u5185\u5bb9\u3092\u6355\u6349\u3057\u3001\u8a73\u7d30\u60c5\u5831\u3092<code>job.faild</code>\u306b\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002</p> <p>\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u4ed8\u4e0e\u3057\u305f\u95a2\u6570\u5185\u90e8\u3067\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3057\u305f\u4f8b\u5916\u30af\u30e9\u30b9\u3067\u30a8\u30e9\u30fc\u3092\u6355\u6349\u3057\u305f\u5834\u5408\u3001\u305d\u306e\u4f8b\u5916\u60c5\u5831\u304c\u512a\u5148\u3055\u308c\u308b\u305f\u3081\u3001\u30c7\u30b3\u30ec\u30fc\u30bf\u5f15\u6570\u3067\u4e0e\u3048\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3084\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3067\u306f\u4e0a\u66f8\u304d\u3055\u308c\u307e\u305b\u3093\u3002</p> <p>\u3053\u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u4e8b\u524d\u306b\u4f8b\u5916\u51e6\u7406\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u304b\u3064\u3001\u4e88\u671f\u3057\u306a\u3044\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u6355\u6349\u3057\u305f\u3068\u304d\u3001\u30c7\u30b3\u30ec\u30fc\u30bf\u306e\u5f15\u6570\u3067\u4e8b\u524d\u306b\u5b9a\u7fa9\u3057\u305f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3092<code>job.faild</code>\u306b\u66f8\u304d\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <pre><code>ErrorCode=3\nErrorMessage=Error: Config file not found\n</code></pre> <p>\u3082\u3057\u3001\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u308f\u306a\u305a\u3001\u4e88\u671f\u3057\u306a\u3044\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001<code>job.faild</code>\u306b\u306f\u4ee5\u4e0b\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u66f8\u304d\u8fbc\u307e\u308c\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001Web UI\u3067\u78ba\u8a8d\u3057\u305f\u3068\u304d\u3001\u30a8\u30e9\u30fc\u306e\u7279\u5b9a\u304c\u96e3\u3057\u3044\u3067\u3059\u3002</p> <pre><code>ErrorCode=999\nErrorMessage=Error: Please check the logs and code, then try again.\n</code></pre>"},{"location":"usage/structured_process/feature_description/","title":"\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u8aac\u660e\u6b04\u3078\u306e\u81ea\u52d5\u8a18\u8ff0\u306b\u3064\u3044\u3066","text":"<p>Reference</p> <ul> <li>API Documentation: update_description_with_features()</li> </ul> <p><code>data/tasksupport/metadata-def.json</code>\u306b\u3001<code>_feature</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u3001\u81ea\u52d5\u7684\u306b\u8aac\u660e\u6b04\u3078\u8a18\u8ff0\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001<code>length</code>\u3068\u3001<code>weight</code>\u306b<code>_feature=true</code>\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u306e\u8aac\u660e\u6b04\u3078\u81ea\u52d5\u7684\u306b\u8a18\u8ff0\u3055\u308c\u307e\u3059\u3002</p> <pre><code>{\n    \"length\": {\n        \"name\": {\n            \"ja\": \"\u9577\u3055\",\n            \"en\": \"length\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        },\n        \"unit\": \"nm\",\n        \"_feature\": true\n    },\n    \"weight\": {\n        \"name\": {\n            \"ja\": \"\u91cd\u3055\",\n            \"en\": \"weight\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        },\n        \"unit\": \"nm\",\n        \"_feature\": true\n    },\n    \"hight\": {\n        \"name\": {\n            \"ja\": \"\u9ad8\u3055\",\n            \"en\": \"hight\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        },\n        \"unit\": \"nm\"\n    }\n}\n</code></pre> <p><code>_feature</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u3042\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u306f\u3001\u4ee5\u4e0b\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u5909\u63db\u3055\u308c\u3001<code>invoice/invoice.json</code>\u306e<code>basic.description</code>\u3078\u8ee2\u8a18\u3055\u308c\u307e\u3059\u3002</p> <p>Tip</p> <p>key\u540d\u306f\u65e5\u672c\u8a9e\u540d\u306e\u307f\u306e\u5bfe\u5fdc\u3067\u3059\u3002value\u306f<code>meta/metadata.json</code>\u3092\u53c2\u7167\u3057\u307e\u3059\u3002</p> \u5358\u4f4d(unit\u30d5\u30a3\u30fc\u30eb\u30c9)\u3042\u308a\u5358\u4f4d(unit\u30d5\u30a3\u30fc\u30eb\u30c9)\u306a\u3057 <p><code>invoice/invoice.json</code>\u8a18\u8f09\u4f8b</p> <pre><code>{\n    \"basic\": {\n        \"description\": \"\u9577\u3055(nm):100\\n\u91cd\u3055(nm):200\"\n    }\n}\n</code></pre> <p><code>invoice/invoice.json</code>\u8a18\u8f09\u4f8b</p> <pre><code>{\n    \"basic\": {\n        \"description\": \"\u9577\u3055:100\\n\u91cd\u3055:200\"\n    }\n}\n</code></pre>"},{"location":"usage/structured_process/rdepath/","title":"\u69cb\u9020\u5316\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u306e\u53d6\u5f97","text":""},{"location":"usage/structured_process/rdepath/#_2","title":"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406\u306e\u5236\u7d04","text":"<p>\u30e6\u30fc\u30b6\u30fc\u81ea\u8eab\u304c\u3001\u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9a\u7fa9\u3059\u308b\u969b\u304c\u3001<code>RdeInputDirPaths</code>, <code>RdeOutputResourcePath</code>\u3092\u5f15\u6570\u3067\u53d7\u3051\u53d6\u308c\u308a\u53ef\u80fd\u306a\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002</p> <pre><code>def dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # \u3053\u306e\u95a2\u6570\u5185\u3067\u30e6\u30fc\u30b6\u81ea\u8eab\u304c\u5b9a\u7fa9\u3057\u305f\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\n    ...\n</code></pre> <p>Reference</p> <ul> <li>API Documentation: RdeInputDirPaths - rde2types</li> <li>API Documentation: RdeOutputResourcePath - rde2types</li> </ul> <p><code>RdeInputDirPaths</code>\u306f\u3001\u5165\u529b\u3067\u6271\u308f\u308c\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u3084\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u7fa4\u3092\u683c\u7d0d\u3057\u3066\u307e\u3059\u3002\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u306f\u3001<code>pathlib.Path</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p> <pre><code>@dataclass\nclass RdeInputDirPaths:\n    inputdata: Path\n    invoice: Path\n    tasksupport: Path\n</code></pre> <p>\u95a2\u6570\u5185\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u5b9a\u7fa9\u3067\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002</p> <pre><code>def dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    inputdata_dir = srcpaths.inputdata\n    invoice_dir = srcpaths.invoice\n    tasksupport = srcpaths.tasksupport\n</code></pre> <p><code>RdeOutputResourcePath</code>\u3067\u306f\u3001\u51fa\u529b\u3067\u6271\u308f\u308c\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u7fa4\u3092\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002</p> <pre><code>@dataclass\nclass RdeOutputResourcePath:\n    raw: Path\n    rawfiles: tuple[Path, ...]\n    struct: Path\n    main_image: Path\n    other_image: Path\n    meta: Path\n    thumbnail: Path\n    logs: Path\n    invoice: Path\n    invoice_schema_json: Path\n    invoice_org: Path\n    temp: Path | None = None\n    invoice_patch: Path | None = None\n    attachment: Path | None = None\n    nonshared_raw: Path | None = None\n</code></pre> <p>\u95a2\u6570\u5185\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u5b9a\u7fa9\u3067\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002</p> <pre><code>def dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    rawfiles = resource_paths.rawfiles\n    raw_dir = resource_paths.raw\n    struct_dir = resource_paths.struct\n    main_image_dir = resource_paths.main_image\n</code></pre>"},{"location":"usage/structured_process/structured/","title":"\u69cb\u9020\u5316\u51e6\u7406\u3092\u69cb\u7bc9\u3059\u308b","text":"<p>RDE\u69cb\u9020\u5316\u51e6\u7406\u306f\u3001\u5927\u304d\u304f\u5206\u3051\u3066\u3001\u4ee5\u4e0b\u306e3\u3064\u306e\u30d5\u30a7\u30fc\u30ba\u306b\u5206\u3051\u3089\u308c\u307e\u3059\u3002</p> <pre><code>graph LR\n    \u8d77\u52d5\u51e6\u7406 --&gt; \u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406\n    \u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406 --&gt; \u7d42\u4e86\u51e6\u7406\n</code></pre> <p>\u8d77\u52d5\u51e6\u7406\u3001\u7d42\u4e86\u51e6\u7406\u306f\u3001rdetoolkit\u3092\u4f7f\u3046\u3053\u3068\u3067\u7c21\u5358\u306b\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u30e6\u30fc\u30b6\u30fc\u81ea\u8eab\u306f\u3001\u3054\u81ea\u8eab\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b<code>\u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406</code>\u3092\u5b9a\u7fa9\u3059\u308b\u3060\u3051\u3067\u3059\u3002</p>"},{"location":"usage/structured_process/structured/#rdetoolkit","title":"RDEToolKit\u304c\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u51e6\u7406","text":"<ul> <li>\u8d77\u52d5\u30e2\u30fc\u30c9\u306e\u81ea\u52d5\u5224\u5b9a</li> <li>\u5165\u529b\u30c7\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4fdd\u5b58\u3059\u308b</li> <li>Main\u753b\u50cf\u3092\u30b5\u30e0\u30cd\u30a4\u30eb\u753b\u50cf\u306b\u4fdd\u5b58\u3059\u308b</li> <li>magic variable\u306e\u9069\u7528</li> <li>invoice.schema.json, invoice.json\u7b49\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3</li> <li>metadata-def.json\u304b\u3089\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30bf\u30a4\u30eb\u306e\u8aac\u660e\u6b04\u81ea\u52d5\u751f\u6210</li> </ul>"},{"location":"usage/structured_process/structured/#_2","title":"\u8d77\u52d5\u51e6\u7406","text":"<p>\u8d77\u52d5\u51e6\u7406\u3067\u306f\u3001\u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u524d\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</p> <p>Reference</p> <p>API Documents: rdetoolkit.workflows.run</p>"},{"location":"usage/structured_process/structured/#_3","title":"\u5b9f\u88c5\u4f8b","text":"<p>\u5b9f\u88c5\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308b\u30d5\u30a1\u30a4\u30eb\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001<code>main.py</code>\u3084<code>run.py</code>\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002</p> <pre><code>from modules import process #\u72ec\u81ea\u3067\u5b9a\u7fa9\u3057\u305f\u69cb\u9020\u5316\u51e6\u7406\u95a2\u6570\nimport rdetoolkit\n\n# run()\u304cRDE\u69cb\u9020\u5316\u306e\u8d77\u52d5\u51e6\u7406\u3068\u5f8c\u51e6\u7406\u3092\u5b9f\u884c\nrdetoolkit.workflows.run(custom_dataset_function=process.dataset)\n</code></pre>"},{"location":"usage/structured_process/structured/#_4","title":"\u5177\u4f53\u7684\u306a\u51e6\u7406\u306b\u3064\u3044\u3066","text":"<p>\u8d77\u52d5\u51e6\u7406\u306f\u3001\u6b21\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</p> <ul> <li>RDE\u69cb\u9020\u5316\u51e6\u7406\u3067\u5fc5\u8981\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u81ea\u52d5\u4f5c\u6210</li> <li>\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u3092<code>raw</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3078\u81ea\u52d5\u4fdd\u5b58</li> <li>\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u30fb\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u304b\u3089\u3001\u5404\u7a2e\u30e2\u30fc\u30c9\u306b\u5fdc\u3058\u305f\u8aad\u307f\u8fbc\u307f\u51e6\u7406</li> <li>\u8aad\u307f\u8fbc\u3093\u3060\u30d5\u30a1\u30a4\u30eb\u3092\u3001\u72ec\u81ea\u3067\u5b9a\u7fa9\u3057\u305f\u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406\u306b\u6e21\u3057\u5b9f\u884c</li> </ul> <p>\u5404\u7a2e\u30e2\u30fc\u30c9\u3054\u3068\u306e\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u3067\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3044\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u3001\u30d5\u30a1\u30a4\u30eb\u306b\u5bfe\u3059\u308b\u5177\u4f53\u7684\u306a\u51e6\u7406\u306f\u3001\u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406\u7b49\u3067\u5b9a\u7fa9\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>graph TD\n    init1[\u8d77\u52d5\u51e6\u7406] --&gt; init2[\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4f5c\u6210]\n    init2--&gt;init3{\u30e2\u30fc\u30c9\u9078\u629e}\n    init3--&gt;|default|init6[invoice\u30e2\u30fc\u30c9]\n    init3--&gt;init7[Excelinvoice\u30e2\u30fc\u30c9]\n    init3--&gt;init8[\u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb]\n    init3--&gt;init9[RDE\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30e2\u30fc\u30c9]\n    init6--&gt;init10[\u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406]\n    init7--&gt;init10\n    init8--&gt;init10\n    init9--&gt;init10\n    init10 --&gt; init11[\u5165\u529b\u30c7\u30fc\u30bf\u306eraw\u30d5\u30a9\u30eb\u30c0\u306b\u8ffd\u52a0]\n    init11 --&gt; init12[[\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u306e\u69cb\u9020\u5316\u51e6\u7406\u5b9f\u884c]]\n    init12 --&gt; init13[\u30b5\u30e0\u30cd\u30a4\u30eb\u753b\u50cf\u306e\u81ea\u52d5\u4fdd\u5b58]\n    init13 --&gt; init14[magic variable]\n    init14 --&gt; init15[\u7d42\u4e86]\n</code></pre>"},{"location":"usage/structured_process/structured/#_5","title":"\u30ab\u30b9\u30bf\u30e0\u7528\u69cb\u9020\u5316\u51e6\u7406\u95a2\u6570\u306e\u4f5c\u6210","text":"<p>rdetoolkit\u3067\u306f\u3001\u72ec\u81ea\u306e\u51e6\u7406\u3092RDE\u306e\u69cb\u9020\u5316\u51e6\u7406\u306e\u30d5\u30ed\u30fc\u306b\u7d44\u307f\u8fbc\u307f\u8fbc\u3080\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u72ec\u81ea\u306e\u69cb\u9020\u5316\u51e6\u7406\u306f\u3001\u5165\u529b\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u30c7\u30fc\u30bf\u52a0\u5de5\u30fb\u30b0\u30e9\u30d5\u5316\u30fb\u6a5f\u68b0\u5b66\u7fd2\u7528\u306ecsv\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\u306a\u3069\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u56fa\u6709\u306e\u51e6\u7406\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u3001RDE\u3078\u67d4\u8edf\u306b\u30c7\u30fc\u30bf\u3092\u767b\u9332\u53ef\u80fd\u3067\u3059\u3002</p>"},{"location":"usage/structured_process/structured/#_6","title":"\u5b9f\u88c5\u4f8b","text":"<p>\u3053\u3053\u3067\u306f\u3001rdetoolkit\u3078\u6e21\u3059\u72ec\u81ea\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u95a2\u6570\u3092\u3001<code>dataset()</code>\u3068\u3057\u307e\u3059\u3002<code>dataset()</code>\u306f\u3001\u4ee5\u4e0b\u306e2\u3064\u306e\u5f15\u6570\u3092\u6e21\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>Tip</p> <p>\u72ec\u81ea\u306e\u30af\u30e9\u30b9\u30fb\u95a2\u6570\u7fa4\u3092\u5b9a\u7fa9\u3059\u308b\u5834\u5408\u3001\u5fc5\u305a<code>RdeInputDirPaths</code>, <code>RdeOutputResourcePath</code>\u3092\u5f15\u6570\u3067\u53d7\u3051\u53d6\u308a\u53ef\u80fd\u306a\u95a2\u6570\u3067wrap\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code># wrap\u7528\u95a2\u6570\ndef dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # \u3053\u306e\u95a2\u6570\u5185\u3067\u30e6\u30fc\u30b6\u81ea\u8eab\u304c\u5b9a\u7fa9\u3057\u305f\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\n    ...\n</code></pre> <p>\u3053\u308c\u306e\u5f15\u6570\u306b\u306f\u3001\u69cb\u9020\u5316\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u5404\u7a2e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u60c5\u5831\u3084\u30d5\u30a1\u30a4\u30eb\u60c5\u5831\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u7279\u306b\u3001<code>RdeOutputResourcePath</code>\u306b\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u4fdd\u5b58\u5148\u60c5\u5831\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u69cb\u9020\u5316\u51e6\u7406\u5185\u3067\u4e0a\u8a18\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fb\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u306f\u3001\u69cb\u9020\u5316\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u306e\u53d6\u5f97\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <ul> <li>srcpaths (RdeInputDirPaths): \u5165\u529b\u3055\u308c\u305f\u30ea\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u60c5\u5831</li> <li>resource_paths (RdeOutputResourcePath): \u51e6\u7406\u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u305f\u3081\u306e\u51fa\u529b\u30ea\u30bd\u30fc\u30b9\u30d1\u30b9\u60c5\u5831</li> </ul> <p>Reference</p> <ul> <li>API Documentation: RdeInputDirPaths - rde2types</li> <li>API Documentation: RdeOutputResourcePath - rde2types</li> </ul> <p>\u4eca\u56de\u306e\u4f8b\u3067\u306f\u3001<code>modules</code>\u4ee5\u4e0b\u306b\u3001<code>display_messsage()</code>, <code>custom_graph()</code>, <code>custom_extract_metadata()</code>\u3068\u3044\u3046\u30c0\u30df\u30fc\u51e6\u7406\u3092\u5b9a\u7fa9\u3057\u3001\u72ec\u81ea\u306e\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306f\u3001<code>modules/process.py</code>\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e2\u3064\u306e\u5f15\u6570\u3092\u6e21\u3059\u95a2\u6570\u3067\u306a\u3051\u308c\u3070\u3001rdetoolkit\u306f\u6b63\u3057\u304f\u51e6\u7406\u304c\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\u3002</p> <pre><code># modules/process.py\ndef display_messsage(path):\n    print(f\"Test Message!: {path}\")\n\ndef custom_graph():\n    print(\"graph\")\n\ndef custom_extract_metadata():\n    print(\"extract metadata\")\n\ndef dataset(srcpaths, resource_paths):\n    display_messsage(srcpaths)\n    display_messsage(resource_paths)\n    custom_graph()\n    custom_extract_metadata()\n</code></pre>"},{"location":"usage/structured_process/structured/#_7","title":"\u8d77\u52d5\u51e6\u7406\u3078\u7d44\u307f\u8fbc\u3080","text":"<p>\u3053\u306e<code>dataset()</code>\u3092\u8d77\u52d5\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u5148\u307b\u3069\u306e\u8d77\u52d5\u51e6\u7406\u3067\u4f5c\u6210\u3057\u305f\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308b\u30d5\u30a1\u30a4\u30eb(<code>main.py</code>\u306a\u3069)\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002</p> <pre><code>from modules import process #\u72ec\u81ea\u3067\u5b9a\u7fa9\u3057\u305f\u69cb\u9020\u5316\u51e6\u7406\u95a2\u6570\nimport rdetoolkit\n\n# run()\u306b\u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406\u3092\u3092\u6e21\u3059\nresult = rdetoolkit.workflows.run(custom_dataset_function=process.dataset)\n</code></pre> <p><code>result</code>\u306b\u306f\u3001\u69cb\u9020\u5316\u51e6\u7406\u306e\u5b9f\u884c\u30b9\u30c6\u30fc\u30bf\u30b9\u304c\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002</p> <pre><code>{\n  \"statuses\": [\n    {\n      \"run_id\": \"0000\",\n      \"title\": \"test-dataset\",\n      \"status\": \"success\",\n      \"mode\": \"MultiDataTile\",\n      \"error_code\": null,\n      \"error_message\": null,\n      \"target\": \"data/inputdata\",\n      \"stacktrace\": null\n    },\n    {\n      \"run_id\": \"0001\",\n      \"title\": \"test-dataset\",\n      \"status\": \"success\",\n      \"mode\": \"MultiDataTile\",\n      \"error_code\": null,\n      \"error_message\": null,\n      \"target\": \"data/inputdata\",\n      \"stacktrace\": null\n    }\n  ]\n}\n</code></pre> <p>\u5931\u6557\u3057\u305f\u6642\u306e<code>result</code>\u306e\u51fa\u529b</p> <pre><code>{\n  \"statuses\": [\n    {\n      \"run_id\": \"0000\",\n      \"title\": \"Structured Process Faild: MultiDataTile\",\n      \"status\": \"failed\",\n      \"mode\": \"MultiDataTile\",\n      \"error_code\": 999,\n      \"error_message\": \"Error: Error in modules\",\n      \"target\": \"data/inputdata/sample1.txt\",\n      \"stacktrace\": \"Traceback (most recent call last):\\n  File \\\"/Users/myproject/.venv/lib/python3.10/site-packages/rdetoolkit/exceptions.py\\\", line 158, in skip_exception_context\\n    yield error_info\\n  File \\\"/Users/myproject/.venv/lib/python3.10/site-packages/rdetoolkit/workflows.py\\\", line 242, in run\\n    status = multifile_mode_process(str(idx), srcpaths, rdeoutput_resource, custom_dataset_function)\\n  File \\\"/Users/myproject/.venv/lib/python3.10/site-packages/rdetoolkit/modeproc.py\\\", line 157, in multifile_mode_process\\n    datasets_process_function(srcpaths, resource_paths)\\n  File \\\"/Users/myproject/modules/modules.py\\\", line 5, in error_modules\\n    raise Exception(\\\"Error in modules\\\")\\nException: Error in modules\\n\"\n    },\n    {\n      \"run_id\": \"0001\",\n      \"title\": \"Structured Process Faild: MultiDataTile\",\n      \"status\": \"failed\",\n      \"mode\": \"MultiDataTile\",\n      \"error_code\": 999,\n      \"error_message\": \"Error: Error in modules\",\n      \"target\": \"data/inputdata/sample2.txt\",\n      \"stacktrace\": \"Traceback (most recent call last):\\n  File \\\"/Users/myproject/.venv/lib/python3.10/site-packages/rdetoolkit/exceptions.py\\\", line 158, in skip_exception_context\\n    yield error_info\\n  File \\\"/Users/myproject/.venv/lib/python3.10/site-packages/rdetoolkit/workflows.py\\\", line 242, in run\\n    status = multifile_mode_process(str(idx), srcpaths, rdeoutput_resource, custom_dataset_function)\\n  File \\\"/Users/myproject/.venv/lib/python3.10/site-packages/rdetoolkit/modeproc.py\\\", line 157, in multifile_mode_process\\n    datasets_process_function(srcpaths, resource_paths)\\n  File \\\"/Users/myproject/modules/modules.py\\\", line 5, in error_modules\\n    raise Exception(\\\"Error in modules\\\")\\nException: Error in modules\\n\"\n    }\n  ]\n}\n</code></pre>"},{"location":"usage/structured_process/structured/#_8","title":"\u7d42\u4e86\u51e6\u7406\u306b\u3064\u3044\u3066","text":"<p>\u7d9a\u3044\u3066\u3001<code>rdetoolkit.workflow.run()</code>\u304c\u5b9f\u884c\u3059\u308b\u7d42\u4e86\u51e6\u7406\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p> <ul> <li>\u751f\u6210\u30d5\u30a1\u30a4\u30eb\u3001\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3</li> <li>Main\u753b\u50cf\u304b\u3089\u4ee3\u8868\u753b\u50cf\u306e\u81ea\u52d5\u4fdd\u5b58</li> <li>\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u8aac\u660e\u6b04\u3078\u6307\u5b9a\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u81ea\u52d5\u8a18\u8ff0</li> </ul> <pre><code>graph TD\n    end1[\u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406] --&gt; end2[\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3]\n    end2 --&gt; end3{\u8a2d\u5b9a:save_thumbnail_image}\n    end3 --&gt;|False|end6[\u8aac\u660e\u6b04\u306e\u81ea\u52d5\u8a18\u8ff0]\n    end3--&gt;|True|end5[Main\u753b\u50cf\u304b\u3089\u30b5\u30e0\u30cd\u30a4\u30eb\u753b\u50cf\u4fdd\u5b58]\n    end5 --&gt; end6\n    end6 --&gt; end7[\u7d42\u4e86]\n</code></pre>"},{"location":"usage/structured_process/structured/#_9","title":"\u5404\u7a2e\u30d5\u30a1\u30a4\u30eb\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3","text":"<p>\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306f\u3001\u6b21\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5bfe\u8c61\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u958b\u8a2d\u6642\u3001\u30c7\u30fc\u30bf\u767b\u9332\u6642\u306b\u91cd\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3068\u306a\u308a\u307e\u3059\u3002</p> <ul> <li><code>tasksupport/metadata-def.json</code></li> <li><code>tasksupport/invoice.shcema.json</code></li> <li><code>data/invoice/invoice.json</code></li> </ul> <p>Documents</p> <p>\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u3064\u3044\u3066</p>"},{"location":"usage/structured_process/structured/#_10","title":"\u8aac\u660e\u6b04\u3078\u306e\u81ea\u52d5\u8ee2\u8a18","text":"<p>\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <ul> <li>\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u8aac\u660e\u6b04\u3078\u306e\u81ea\u52d5\u8ee2\u8a18</li> </ul>"}]}